(* Module for axiomatizing type "short_short_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_short_integer
 use import "_gnatprove_standard".Main
 use import "int".Int

 type short_short_integer =
  < range -128 127 >
 
 function first 
   : int =
  ( -128 )
 
 function last 
   : int =
  127
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = short_short_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type short_short_integer__ref =
  { mutable short_short_integer__content "model_trace:" "name:" : short_short_integer }
 
 function short_short_integer__ref___projection 
   (a : short_short_integer__ref) : short_short_integer =
  a.short_short_integer__content
 
 meta "model_projection" function short_short_integer__ref___projection
 
 meta "inline : no" function short_short_integer__ref___projection
 
 val short_short_integer__havoc 
   (x : short_short_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "short_short_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_short_integer__rep
 use        Standard__short_short_integer
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__short_short_integer.short_short_integer) : int =
  (Standard__short_short_integer.short_short_integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__short_short_integer.short_short_integer, 
 predicate in_range = Standard__short_short_integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "short_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_integer
 use import "_gnatprove_standard".Main
 use import "int".Int

 type short_integer =
  < range -32768 32767 >
 
 function first 
   : int =
  ( -32768 )
 
 function last 
   : int =
  32767
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = short_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type short_integer__ref =
  { mutable short_integer__content "model_trace:" "name:" : short_integer }
 
 function short_integer__ref___projection 
   (a : short_integer__ref) : short_integer =
  a.short_integer__content
 
 meta "model_projection" function short_integer__ref___projection
 
 meta "inline : no" function short_integer__ref___projection
 
 val short_integer__havoc 
   (x : short_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "short_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_integer__rep
 use        Standard__short_integer
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__short_integer.short_integer) : int =
  (Standard__short_integer.short_integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__short_integer.short_integer, 
 predicate in_range = Standard__short_integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer
 use import "_gnatprove_standard".Main
 use import "int".Int

 type integer =
  < range -2147483648 2147483647 >
 
 function first 
   : int =
  ( -2147483648 )
 
 function last 
   : int =
  2147483647
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer__ref =
  { mutable integer__content "model_trace:" "name:" : integer }
 
 function integer__ref___projection 
   (a : integer__ref) : integer =
  a.integer__content
 
 meta "model_projection" function integer__ref___projection
 
 meta "inline : no" function integer__ref___projection
 
 val integer__havoc 
   (x : integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer__rep
 use        Standard__integer
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__integer.integer) : int =
  (Standard__integer.integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__integer.integer, 
 predicate in_range = Standard__integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "long_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_integer
 use import "_gnatprove_standard".Main
 use import "int".Int

 type long_integer =
  < range -2147483648 2147483647 >
 
 function first 
   : int =
  ( -2147483648 )
 
 function last 
   : int =
  2147483647
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = long_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type long_integer__ref =
  { mutable long_integer__content "model_trace:" "name:" : long_integer }
 
 function long_integer__ref___projection 
   (a : long_integer__ref) : long_integer =
  a.long_integer__content
 
 meta "model_projection" function long_integer__ref___projection
 
 meta "inline : no" function long_integer__ref___projection
 
 val long_integer__havoc 
   (x : long_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "long_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_integer__rep
 use        Standard__long_integer
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__long_integer.long_integer) : int =
  (Standard__long_integer.long_integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__long_integer.long_integer, 
 predicate in_range = Standard__long_integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "long_long_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_long_integer
 use import "_gnatprove_standard".Main
 use import "int".Int

 type long_long_integer =
  < range -9223372036854775808 9223372036854775807 >
 
 function first 
   : int =
  ( -9223372036854775808 )
 
 function last 
   : int =
  9223372036854775807
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = long_long_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type long_long_integer__ref =
  { mutable long_long_integer__content "model_trace:" "name:" : long_long_integer }
 
 function long_long_integer__ref___projection 
   (a : long_long_integer__ref) : long_long_integer =
  a.long_long_integer__content
 
 meta "model_projection" function long_long_integer__ref___projection
 
 meta "inline : no" function long_long_integer__ref___projection
 
 val long_long_integer__havoc 
   (x : long_long_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "long_long_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_long_integer__rep
 use        Standard__long_long_integer
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__long_long_integer.long_long_integer) : int =
  (Standard__long_long_integer.long_long_integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__long_long_integer.long_long_integer, 
 predicate in_range = Standard__long_long_integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "natural", created in Gnat2Why.Types.Translate_Type *)
module Standard__natural
 use import "_gnatprove_standard".Main
 use import "int".Int

 type natural =
  < range 0 2147483647 >
 
 function first 
   : int =
  0
 
 function last 
   : int =
  2147483647
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = natural, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type natural__ref =
  { mutable natural__content "model_trace:" "name:" : natural }
 
 function natural__ref___projection 
   (a : natural__ref) : natural =
  a.natural__content
 
 meta "model_projection" function natural__ref___projection
 
 meta "inline : no" function natural__ref___projection
 
 val natural__havoc 
   (x : natural__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "natural", created in Gnat2Why.Types.Translate_Type *)
module Standard__natural__rep
 use        Standard__natural
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__natural.natural) : int =
  (Standard__natural.natural'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__natural.natural, 
 predicate in_range = Standard__natural.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "positive", created in Gnat2Why.Types.Translate_Type *)
module Standard__positive
 use import "_gnatprove_standard".Main
 use import "int".Int

 type positive =
  < range 1 2147483647 >
 
 function first 
   : int =
  1
 
 function last 
   : int =
  2147483647
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = positive, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type positive__ref =
  { mutable positive__content "model_trace:" "name:" : positive }
 
 function positive__ref___projection 
   (a : positive__ref) : positive =
  a.positive__content
 
 meta "model_projection" function positive__ref___projection
 
 meta "inline : no" function positive__ref___projection
 
 val positive__havoc 
   (x : positive__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "positive", created in Gnat2Why.Types.Translate_Type *)
module Standard__positive__rep
 use        Standard__positive
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__positive.positive) : int =
  (Standard__positive.positive'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__positive.positive, 
 predicate in_range = Standard__positive.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "short_float", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_float
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32

 type short_float 
 
 function first 
   : Float32.t =
  (Float32.neg (340282346638528859811704183484516925440.0:Float32.t))
 
 function last 
   : Float32.t =
  (340282346638528859811704183484516925440.0:Float32.t)
 
 predicate in_range 
   (x : Float32.t)  =
  (Float32.t'isFinite x)
 
 clone export "ada__model".Static_Float32 with
 type t = short_float, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type short_float__ref =
  { mutable short_float__content "model_trace:" "name:" : short_float }
 
 function short_float__ref___projection 
   (a : short_float__ref) : short_float =
  a.short_float__content
 
 meta "model_projection" function short_float__ref___projection
 
 meta "inline : no" function short_float__ref___projection
 
 val short_float__havoc 
   (x : short_float__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "short_float", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_float__rep
 use        Standard__short_float
 use        "_gnatprove_standard".Float32
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Float32 with
 type t = Standard__short_float.short_float, 
 predicate in_range = Standard__short_float.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "float", created in Gnat2Why.Types.Translate_Type *)
module Standard__float
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32

 type float 
 
 function first 
   : Float32.t =
  (Float32.neg (340282346638528859811704183484516925440.0:Float32.t))
 
 function last 
   : Float32.t =
  (340282346638528859811704183484516925440.0:Float32.t)
 
 predicate in_range 
   (x : Float32.t)  =
  (Float32.t'isFinite x)
 
 clone export "ada__model".Static_Float32 with
 type t = float, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type float__ref =
  { mutable float__content "model_trace:" "name:" : float }
 
 function float__ref___projection 
   (a : float__ref) : float =
  a.float__content
 
 meta "model_projection" function float__ref___projection
 
 meta "inline : no" function float__ref___projection
 
 val float__havoc 
   (x : float__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "float", created in Gnat2Why.Types.Translate_Type *)
module Standard__float__rep
 use        Standard__float
 use        "_gnatprove_standard".Float32
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Float32 with
 type t = Standard__float.float, 
 predicate in_range = Standard__float.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "long_float", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_float
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float64

 type long_float 
 
 function first 
   : Float64.t =
  (Float64.neg (179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.0:Float64.t))
 
 function last 
   : Float64.t =
  (179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.0:Float64.t)
 
 predicate in_range 
   (x : Float64.t)  =
  (Float64.t'isFinite x)
 
 clone export "ada__model".Static_Float64 with
 type t = long_float, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type long_float__ref =
  { mutable long_float__content "model_trace:" "name:" : long_float }
 
 function long_float__ref___projection 
   (a : long_float__ref) : long_float =
  a.long_float__content
 
 meta "model_projection" function long_float__ref___projection
 
 meta "inline : no" function long_float__ref___projection
 
 val long_float__havoc 
   (x : long_float__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "long_float", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_float__rep
 use        Standard__long_float
 use        "_gnatprove_standard".Float64
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Float64 with
 type t = Standard__long_float.long_float, 
 predicate in_range = Standard__long_float.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "character", created in Gnat2Why.Types.Translate_Type *)
module Standard__character
 use import "_gnatprove_standard".Main
 use import "int".Int

 type character 
 
 function first 
   : int =
  0
 
 function last 
   : int =
  255
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = character, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type character__ref =
  { mutable character__content "model_trace:" "name:" : character }
 
 function character__ref___projection 
   (a : character__ref) : character =
  a.character__content
 
 meta "model_projection" function character__ref___projection
 
 meta "inline : no" function character__ref___projection
 
 val character__havoc 
   (x : character__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "character", created in Gnat2Why.Types.Translate_Type *)
module Standard__character__rep
 use        Standard__character
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__character.character, 
 predicate in_range = Standard__character.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "wide_character", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_character
 use import "_gnatprove_standard".Main
 use import "int".Int

 type wide_character 
 
 function first 
   : int =
  0
 
 function last 
   : int =
  65535
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = wide_character, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type wide_character__ref =
  { mutable wide_character__content "model_trace:" "name:" : wide_character }
 
 function wide_character__ref___projection 
   (a : wide_character__ref) : wide_character =
  a.wide_character__content
 
 meta "model_projection" function wide_character__ref___projection
 
 meta "inline : no" function wide_character__ref___projection
 
 val wide_character__havoc 
   (x : wide_character__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "wide_character", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_character__rep
 use        Standard__wide_character
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__wide_character.wide_character, 
 predicate in_range = Standard__wide_character.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "wide_wide_character", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_wide_character
 use import "_gnatprove_standard".Main
 use import "int".Int

 type wide_wide_character 
 
 function first 
   : int =
  0
 
 function last 
   : int =
  2147483647
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = wide_wide_character, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type wide_wide_character__ref =
  { mutable wide_wide_character__content "model_trace:" "name:" : wide_wide_character }
 
 function wide_wide_character__ref___projection 
   (a : wide_wide_character__ref) : wide_wide_character =
  a.wide_wide_character__content
 
 meta "model_projection" function wide_wide_character__ref___projection
 
 meta "inline : no" function wide_wide_character__ref___projection
 
 val wide_wide_character__havoc 
   (x : wide_wide_character__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "wide_wide_character", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_wide_character__rep
 use        Standard__wide_wide_character
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__wide_wide_character.wide_wide_character, 
 predicate in_range = Standard__wide_wide_character.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing the array theory associated to type "string", created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Standard__character
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__character
 use        Standard__character__rep

 function index_I1_one 
   : int =
  1
 
 type component_type =
  Standard__character.character
 
 clone export "_gnatprove_standard".Array__1 with
 type I1.t = int, 
 predicate I1.le = Int.(<=), 
 predicate I1.lt = Int.(<), 
 predicate I1.gt = Int.(>), 
 function I1.add = Int.(+), 
 function I1.sub = Int.(-), 
 function I1.one = index_I1_one, 
 type component_type = component_type
 
 function bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool =
  ( (if ((a__first <= a__last)) then (
   ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
   (b__first > b__last))) /\ (forall temp___idx_91   : int.
   (if (( (a__first <= temp___idx_91) /\ (temp___idx_91 <= a__last) )) then (
    ((Standard__character__rep.to_rep (get a temp___idx_91)) = (Standard__character__rep.to_rep (get b ((b__first - a__first) + temp___idx_91))))) else true)) )
 
 axiom bool_eq_rev :
  (forall a   b   : map.
  (forall a__first   a__last   b__first   b__last   : int.
   ( ((bool_eq b b__first b__last a a__first a__last) = True) -> ( (if ((a__first <= a__last)) then (
    ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
    (b__first > b__last))) /\ (forall temp___idx_91   : int.
    (if (( (a__first <= temp___idx_91) /\ (temp___idx_91 <= a__last) )) then (
     ((Standard__character__rep.to_rep (get a temp___idx_91)) = (Standard__character__rep.to_rep (get b ((b__first - a__first) + temp___idx_91))))) else true)) ) )))

end

(* Module for axiomatizing concatenation for the array theory associated to type "string", created in Why.Gen.Arrays.Declare_Concatenation_Symbols *)
module Array__Int__Standard__character__Concat
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Array__Int__Standard__character

 function index_Index_one 
   : int =
  1
 
 clone export "_gnatprove_standard".Array__1__Concat with
 type component_type = Array__Int__Standard__character.component_type, 
 type map = Array__Int__Standard__character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__character.get

end

(* Module for axiomatizing comparison for the array theory associated to type "string", created in Why.Gen.Arrays.Declare_Comparison_Symbols *)
module Array__Int__Standard__character_Comp
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__character__rep
 use        Array__Int__Standard__character

 function index_Index_one 
   : int =
  1
 
 clone export "ada__model".Array_Int_Rep_Comparison_Axiom with
 type component_type = Array__Int__Standard__character.component_type, 
 function to_rep = Standard__character__rep.to_rep, 
 type map = Array__Int__Standard__character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__character.get, 
 function bool_eq = Array__Int__Standard__character.bool_eq

end

(* Module for axiomatizing type "string", created in Gnat2Why.Types.Translate_Type *)
module Standard__string
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Main
 use        Standard__integer
 use        Standard__positive
 use        Standard__character
 use        Array__Int__Standard__character
 use        Standard__integer__rep

 type component_type =
  Standard__character.character
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Standard__positive.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type string =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline : no" function to_array
 
 meta "model_projection" function first
 
 meta "inline : no" function first
 
 meta "model_projection" function last
 
 meta "inline : no" function last
 
 function to_string 
   (x : Main.__image) : string
 
 function from_string 
   (x : string) : Main.__image
 
 type string__ref =
  { mutable string__content "model_trace:" "name:" : string }
 
 function string__ref___projection 
   (a : string__ref) : string =
  a.string__content
 
 meta "model_projection" function string__ref___projection
 
 meta "inline : no" function string__ref___projection
 
 val string__havoc 
   (x : string__ref) : unit
  writes {x}

end

(* Module for axiomatizing the array theory associated to type "wide_string", created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Standard__wide_character
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__wide_character
 use        Standard__wide_character__rep

 function index_I1_one 
   : int =
  1
 
 type component_type =
  Standard__wide_character.wide_character
 
 clone export "_gnatprove_standard".Array__1 with
 type I1.t = int, 
 predicate I1.le = Int.(<=), 
 predicate I1.lt = Int.(<), 
 predicate I1.gt = Int.(>), 
 function I1.add = Int.(+), 
 function I1.sub = Int.(-), 
 function I1.one = index_I1_one, 
 type component_type = component_type
 
 function bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool =
  ( (if ((a__first <= a__last)) then (
   ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
   (b__first > b__last))) /\ (forall temp___idx_98   : int.
   (if (( (a__first <= temp___idx_98) /\ (temp___idx_98 <= a__last) )) then (
    ((Standard__wide_character__rep.to_rep (get a temp___idx_98)) = (Standard__wide_character__rep.to_rep (get b ((b__first - a__first) + temp___idx_98))))) else true)) )
 
 axiom bool_eq_rev :
  (forall a   b   : map.
  (forall a__first   a__last   b__first   b__last   : int.
   ( ((bool_eq b b__first b__last a a__first a__last) = True) -> ( (if ((a__first <= a__last)) then (
    ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
    (b__first > b__last))) /\ (forall temp___idx_98   : int.
    (if (( (a__first <= temp___idx_98) /\ (temp___idx_98 <= a__last) )) then (
     ((Standard__wide_character__rep.to_rep (get a temp___idx_98)) = (Standard__wide_character__rep.to_rep (get b ((b__first - a__first) + temp___idx_98))))) else true)) ) )))

end

(* Module for axiomatizing concatenation for the array theory associated to type "wide_string", created in Why.Gen.Arrays.Declare_Concatenation_Symbols *)
module Array__Int__Standard__wide_character__Concat
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Array__Int__Standard__wide_character

 function index_Index_one 
   : int =
  1
 
 clone export "_gnatprove_standard".Array__1__Concat with
 type component_type = Array__Int__Standard__wide_character.component_type, 
 type map = Array__Int__Standard__wide_character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__wide_character.get

end

(* Module for axiomatizing comparison for the array theory associated to type "wide_string", created in Why.Gen.Arrays.Declare_Comparison_Symbols *)
module Array__Int__Standard__wide_character_Comp
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__wide_character__rep
 use        Array__Int__Standard__wide_character

 function index_Index_one 
   : int =
  1
 
 clone export "ada__model".Array_Int_Rep_Comparison_Axiom with
 type component_type = Array__Int__Standard__wide_character.component_type, 
 function to_rep = Standard__wide_character__rep.to_rep, 
 type map = Array__Int__Standard__wide_character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__wide_character.get, 
 function bool_eq = Array__Int__Standard__wide_character.bool_eq

end

(* Module for axiomatizing type "wide_string", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_string
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__positive
 use        Standard__wide_character
 use        Standard__integer__rep
 use        Array__Int__Standard__wide_character

 type component_type =
  Standard__wide_character.wide_character
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with
 type map = Array__Int__Standard__wide_character.map, 
 function array_bool_eq = Array__Int__Standard__wide_character.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Standard__positive.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type wide_string =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline : no" function to_array
 
 meta "model_projection" function first
 
 meta "inline : no" function first
 
 meta "model_projection" function last
 
 meta "inline : no" function last
 
 type wide_string__ref =
  { mutable wide_string__content "model_trace:" "name:" : wide_string }
 
 function wide_string__ref___projection 
   (a : wide_string__ref) : wide_string =
  a.wide_string__content
 
 meta "model_projection" function wide_string__ref___projection
 
 meta "inline : no" function wide_string__ref___projection
 
 val wide_string__havoc 
   (x : wide_string__ref) : unit
  writes {x}

end

(* Module for axiomatizing the array theory associated to type "wide_wide_string", created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Standard__wide_wide_character
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__wide_wide_character
 use        Standard__wide_wide_character__rep

 function index_I1_one 
   : int =
  1
 
 type component_type =
  Standard__wide_wide_character.wide_wide_character
 
 clone export "_gnatprove_standard".Array__1 with
 type I1.t = int, 
 predicate I1.le = Int.(<=), 
 predicate I1.lt = Int.(<), 
 predicate I1.gt = Int.(>), 
 function I1.add = Int.(+), 
 function I1.sub = Int.(-), 
 function I1.one = index_I1_one, 
 type component_type = component_type
 
 function bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool =
  ( (if ((a__first <= a__last)) then (
   ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
   (b__first > b__last))) /\ (forall temp___idx_105   : int.
   (if (( (a__first <= temp___idx_105) /\ (temp___idx_105 <= a__last) )) then (
    ((Standard__wide_wide_character__rep.to_rep (get a temp___idx_105)) = (Standard__wide_wide_character__rep.to_rep (get b ((b__first - a__first) + temp___idx_105))))) else true)) )
 
 axiom bool_eq_rev :
  (forall a   b   : map.
  (forall a__first   a__last   b__first   b__last   : int.
   ( ((bool_eq b b__first b__last a a__first a__last) = True) -> ( (if ((a__first <= a__last)) then (
    ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
    (b__first > b__last))) /\ (forall temp___idx_105   : int.
    (if (( (a__first <= temp___idx_105) /\ (temp___idx_105 <= a__last) )) then (
     ((Standard__wide_wide_character__rep.to_rep (get a temp___idx_105)) = (Standard__wide_wide_character__rep.to_rep (get b ((b__first - a__first) + temp___idx_105))))) else true)) ) )))

end

(* Module for axiomatizing concatenation for the array theory associated to type "wide_wide_string", created in Why.Gen.Arrays.Declare_Concatenation_Symbols *)
module Array__Int__Standard__wide_wide_character__Concat
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Array__Int__Standard__wide_wide_character

 function index_Index_one 
   : int =
  1
 
 clone export "_gnatprove_standard".Array__1__Concat with
 type component_type = Array__Int__Standard__wide_wide_character.component_type, 
 type map = Array__Int__Standard__wide_wide_character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__wide_wide_character.get

end

(* Module for axiomatizing comparison for the array theory associated to type "wide_wide_string", created in Why.Gen.Arrays.Declare_Comparison_Symbols *)
module Array__Int__Standard__wide_wide_character_Comp
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__wide_wide_character__rep
 use        Array__Int__Standard__wide_wide_character

 function index_Index_one 
   : int =
  1
 
 clone export "ada__model".Array_Int_Rep_Comparison_Axiom with
 type component_type = Array__Int__Standard__wide_wide_character.component_type, 
 function to_rep = Standard__wide_wide_character__rep.to_rep, 
 type map = Array__Int__Standard__wide_wide_character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__wide_wide_character.get, 
 function bool_eq = Array__Int__Standard__wide_wide_character.bool_eq

end

(* Module for axiomatizing type "wide_wide_string", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_wide_string
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__positive
 use        Standard__wide_wide_character
 use        Standard__integer__rep
 use        Array__Int__Standard__wide_wide_character

 type component_type =
  Standard__wide_wide_character.wide_wide_character
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with
 type map = Array__Int__Standard__wide_wide_character.map, 
 function array_bool_eq = Array__Int__Standard__wide_wide_character.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Standard__positive.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type wide_wide_string =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline : no" function to_array
 
 meta "model_projection" function first
 
 meta "inline : no" function first
 
 meta "model_projection" function last
 
 meta "inline : no" function last
 
 type wide_wide_string__ref =
  { mutable wide_wide_string__content "model_trace:" "name:" : wide_wide_string }
 
 function wide_wide_string__ref___projection 
   (a : wide_wide_string__ref) : wide_wide_string =
  a.wide_wide_string__content
 
 meta "model_projection" function wide_wide_string__ref___projection
 
 meta "inline : no" function wide_wide_string__ref___projection
 
 val wide_wide_string__havoc 
   (x : wide_wide_string__ref) : unit
  writes {x}

end

(* Module for fixed-point operation for type at system.ads:1, created in Why.Gen.Scalars.Create_Fixed_Point_Theory_If_Needed *)
module Fixed_Point__1_1000000000
 use import "_gnatprove_standard".Main
 use import "int".Int

 function num_small 
   : int =
  1
 
 function den_small 
   : int =
  1000000000
 
 clone export "ada__model".Fixed_Point_Rep with
 function num_small = num_small, 
 function den_small = den_small

end

(* Module for axiomatizing type "duration", created in Gnat2Why.Types.Translate_Type *)
module Standard__duration
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Main

 type duration 
 
 function num_small 
   : Main.__fixed =
  1
 
 function den_small 
   : Main.__fixed =
  1000000000
 
 function first 
   : Main.__fixed =
  ( -9223372036854775808 )
 
 function last 
   : Main.__fixed =
  9223372036854775807
 
 predicate in_range 
   (x : Main.__fixed)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Fixed_Point with
 type t = duration, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type duration__ref =
  { mutable duration__content "model_trace:" "name:" : duration }
 
 function duration__ref___projection 
   (a : duration__ref) : duration =
  a.duration__content
 
 meta "model_projection" function duration__ref___projection
 
 meta "inline : no" function duration__ref___projection
 
 val duration__havoc 
   (x : duration__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "integer_8", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_8
 use import "_gnatprove_standard".Main
 use import "int".Int

 type integer_8 =
  < range -128 127 >
 
 function first 
   : int =
  ( -128 )
 
 function last 
   : int =
  127
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = integer_8, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer_8__ref =
  { mutable integer_8__content "model_trace:" "name:" : integer_8 }
 
 function integer_8__ref___projection 
   (a : integer_8__ref) : integer_8 =
  a.integer_8__content
 
 meta "model_projection" function integer_8__ref___projection
 
 meta "inline : no" function integer_8__ref___projection
 
 val integer_8__havoc 
   (x : integer_8__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer_8", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_8__rep
 use        Standard__integer_8
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__integer_8.integer_8) : int =
  (Standard__integer_8.integer_8'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__integer_8.integer_8, 
 predicate in_range = Standard__integer_8.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "integer_16", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_16
 use import "_gnatprove_standard".Main
 use import "int".Int

 type integer_16 =
  < range -32768 32767 >
 
 function first 
   : int =
  ( -32768 )
 
 function last 
   : int =
  32767
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = integer_16, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer_16__ref =
  { mutable integer_16__content "model_trace:" "name:" : integer_16 }
 
 function integer_16__ref___projection 
   (a : integer_16__ref) : integer_16 =
  a.integer_16__content
 
 meta "model_projection" function integer_16__ref___projection
 
 meta "inline : no" function integer_16__ref___projection
 
 val integer_16__havoc 
   (x : integer_16__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer_16", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_16__rep
 use        Standard__integer_16
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__integer_16.integer_16) : int =
  (Standard__integer_16.integer_16'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__integer_16.integer_16, 
 predicate in_range = Standard__integer_16.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "integer_32", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_32
 use import "_gnatprove_standard".Main
 use import "int".Int

 type integer_32 =
  < range -2147483648 2147483647 >
 
 function first 
   : int =
  ( -2147483648 )
 
 function last 
   : int =
  2147483647
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = integer_32, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer_32__ref =
  { mutable integer_32__content "model_trace:" "name:" : integer_32 }
 
 function integer_32__ref___projection 
   (a : integer_32__ref) : integer_32 =
  a.integer_32__content
 
 meta "model_projection" function integer_32__ref___projection
 
 meta "inline : no" function integer_32__ref___projection
 
 val integer_32__havoc 
   (x : integer_32__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer_32", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_32__rep
 use        Standard__integer_32
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__integer_32.integer_32) : int =
  (Standard__integer_32.integer_32'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__integer_32.integer_32, 
 predicate in_range = Standard__integer_32.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "integer_64", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_64
 use import "_gnatprove_standard".Main
 use import "int".Int

 type integer_64 =
  < range -9223372036854775808 9223372036854775807 >
 
 function first 
   : int =
  ( -9223372036854775808 )
 
 function last 
   : int =
  9223372036854775807
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = integer_64, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer_64__ref =
  { mutable integer_64__content "model_trace:" "name:" : integer_64 }
 
 function integer_64__ref___projection 
   (a : integer_64__ref) : integer_64 =
  a.integer_64__content
 
 meta "model_projection" function integer_64__ref___projection
 
 meta "inline : no" function integer_64__ref___projection
 
 val integer_64__havoc 
   (x : integer_64__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer_64", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_64__rep
 use        Standard__integer_64
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__integer_64.integer_64) : int =
  (Standard__integer_64.integer_64'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__integer_64.integer_64, 
 predicate in_range = Standard__integer_64.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "universal_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__universal_integer
 use import "_gnatprove_standard".Main
 use import "int".Int

 type universal_integer =
  < range -9223372036854775808 9223372036854775807 >
 
 function first 
   : int =
  ( -9223372036854775808 )
 
 function last 
   : int =
  9223372036854775807
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = universal_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type universal_integer__ref =
  { mutable universal_integer__content "model_trace:" "name:" : universal_integer }
 
 function universal_integer__ref___projection 
   (a : universal_integer__ref) : universal_integer =
  a.universal_integer__content
 
 meta "model_projection" function universal_integer__ref___projection
 
 meta "inline : no" function universal_integer__ref___projection
 
 val universal_integer__havoc 
   (x : universal_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "universal_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__universal_integer__rep
 use        Standard__universal_integer
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__universal_integer.universal_integer) : int =
  (Standard__universal_integer.universal_integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__universal_integer.universal_integer, 
 predicate in_range = Standard__universal_integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "submarineoperation" defined at submarine.ads:8, created in Gnat2Why.Types.Translate_Type *)
module Submarine__submarineoperation
 use import "_gnatprove_standard".Main
 use import "int".Int

 type submarineoperation 
 
 function first 
   : int =
  0
 
 function last 
   : int =
  1
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = submarineoperation, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type submarineoperation__ref =
  { mutable submarineoperation__content "model_trace:" "name:" : submarineoperation }
 
 function submarineoperation__ref___projection 
   (a : submarineoperation__ref) : submarineoperation =
  a.submarineoperation__content
 
 meta "model_projection" function submarineoperation__ref___projection
 
 meta "inline : no" function submarineoperation__ref___projection
 
 val submarineoperation__havoc 
   (x : submarineoperation__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "submarineoperation" defined at submarine.ads:8, created in Gnat2Why.Types.Translate_Type *)
module Submarine__submarineoperation__rep
 use        Submarine__submarineoperation
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Int with
 type t = Submarine__submarineoperation.submarineoperation, 
 predicate in_range = Submarine__submarineoperation.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "submarinestatus" defined at submarine.ads:9, created in Gnat2Why.Types.Translate_Type *)
module Submarine__submarinestatus
 use import "_gnatprove_standard".Main
 use import "int".Int

 type submarinestatus 
 
 function first 
   : int =
  0
 
 function last 
   : int =
  1
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = submarinestatus, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type submarinestatus__ref =
  { mutable submarinestatus__content "model_trace:" "name:" : submarinestatus }
 
 function submarinestatus__ref___projection 
   (a : submarinestatus__ref) : submarinestatus =
  a.submarinestatus__content
 
 meta "model_projection" function submarinestatus__ref___projection
 
 meta "inline : no" function submarinestatus__ref___projection
 
 val submarinestatus__havoc 
   (x : submarinestatus__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "submarinestatus" defined at submarine.ads:9, created in Gnat2Why.Types.Translate_Type *)
module Submarine__submarinestatus__rep
 use        Submarine__submarinestatus
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Int with
 type t = Submarine__submarinestatus.submarinestatus, 
 predicate in_range = Submarine__submarinestatus.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing the record theory associated to type "submarine" defined at submarine.ads:14, created in Why.Gen.Records.Create_Rep_Record_Theory_If_Needed *)
module Submarine__submarine__rep
 use import "_gnatprove_standard".Main
 use        Submarine__submarineoperation
 use        Submarine__submarineoperation__rep
 use        Submarine__submarinestatus
 use        Submarine__submarinestatus__rep

 type __split_fields =
  { rec__submarine__submarine__operating "model_trace:.2831" "name:operating" : Submarine__submarineoperation.submarineoperation; rec__submarine__submarine__statusinwater "model_trace:.2841" "name:statusInWater" : Submarine__submarinestatus.submarinestatus }
 
 function __split_fields_operating__projection "model_trace:.2831" "name:operating" 
   (a : __split_fields) : Submarine__submarineoperation.submarineoperation =
  a.rec__submarine__submarine__operating
 
 meta "model_projection" function __split_fields_operating__projection
 
 meta "inline : no" function __split_fields_operating__projection
 
 function __split_fields_statusInWater__projection "model_trace:.2841" "name:statusInWater" 
   (a : __split_fields) : Submarine__submarinestatus.submarinestatus =
  a.rec__submarine__submarine__statusinwater
 
 meta "model_projection" function __split_fields_statusInWater__projection
 
 meta "inline : no" function __split_fields_statusInWater__projection
 
 type __split_fields__ref =
  { mutable __split_fields__content "model_trace:" "name:" : __split_fields }
 
 function __split_fields__ref___projection 
   (a : __split_fields__ref) : __split_fields =
  a.__split_fields__content
 
 meta "model_projection" function __split_fields__ref___projection
 
 meta "inline : no" function __split_fields__ref___projection
 
 val __split_fields__havoc 
   (x : __split_fields__ref) : unit
  writes {x}
 
 type __rep =
  { __split_fields "model_trace:" "name:" : __split_fields }
 
 function __rep___projection 
   (a : __rep) : __split_fields =
  a.__split_fields
 
 meta "model_projection" function __rep___projection
 
 meta "inline : no" function __rep___projection
 
 function to_base 
   (a : __rep) : __rep =
  a
 
 function of_base 
   (a : __rep) : __rep =
  a
 
 predicate submarine__submarine__operating__pred 
   (a : __rep)  =
  true
 
 val rec__submarine__submarine__operating_ 
   (a : __rep) : Submarine__submarineoperation.submarineoperation
  requires {  (submarine__submarine__operating__pred a) }
  ensures {  (result = a.__split_fields.rec__submarine__submarine__operating) }
 
 predicate submarine__submarine__statusinwater__pred 
   (a : __rep)  =
  true
 
 val rec__submarine__submarine__statusinwater_ 
   (a : __rep) : Submarine__submarinestatus.submarinestatus
  requires {  (submarine__submarine__statusinwater__pred a) }
  ensures {  (result = a.__split_fields.rec__submarine__submarine__statusinwater) }
 
 function bool_eq 
   (a : __rep) (b : __rep) : bool =
  (if (( ((Submarine__submarineoperation__rep.to_rep a.__split_fields.rec__submarine__submarine__operating) = (Submarine__submarineoperation__rep.to_rep b.__split_fields.rec__submarine__submarine__operating)) /\ ((Submarine__submarinestatus__rep.to_rep a.__split_fields.rec__submarine__submarine__statusinwater) = (Submarine__submarinestatus__rep.to_rep b.__split_fields.rec__submarine__submarine__statusinwater)) )) then (
   True) else (
   False))

end

(* Module for axiomatizing type "submarine" defined at submarine.ads:14, created in Gnat2Why.Types.Translate_Type *)
module Submarine__submarine
 use export Submarine__submarine__rep
 use import "_gnatprove_standard".Main
 use import "int".Int

 type submarine =
  __rep
 
 function value__size 
   : int
 
 function object__size 
   (a : submarine) : int
 
 function value__alignment 
   : int
 
 function object__alignment 
   (a : submarine) : int
 
 axiom value__size_axiom :
  ((value__size ) >= 0)
 
 axiom object__size_axiom :
  (forall a   : submarine.
   ((object__size a) >= 0))
 
 axiom value__alignment_axiom :
  ((value__alignment ) >= 0)
 
 axiom object__alignment_axiom :
  (forall a   : submarine.
   ((object__alignment a) >= 0))
 
 function submarine__submarine__operating__first__bit 
   : int
 
 function submarine__submarine__operating__last__bit 
   : int
 
 function submarine__submarine__operating__position 
   : int
 
 axiom submarine__submarine__operating__first__bit_axiom :
  ((submarine__submarine__operating__first__bit ) >= 0)
 
 axiom submarine__submarine__operating__last__bit_axiom :
  ((submarine__submarine__operating__last__bit ) > (submarine__submarine__operating__first__bit ))
 
 axiom submarine__submarine__operating__position_axiom :
  ((submarine__submarine__operating__position ) >= 0)
 
 function submarine__submarine__statusinwater__first__bit 
   : int
 
 function submarine__submarine__statusinwater__last__bit 
   : int
 
 function submarine__submarine__statusinwater__position 
   : int
 
 axiom submarine__submarine__statusinwater__first__bit_axiom :
  ((submarine__submarine__statusinwater__first__bit ) >= 0)
 
 axiom submarine__submarine__statusinwater__last__bit_axiom :
  ((submarine__submarine__statusinwater__last__bit ) > (submarine__submarine__statusinwater__first__bit ))
 
 axiom submarine__submarine__statusinwater__position_axiom :
  ((submarine__submarine__statusinwater__position ) >= 0)
 
 function user_eq 
   (a : submarine) (b : submarine) : bool
 
 function dummy 
   : submarine
 
 type submarine__ref =
  { mutable submarine__content "model_trace:" "name:" : submarine }
 
 function submarine__ref___projection 
   (a : submarine__ref) : submarine =
  a.submarine__content
 
 meta "model_projection" function submarine__ref___projection
 
 meta "inline : no" function submarine__ref___projection
 
 val submarine__havoc 
   (x : submarine__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "lockedunlocked" defined at submarine.ads:28, created in Gnat2Why.Types.Translate_Type *)
module Submarine__lockedunlocked
 use import "_gnatprove_standard".Main
 use import "int".Int

 type lockedunlocked 
 
 function first 
   : int =
  0
 
 function last 
   : int =
  1
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = lockedunlocked, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type lockedunlocked__ref =
  { mutable lockedunlocked__content "model_trace:" "name:" : lockedunlocked }
 
 function lockedunlocked__ref___projection 
   (a : lockedunlocked__ref) : lockedunlocked =
  a.lockedunlocked__content
 
 meta "model_projection" function lockedunlocked__ref___projection
 
 meta "inline : no" function lockedunlocked__ref___projection
 
 val lockedunlocked__havoc 
   (x : lockedunlocked__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "lockedunlocked" defined at submarine.ads:28, created in Gnat2Why.Types.Translate_Type *)
module Submarine__lockedunlocked__rep
 use        Submarine__lockedunlocked
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Int with
 type t = Submarine__lockedunlocked.lockedunlocked, 
 predicate in_range = Submarine__lockedunlocked.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "openclosed" defined at submarine.ads:32, created in Gnat2Why.Types.Translate_Type *)
module Submarine__openclosed
 use import "_gnatprove_standard".Main
 use import "int".Int

 type openclosed 
 
 function first 
   : int =
  0
 
 function last 
   : int =
  1
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = openclosed, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type openclosed__ref =
  { mutable openclosed__content "model_trace:" "name:" : openclosed }
 
 function openclosed__ref___projection 
   (a : openclosed__ref) : openclosed =
  a.openclosed__content
 
 meta "model_projection" function openclosed__ref___projection
 
 meta "inline : no" function openclosed__ref___projection
 
 val openclosed__havoc 
   (x : openclosed__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "openclosed" defined at submarine.ads:32, created in Gnat2Why.Types.Translate_Type *)
module Submarine__openclosed__rep
 use        Submarine__openclosed
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Int with
 type t = Submarine__openclosed.openclosed, 
 predicate in_range = Submarine__openclosed.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing the record theory associated to type "door" defined at submarine.ads:35, created in Why.Gen.Records.Create_Rep_Record_Theory_If_Needed *)
module Submarine__door__rep
 use import "_gnatprove_standard".Main
 use        Submarine__lockedunlocked
 use        Submarine__lockedunlocked__rep
 use        Submarine__openclosed
 use        Submarine__openclosed__rep

 type __split_fields =
  { rec__submarine__door__lock "model_trace:.2927" "name:lock" : Submarine__lockedunlocked.lockedunlocked; rec__submarine__door__status "model_trace:.2937" "name:status" : Submarine__openclosed.openclosed }
 
 function __split_fields_lock__projection "model_trace:.2927" "name:lock" 
   (a : __split_fields) : Submarine__lockedunlocked.lockedunlocked =
  a.rec__submarine__door__lock
 
 meta "model_projection" function __split_fields_lock__projection
 
 meta "inline : no" function __split_fields_lock__projection
 
 function __split_fields_status__projection "model_trace:.2937" "name:status" 
   (a : __split_fields) : Submarine__openclosed.openclosed =
  a.rec__submarine__door__status
 
 meta "model_projection" function __split_fields_status__projection
 
 meta "inline : no" function __split_fields_status__projection
 
 type __split_fields__ref =
  { mutable __split_fields__content "model_trace:" "name:" : __split_fields }
 
 function __split_fields__ref___2__projection 
   (a : __split_fields__ref) : __split_fields =
  a.__split_fields__content
 
 meta "model_projection" function __split_fields__ref___2__projection
 
 meta "inline : no" function __split_fields__ref___2__projection
 
 val __split_fields__havoc 
   (x : __split_fields__ref) : unit
  writes {x}
 
 type __rep =
  { __split_fields "model_trace:" "name:" : __split_fields }
 
 function __rep___2__projection 
   (a : __rep) : __split_fields =
  a.__split_fields
 
 meta "model_projection" function __rep___2__projection
 
 meta "inline : no" function __rep___2__projection
 
 function to_base 
   (a : __rep) : __rep =
  a
 
 function of_base 
   (a : __rep) : __rep =
  a
 
 predicate submarine__door__lock__pred 
   (a : __rep)  =
  true
 
 val rec__submarine__door__lock_ 
   (a : __rep) : Submarine__lockedunlocked.lockedunlocked
  requires {  (submarine__door__lock__pred a) }
  ensures {  (result = a.__split_fields.rec__submarine__door__lock) }
 
 predicate submarine__door__status__pred 
   (a : __rep)  =
  true
 
 val rec__submarine__door__status_ 
   (a : __rep) : Submarine__openclosed.openclosed
  requires {  (submarine__door__status__pred a) }
  ensures {  (result = a.__split_fields.rec__submarine__door__status) }
 
 function bool_eq 
   (a : __rep) (b : __rep) : bool =
  (if (( ((Submarine__lockedunlocked__rep.to_rep a.__split_fields.rec__submarine__door__lock) = (Submarine__lockedunlocked__rep.to_rep b.__split_fields.rec__submarine__door__lock)) /\ ((Submarine__openclosed__rep.to_rep a.__split_fields.rec__submarine__door__status) = (Submarine__openclosed__rep.to_rep b.__split_fields.rec__submarine__door__status)) )) then (
   True) else (
   False))

end

(* Module for axiomatizing type "door" defined at submarine.ads:35, created in Gnat2Why.Types.Translate_Type *)
module Submarine__door
 use export Submarine__door__rep
 use import "_gnatprove_standard".Main
 use import "int".Int

 type door =
  __rep
 
 function value__size 
   : int
 
 function object__size 
   (a : door) : int
 
 function value__alignment 
   : int
 
 function object__alignment 
   (a : door) : int
 
 axiom value__size_axiom :
  ((value__size ) >= 0)
 
 axiom object__size_axiom :
  (forall a   : door.
   ((object__size a) >= 0))
 
 axiom value__alignment_axiom :
  ((value__alignment ) >= 0)
 
 axiom object__alignment_axiom :
  (forall a   : door.
   ((object__alignment a) >= 0))
 
 function submarine__door__lock__first__bit 
   : int
 
 function submarine__door__lock__last__bit 
   : int
 
 function submarine__door__lock__position 
   : int
 
 axiom submarine__door__lock__first__bit_axiom :
  ((submarine__door__lock__first__bit ) >= 0)
 
 axiom submarine__door__lock__last__bit_axiom :
  ((submarine__door__lock__last__bit ) > (submarine__door__lock__first__bit ))
 
 axiom submarine__door__lock__position_axiom :
  ((submarine__door__lock__position ) >= 0)
 
 function submarine__door__status__first__bit 
   : int
 
 function submarine__door__status__last__bit 
   : int
 
 function submarine__door__status__position 
   : int
 
 axiom submarine__door__status__first__bit_axiom :
  ((submarine__door__status__first__bit ) >= 0)
 
 axiom submarine__door__status__last__bit_axiom :
  ((submarine__door__status__last__bit ) > (submarine__door__status__first__bit ))
 
 axiom submarine__door__status__position_axiom :
  ((submarine__door__status__position ) >= 0)
 
 function user_eq 
   (a : door) (b : door) : bool
 
 function dummy 
   : door
 
 type door__ref =
  { mutable door__content "model_trace:" "name:" : door }
 
 function door__ref___projection 
   (a : door__ref) : door =
  a.door__content
 
 meta "model_projection" function door__ref___projection
 
 meta "inline : no" function door__ref___projection
 
 val door__havoc 
   (x : door__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "TsubmarineoxygenB" defined at submarine.ads:82, created in Gnat2Why.Types.Translate_Type *)
module Submarine__TsubmarineoxygenB
 use import "_gnatprove_standard".Main
 use import "int".Int

 type tsubmarineoxygenB =
  < range -128 127 >
 
 function first 
   : int =
  ( -128 )
 
 function last 
   : int =
  127
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = tsubmarineoxygenB, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type tsubmarineoxygenB__ref =
  { mutable tsubmarineoxygenB__content "model_trace:" "name:" : tsubmarineoxygenB }
 
 function tsubmarineoxygenB__ref___projection 
   (a : tsubmarineoxygenB__ref) : tsubmarineoxygenB =
  a.tsubmarineoxygenB__content
 
 meta "model_projection" function tsubmarineoxygenB__ref___projection
 
 meta "inline : no" function tsubmarineoxygenB__ref___projection
 
 val tsubmarineoxygenB__havoc 
   (x : tsubmarineoxygenB__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "TsubmarineoxygenB" defined at submarine.ads:82, created in Gnat2Why.Types.Translate_Type *)
module Submarine__TsubmarineoxygenB__rep
 use        Submarine__TsubmarineoxygenB
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Submarine__TsubmarineoxygenB.tsubmarineoxygenB) : int =
  (Submarine__TsubmarineoxygenB.tsubmarineoxygenB'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Submarine__TsubmarineoxygenB.tsubmarineoxygenB, 
 predicate in_range = Submarine__TsubmarineoxygenB.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "submarineoxygen" defined at submarine.ads:82, created in Gnat2Why.Types.Translate_Type *)
module Submarine__submarineoxygen
 use import "_gnatprove_standard".Main
 use import "int".Int

 type submarineoxygen =
  < range 0 100 >
 
 function first 
   : int =
  0
 
 function last 
   : int =
  100
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = submarineoxygen, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type submarineoxygen__ref =
  { mutable submarineoxygen__content "model_trace:" "name:" : submarineoxygen }
 
 function submarineoxygen__ref___projection 
   (a : submarineoxygen__ref) : submarineoxygen =
  a.submarineoxygen__content
 
 meta "model_projection" function submarineoxygen__ref___projection
 
 meta "inline : no" function submarineoxygen__ref___projection
 
 val submarineoxygen__havoc 
   (x : submarineoxygen__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "submarineoxygen" defined at submarine.ads:82, created in Gnat2Why.Types.Translate_Type *)
module Submarine__submarineoxygen__rep
 use        Submarine__submarineoxygen
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Submarine__submarineoxygen.submarineoxygen) : int =
  (Submarine__submarineoxygen.submarineoxygen'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Submarine__submarineoxygen.submarineoxygen, 
 predicate in_range = Submarine__submarineoxygen.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "TsubmarineheatB" defined at submarine.ads:89, created in Gnat2Why.Types.Translate_Type *)
module Submarine__TsubmarineheatB
 use import "_gnatprove_standard".Main
 use import "int".Int

 type tsubmarineheatB =
  < range -128 127 >
 
 function first 
   : int =
  ( -128 )
 
 function last 
   : int =
  127
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = tsubmarineheatB, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type tsubmarineheatB__ref =
  { mutable tsubmarineheatB__content "model_trace:" "name:" : tsubmarineheatB }
 
 function tsubmarineheatB__ref___projection 
   (a : tsubmarineheatB__ref) : tsubmarineheatB =
  a.tsubmarineheatB__content
 
 meta "model_projection" function tsubmarineheatB__ref___projection
 
 meta "inline : no" function tsubmarineheatB__ref___projection
 
 val tsubmarineheatB__havoc 
   (x : tsubmarineheatB__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "TsubmarineheatB" defined at submarine.ads:89, created in Gnat2Why.Types.Translate_Type *)
module Submarine__TsubmarineheatB__rep
 use        Submarine__TsubmarineheatB
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Submarine__TsubmarineheatB.tsubmarineheatB) : int =
  (Submarine__TsubmarineheatB.tsubmarineheatB'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Submarine__TsubmarineheatB.tsubmarineheatB, 
 predicate in_range = Submarine__TsubmarineheatB.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "submarineheat" defined at submarine.ads:89, created in Gnat2Why.Types.Translate_Type *)
module Submarine__submarineheat
 use import "_gnatprove_standard".Main
 use import "int".Int

 type submarineheat =
  < range 0 100 >
 
 function first 
   : int =
  0
 
 function last 
   : int =
  100
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = submarineheat, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type submarineheat__ref =
  { mutable submarineheat__content "model_trace:" "name:" : submarineheat }
 
 function submarineheat__ref___projection 
   (a : submarineheat__ref) : submarineheat =
  a.submarineheat__content
 
 meta "model_projection" function submarineheat__ref___projection
 
 meta "inline : no" function submarineheat__ref___projection
 
 val submarineheat__havoc 
   (x : submarineheat__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "submarineheat" defined at submarine.ads:89, created in Gnat2Why.Types.Translate_Type *)
module Submarine__submarineheat__rep
 use        Submarine__submarineheat
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Submarine__submarineheat.submarineheat) : int =
  (Submarine__submarineheat.submarineheat'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Submarine__submarineheat.submarineheat, 
 predicate in_range = Submarine__submarineheat.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "TsubmarinedepthB" defined at submarine.ads:93, created in Gnat2Why.Types.Translate_Type *)
module Submarine__TsubmarinedepthB
 use import "_gnatprove_standard".Main
 use import "int".Int

 type tsubmarinedepthB =
  < range -128 127 >
 
 function first 
   : int =
  ( -128 )
 
 function last 
   : int =
  127
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = tsubmarinedepthB, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type tsubmarinedepthB__ref =
  { mutable tsubmarinedepthB__content "model_trace:" "name:" : tsubmarinedepthB }
 
 function tsubmarinedepthB__ref___projection 
   (a : tsubmarinedepthB__ref) : tsubmarinedepthB =
  a.tsubmarinedepthB__content
 
 meta "model_projection" function tsubmarinedepthB__ref___projection
 
 meta "inline : no" function tsubmarinedepthB__ref___projection
 
 val tsubmarinedepthB__havoc 
   (x : tsubmarinedepthB__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "TsubmarinedepthB" defined at submarine.ads:93, created in Gnat2Why.Types.Translate_Type *)
module Submarine__TsubmarinedepthB__rep
 use        Submarine__TsubmarinedepthB
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Submarine__TsubmarinedepthB.tsubmarinedepthB) : int =
  (Submarine__TsubmarinedepthB.tsubmarinedepthB'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Submarine__TsubmarinedepthB.tsubmarinedepthB, 
 predicate in_range = Submarine__TsubmarinedepthB.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "submarinedepth" defined at submarine.ads:93, created in Gnat2Why.Types.Translate_Type *)
module Submarine__submarinedepth
 use import "_gnatprove_standard".Main
 use import "int".Int

 type submarinedepth =
  < range 0 100 >
 
 function first 
   : int =
  0
 
 function last 
   : int =
  100
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = submarinedepth, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type submarinedepth__ref =
  { mutable submarinedepth__content "model_trace:" "name:" : submarinedepth }
 
 function submarinedepth__ref___projection 
   (a : submarinedepth__ref) : submarinedepth =
  a.submarinedepth__content
 
 meta "model_projection" function submarinedepth__ref___projection
 
 meta "inline : no" function submarinedepth__ref___projection
 
 val submarinedepth__havoc 
   (x : submarinedepth__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "submarinedepth" defined at submarine.ads:93, created in Gnat2Why.Types.Translate_Type *)
module Submarine__submarinedepth__rep
 use        Submarine__submarinedepth
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Submarine__submarinedepth.submarinedepth) : int =
  (Submarine__submarinedepth.submarinedepth'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Submarine__submarinedepth.submarinedepth, 
 predicate in_range = Submarine__submarinedepth.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "box" defined at submarine.ads:136, created in Gnat2Why.Types.Translate_Type *)
module Submarine__box
 use import "_gnatprove_standard".Main
 use import "int".Int

 type box 
 
 function first 
   : int =
  0
 
 function last 
   : int =
  2
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = box, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type box__ref =
  { mutable box__content "model_trace:" "name:" : box }
 
 function box__ref___projection 
   (a : box__ref) : box =
  a.box__content
 
 meta "model_projection" function box__ref___projection
 
 meta "inline : no" function box__ref___projection
 
 val box__havoc 
   (x : box__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "box" defined at submarine.ads:136, created in Gnat2Why.Types.Translate_Type *)
module Submarine__box__rep
 use        Submarine__box
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Int with
 type t = Submarine__box.box, 
 predicate in_range = Submarine__box.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "Tph_indexB" defined at submarine.ads:137, created in Gnat2Why.Types.Translate_Type *)
module Submarine__Tph_indexB
 use import "_gnatprove_standard".Main
 use import "int".Int

 type tph_indexB =
  < range -128 127 >
 
 function first 
   : int =
  ( -128 )
 
 function last 
   : int =
  127
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = tph_indexB, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type tph_indexB__ref =
  { mutable tph_indexB__content "model_trace:" "name:" : tph_indexB }
 
 function tph_indexB__ref___projection 
   (a : tph_indexB__ref) : tph_indexB =
  a.tph_indexB__content
 
 meta "model_projection" function tph_indexB__ref___projection
 
 meta "inline : no" function tph_indexB__ref___projection
 
 val tph_indexB__havoc 
   (x : tph_indexB__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "Tph_indexB" defined at submarine.ads:137, created in Gnat2Why.Types.Translate_Type *)
module Submarine__Tph_indexB__rep
 use        Submarine__Tph_indexB
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Submarine__Tph_indexB.tph_indexB) : int =
  (Submarine__Tph_indexB.tph_indexB'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Submarine__Tph_indexB.tph_indexB, 
 predicate in_range = Submarine__Tph_indexB.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "ph_index" defined at submarine.ads:137, created in Gnat2Why.Types.Translate_Type *)
module Submarine__ph_index
 use import "_gnatprove_standard".Main
 use import "int".Int

 type ph_index =
  < range 0 1 >
 
 function first 
   : int =
  0
 
 function last 
   : int =
  1
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = ph_index, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type ph_index__ref =
  { mutable ph_index__content "model_trace:" "name:" : ph_index }
 
 function ph_index__ref___projection 
   (a : ph_index__ref) : ph_index =
  a.ph_index__content
 
 meta "model_projection" function ph_index__ref___projection
 
 meta "inline : no" function ph_index__ref___projection
 
 val ph_index__havoc 
   (x : ph_index__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "ph_index" defined at submarine.ads:137, created in Gnat2Why.Types.Translate_Type *)
module Submarine__ph_index__rep
 use        Submarine__ph_index
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Submarine__ph_index.ph_index) : int =
  (Submarine__ph_index.ph_index'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Submarine__ph_index.ph_index, 
 predicate in_range = Submarine__ph_index.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing the array theory associated to type "TtorpedosB" defined at submarine.ads:139, created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Submarine__box
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Submarine__box
 use        Submarine__box__rep

 function index_I1_one 
   : int =
  1
 
 type component_type =
  Submarine__box.box
 
 clone export "_gnatprove_standard".Array__1 with
 type I1.t = int, 
 predicate I1.le = Int.(<=), 
 predicate I1.lt = Int.(<), 
 predicate I1.gt = Int.(>), 
 function I1.add = Int.(+), 
 function I1.sub = Int.(-), 
 function I1.one = index_I1_one, 
 type component_type = component_type
 
 function bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool =
  ( (if ((a__first <= a__last)) then (
   ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
   (b__first > b__last))) /\ (forall temp___idx_154   : int.
   (if (( (a__first <= temp___idx_154) /\ (temp___idx_154 <= a__last) )) then (
    ((Submarine__box__rep.to_rep (get a temp___idx_154)) = (Submarine__box__rep.to_rep (get b ((b__first - a__first) + temp___idx_154))))) else true)) )
 
 axiom bool_eq_rev :
  (forall a   b   : map.
  (forall a__first   a__last   b__first   b__last   : int.
   ( ((bool_eq b b__first b__last a a__first a__last) = True) -> ( (if ((a__first <= a__last)) then (
    ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
    (b__first > b__last))) /\ (forall temp___idx_154   : int.
    (if (( (a__first <= temp___idx_154) /\ (temp___idx_154 <= a__last) )) then (
     ((Submarine__box__rep.to_rep (get a temp___idx_154)) = (Submarine__box__rep.to_rep (get b ((b__first - a__first) + temp___idx_154))))) else true)) ) )))

end

(* Module for axiomatizing concatenation for the array theory associated to type "TtorpedosB" defined at submarine.ads:139, created in Why.Gen.Arrays.Declare_Concatenation_Symbols *)
module Array__Int__Submarine__box__Concat
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Array__Int__Submarine__box

 function index_Index_one 
   : int =
  1
 
 clone export "_gnatprove_standard".Array__1__Concat with
 type component_type = Array__Int__Submarine__box.component_type, 
 type map = Array__Int__Submarine__box.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Submarine__box.get

end

(* Module for axiomatizing comparison for the array theory associated to type "TtorpedosB" defined at submarine.ads:139, created in Why.Gen.Arrays.Declare_Comparison_Symbols *)
module Array__Int__Submarine__box_Comp
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Submarine__box__rep
 use        Array__Int__Submarine__box

 function index_Index_one 
   : int =
  1
 
 clone export "ada__model".Array_Int_Rep_Comparison_Axiom with
 type component_type = Array__Int__Submarine__box.component_type, 
 function to_rep = Submarine__box__rep.to_rep, 
 type map = Array__Int__Submarine__box.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Submarine__box.get, 
 function bool_eq = Array__Int__Submarine__box.bool_eq

end

(* Module for axiomatizing type "TtorpedosB" defined at submarine.ads:139, created in Gnat2Why.Types.Translate_Type *)
module Submarine__TtorpedosB
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Submarine__box
 use        Submarine__Tph_indexB
 use        Submarine__Tph_indexB__rep
 use        Submarine__ph_index
 use        Array__Int__Submarine__box

 type component_type =
  Submarine__box.box
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with
 type map = Array__Int__Submarine__box.map, 
 function array_bool_eq = Array__Int__Submarine__box.bool_eq, 
 type index_base_type = Submarine__Tph_indexB.tph_indexB, 
 type index_rep_type = int, 
 function to_rep = Submarine__Tph_indexB__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Submarine__Tph_indexB.in_range, 
 predicate index_dynamic_property = Submarine__ph_index.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type ttorpedosB =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline : no" function to_array
 
 meta "model_projection" function first
 
 meta "inline : no" function first
 
 meta "model_projection" function last
 
 meta "inline : no" function last
 
 type ttorpedosB__ref =
  { mutable ttorpedosB__content "model_trace:" "name:" : ttorpedosB }
 
 function ttorpedosB__ref___projection 
   (a : ttorpedosB__ref) : ttorpedosB =
  a.ttorpedosB__content
 
 meta "model_projection" function ttorpedosB__ref___projection
 
 meta "inline : no" function ttorpedosB__ref___projection
 
 val ttorpedosB__havoc 
   (x : ttorpedosB__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "torpedos" defined at submarine.ads:139, created in Gnat2Why.Types.Translate_Type *)
module Submarine__torpedos
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Submarine__box
 use        Array__Int__Submarine__box

 type component_type =
  Submarine__box.box
 
 function first 
   : int =
  0
 
 function last 
   : int =
  1
 
 clone export "ada__model".Constr_Array with
 type map = Array__Int__Submarine__box.map, 
 function array_bool_eq = Array__Int__Submarine__box.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T43s" defined at submarine.ads:143, created in Gnat2Why.Types.Translate_Type *)
module Submarine__firetorpedo__L42s__T43s
 use import "_gnatprove_standard".Main
 use import "int".Int

 type t43s =
  < range 0 1 >
 
 function first 
   : int =
  0
 
 function last 
   : int =
  1
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = t43s, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type t43s__ref =
  { mutable t43s__content "model_trace:" "name:" : t43s }
 
 function t43s__ref___projection 
   (a : t43s__ref) : t43s =
  a.t43s__content
 
 meta "model_projection" function t43s__ref___projection
 
 meta "inline : no" function t43s__ref___projection
 
 val t43s__havoc 
   (x : t43s__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "T43s" defined at submarine.ads:143, created in Gnat2Why.Types.Translate_Type *)
module Submarine__firetorpedo__L42s__T43s__rep
 use        Submarine__firetorpedo__L42s__T43s
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Submarine__firetorpedo__L42s__T43s.t43s) : int =
  (Submarine__firetorpedo__L42s__T43s.t43s'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Submarine__firetorpedo__L42s__T43s.t43s, 
 predicate in_range = Submarine__firetorpedo__L42s__T43s.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "T45s" defined at submarine.ads:144, created in Gnat2Why.Types.Translate_Type *)
module Submarine__firetorpedo__L44s__T45s
 use import "_gnatprove_standard".Main
 use import "int".Int

 type t45s =
  < range 0 1 >
 
 function first 
   : int =
  0
 
 function last 
   : int =
  1
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = t45s, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type t45s__ref =
  { mutable t45s__content "model_trace:" "name:" : t45s }
 
 function t45s__ref___projection 
   (a : t45s__ref) : t45s =
  a.t45s__content
 
 meta "model_projection" function t45s__ref___projection
 
 meta "inline : no" function t45s__ref___projection
 
 val t45s__havoc 
   (x : t45s__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "T45s" defined at submarine.ads:144, created in Gnat2Why.Types.Translate_Type *)
module Submarine__firetorpedo__L44s__T45s__rep
 use        Submarine__firetorpedo__L44s__T45s
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Submarine__firetorpedo__L44s__T45s.t45s) : int =
  (Submarine__firetorpedo__L44s__T45s.t45s'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Submarine__firetorpedo__L44s__T45s.t45s, 
 predicate in_range = Submarine__firetorpedo__L44s__T45s.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "T47s" defined at submarine.ads:147, created in Gnat2Why.Types.Translate_Type *)
module Submarine__loadtorpedo__L46s__T47s
 use import "_gnatprove_standard".Main
 use import "int".Int

 type t47s =
  < range 0 1 >
 
 function first 
   : int =
  0
 
 function last 
   : int =
  1
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = t47s, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type t47s__ref =
  { mutable t47s__content "model_trace:" "name:" : t47s }
 
 function t47s__ref___projection 
   (a : t47s__ref) : t47s =
  a.t47s__content
 
 meta "model_projection" function t47s__ref___projection
 
 meta "inline : no" function t47s__ref___projection
 
 val t47s__havoc 
   (x : t47s__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "T47s" defined at submarine.ads:147, created in Gnat2Why.Types.Translate_Type *)
module Submarine__loadtorpedo__L46s__T47s__rep
 use        Submarine__loadtorpedo__L46s__T47s
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Submarine__loadtorpedo__L46s__T47s.t47s) : int =
  (Submarine__loadtorpedo__L46s__T47s.t47s'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Submarine__loadtorpedo__L46s__T47s.t47s, 
 predicate in_range = Submarine__loadtorpedo__L46s__T47s.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "T49s" defined at submarine.ads:148, created in Gnat2Why.Types.Translate_Type *)
module Submarine__loadtorpedo__L48s__T49s
 use import "_gnatprove_standard".Main
 use import "int".Int

 type t49s =
  < range 0 1 >
 
 function first 
   : int =
  0
 
 function last 
   : int =
  1
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = t49s, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type t49s__ref =
  { mutable t49s__content "model_trace:" "name:" : t49s }
 
 function t49s__ref___projection 
   (a : t49s__ref) : t49s =
  a.t49s__content
 
 meta "model_projection" function t49s__ref___projection
 
 meta "inline : no" function t49s__ref___projection
 
 val t49s__havoc 
   (x : t49s__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "T49s" defined at submarine.ads:148, created in Gnat2Why.Types.Translate_Type *)
module Submarine__loadtorpedo__L48s__T49s__rep
 use        Submarine__loadtorpedo__L48s__T49s
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Submarine__loadtorpedo__L48s__T49s.t49s) : int =
  (Submarine__loadtorpedo__L48s__T49s.t49s'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Submarine__loadtorpedo__L48s__T49s.t49s, 
 predicate in_range = Submarine__loadtorpedo__L48s__T49s.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "T51s" defined at submarine.ads:151, created in Gnat2Why.Types.Translate_Type *)
module Submarine__storetorpedo__L50s__T51s
 use import "_gnatprove_standard".Main
 use import "int".Int

 type t51s =
  < range 0 1 >
 
 function first 
   : int =
  0
 
 function last 
   : int =
  1
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = t51s, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type t51s__ref =
  { mutable t51s__content "model_trace:" "name:" : t51s }
 
 function t51s__ref___projection 
   (a : t51s__ref) : t51s =
  a.t51s__content
 
 meta "model_projection" function t51s__ref___projection
 
 meta "inline : no" function t51s__ref___projection
 
 val t51s__havoc 
   (x : t51s__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "T51s" defined at submarine.ads:151, created in Gnat2Why.Types.Translate_Type *)
module Submarine__storetorpedo__L50s__T51s__rep
 use        Submarine__storetorpedo__L50s__T51s
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Submarine__storetorpedo__L50s__T51s.t51s) : int =
  (Submarine__storetorpedo__L50s__T51s.t51s'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Submarine__storetorpedo__L50s__T51s.t51s, 
 predicate in_range = Submarine__storetorpedo__L50s__T51s.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "T53s" defined at submarine.ads:152, created in Gnat2Why.Types.Translate_Type *)
module Submarine__storetorpedo__L52s__T53s
 use import "_gnatprove_standard".Main
 use import "int".Int

 type t53s =
  < range 0 1 >
 
 function first 
   : int =
  0
 
 function last 
   : int =
  1
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = t53s, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type t53s__ref =
  { mutable t53s__content "model_trace:" "name:" : t53s }
 
 function t53s__ref___projection 
   (a : t53s__ref) : t53s =
  a.t53s__content
 
 meta "model_projection" function t53s__ref___projection
 
 meta "inline : no" function t53s__ref___projection
 
 val t53s__havoc 
   (x : t53s__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "T53s" defined at submarine.ads:152, created in Gnat2Why.Types.Translate_Type *)
module Submarine__storetorpedo__L52s__T53s__rep
 use        Submarine__storetorpedo__L52s__T53s
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Submarine__storetorpedo__L52s__T53s.t53s) : int =
  (Submarine__storetorpedo__L52s__T53s.t53s'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Submarine__storetorpedo__L52s__T53s.t53s, 
 predicate in_range = Submarine__storetorpedo__L52s__T53s.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for defining the constant "R1b" defined at submarine.adb:74, created in Gnat2Why.Decls.Translate_Constant *)
module Submarine__loadtorpedo__L_2__R1b
 use import "_gnatprove_standard".Main

 function r1b #"submarine.adb" 74 0 0#
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "R2b" defined at submarine.adb:74, created in Gnat2Why.Decls.Translate_Constant *)
module Submarine__loadtorpedo__L_2__R2b
 use import "_gnatprove_standard".Main

 function r2b #"submarine.adb" 74 0 0#
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for axiomatizing type "T3b" defined at submarine.adb:74, created in Gnat2Why.Types.Translate_Type *)
module Submarine__loadtorpedo__L_2__T3b
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Submarine__Tph_indexB
 use        Submarine__Tph_indexB__rep

 type t3b =
  Submarine__Tph_indexB.tph_indexB
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int)  =
  ( (first_int <= x) /\ (x <= last_int) )
 
 clone export "ada__model".Dynamic_Discrete with
 type t = t3b, 
 type rep_type = int, 
 function base_to_rep = Submarine__Tph_indexB__rep.to_rep, 
 function base_of_rep = Submarine__Tph_indexB__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t3b__ref =
  { mutable t3b__content "model_trace:" "name:" : t3b }
 
 function t3b__ref___projection 
   (a : t3b__ref) : t3b =
  a.t3b__content
 
 meta "model_projection" function t3b__ref___projection
 
 meta "inline : no" function t3b__ref___projection
 
 val t3b__havoc 
   (x : t3b__ref) : unit
  writes {x}

end

(* Module for defining the constant "R4b" defined at submarine.adb:91, created in Gnat2Why.Decls.Translate_Constant *)
module Submarine__storetorpedo__L_3__R4b
 use import "_gnatprove_standard".Main

 function r4b #"submarine.adb" 91 0 0#
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "R5b" defined at submarine.adb:91, created in Gnat2Why.Decls.Translate_Constant *)
module Submarine__storetorpedo__L_3__R5b
 use import "_gnatprove_standard".Main

 function r5b #"submarine.adb" 91 0 0#
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for axiomatizing type "T6b" defined at submarine.adb:91, created in Gnat2Why.Types.Translate_Type *)
module Submarine__storetorpedo__L_3__T6b
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Submarine__Tph_indexB
 use        Submarine__Tph_indexB__rep

 type t6b =
  Submarine__Tph_indexB.tph_indexB
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int)  =
  ( (first_int <= x) /\ (x <= last_int) )
 
 clone export "ada__model".Dynamic_Discrete with
 type t = t6b, 
 type rep_type = int, 
 function base_to_rep = Submarine__Tph_indexB__rep.to_rep, 
 function base_of_rep = Submarine__Tph_indexB__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t6b__ref =
  { mutable t6b__content "model_trace:" "name:" : t6b }
 
 function t6b__ref___projection 
   (a : t6b__ref) : t6b =
  a.t6b__content
 
 meta "model_projection" function t6b__ref___projection
 
 meta "inline : no" function t6b__ref___projection
 
 val t6b__havoc 
   (x : t6b__ref) : unit
  writes {x}

end
(* Module for defining a ref holding the value of variable "nuclearsubmarine" defined at submarine.ads:21, created in Gnat2Why.Decls.Translate_Variable *)
module Submarine__nuclearsubmarine
 use import "_gnatprove_standard".Main
 use        Submarine__submarine

 val nuclearsubmarine__split_fields #"submarine.ads" 21 0 0#"model_projected" "model_trace:2853" "name:NuclearSubmarine"  : Submarine__submarine.__split_fields__ref 
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "nuclearsubmarine" defined at submarine.ads:21, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Submarine__nuclearsubmarine___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "door1" defined at submarine.ads:41, created in Gnat2Why.Decls.Translate_Variable *)
module Submarine__door1
 use import "_gnatprove_standard".Main
 use        Submarine__door

 val door1__split_fields #"submarine.ads" 41 0 0#"model_projected" "model_trace:2949" "name:Door1"  : Submarine__door.__split_fields__ref 
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "door1" defined at submarine.ads:41, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Submarine__door1___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "door2" defined at submarine.ads:42, created in Gnat2Why.Decls.Translate_Variable *)
module Submarine__door2
 use import "_gnatprove_standard".Main
 use        Submarine__door

 val door2__split_fields #"submarine.ads" 42 0 0#"model_projected" "model_trace:2965" "name:Door2"  : Submarine__door.__split_fields__ref 
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "door2" defined at submarine.ads:42, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Submarine__door2___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "oxygenlevel" defined at submarine.ads:83, created in Gnat2Why.Decls.Translate_Variable *)
module Submarine__oxygenlevel
 use import "_gnatprove_standard".Main

 val oxygenlevel #"submarine.ads" 83 0 0#"model_projected" "model_trace:3214" "name:oxygenLevel"  : int__ref 
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "oxygenlevel" defined at submarine.ads:83, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Submarine__oxygenlevel___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "minoxygenlevel" defined at submarine.ads:84, created in Gnat2Why.Decls.Translate_Variable *)
module Submarine__minoxygenlevel
 use import "_gnatprove_standard".Main

 val minoxygenlevel #"submarine.ads" 84 0 0#"model_projected" "model_trace:3224" "name:minOxygenLevel"  : int__ref 
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "minoxygenlevel" defined at submarine.ads:84, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Submarine__minoxygenlevel___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "emptyoxygen" defined at submarine.ads:85, created in Gnat2Why.Decls.Translate_Variable *)
module Submarine__emptyoxygen
 use import "_gnatprove_standard".Main

 val emptyoxygen #"submarine.ads" 85 0 0#"model_projected" "model_trace:3234" "name:emptyOxygen"  : int__ref 
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "emptyoxygen" defined at submarine.ads:85, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Submarine__emptyoxygen___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "reactortemp" defined at submarine.ads:90, created in Gnat2Why.Decls.Translate_Variable *)
module Submarine__reactortemp
 use import "_gnatprove_standard".Main

 val reactortemp #"submarine.ads" 90 0 0#"model_projected" "model_trace:3255" "name:reactorTemp"  : int__ref 
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "reactortemp" defined at submarine.ads:90, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Submarine__reactortemp___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "reactormaxtemp" defined at submarine.ads:91, created in Gnat2Why.Decls.Translate_Variable *)
module Submarine__reactormaxtemp
 use import "_gnatprove_standard".Main

 val reactormaxtemp #"submarine.ads" 91 0 0#"model_projected" "model_trace:3265" "name:reactorMaxTemp"  : int__ref 
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "reactormaxtemp" defined at submarine.ads:91, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Submarine__reactormaxtemp___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "currentdepth" defined at submarine.ads:94, created in Gnat2Why.Decls.Translate_Variable *)
module Submarine__currentdepth
 use import "_gnatprove_standard".Main

 val currentdepth #"submarine.ads" 94 0 0#"model_projected" "model_trace:3286" "name:currentDepth"  : int__ref 
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "currentdepth" defined at submarine.ads:94, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Submarine__currentdepth___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "maxdepth" defined at submarine.ads:95, created in Gnat2Why.Decls.Translate_Variable *)
module Submarine__maxdepth
 use import "_gnatprove_standard".Main

 val maxdepth #"submarine.ads" 95 0 0#"model_projected" "model_trace:3295" "name:maxDepth"  : int__ref 
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "maxdepth" defined at submarine.ads:95, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Submarine__maxdepth___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "warningmessage" defined at submarine.ads:111, created in Gnat2Why.Decls.Translate_Variable *)
module Submarine__displaywarning__warningmessage
 use import "_gnatprove_standard".Main

 val warningmessage #"submarine.ads" 111 0 0#"model_projected" "model_trace:3363" "name:warningMessage"  : bool__ref 
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "warningmessage" defined at submarine.ads:111, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Submarine__displaywarning__warningmessage___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "surface" defined at submarine.ads:119, created in Gnat2Why.Decls.Translate_Variable *)
module Submarine__oxygensurface__surface
 use import "_gnatprove_standard".Main

 val surface #"submarine.ads" 119 0 0#"model_projected" "model_trace:3406" "name:surface"  : bool__ref 
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "surface" defined at submarine.ads:119, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Submarine__oxygensurface__surface___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "stopsubdepth" defined at submarine.ads:126, created in Gnat2Why.Decls.Translate_Variable *)
module Submarine__stopdepth__stopsubdepth
 use import "_gnatprove_standard".Main

 val stopsubdepth #"submarine.ads" 126 0 0#"model_projected" "model_trace:3455" "name:stopSubDepth"  : bool__ref 
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "stopsubdepth" defined at submarine.ads:126, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Submarine__stopdepth__stopsubdepth___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "d" defined at submarine.ads:142, created in Gnat2Why.Decls.Translate_Variable *)
module Submarine__firetorpedo__d
 use import "_gnatprove_standard".Main
 use        Array__Int__Submarine__box

 val d #"submarine.ads" 142 0 0#"model_projected" "model_trace:3552" "name:d"  : Array__Int__Submarine__box.map__ref 
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "d" defined at submarine.ads:142, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Submarine__firetorpedo__d___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "fired" defined at submarine.ads:142, created in Gnat2Why.Decls.Translate_Variable *)
module Submarine__firetorpedo__fired
 use import "_gnatprove_standard".Main

 val fired #"submarine.ads" 142 0 0#"model_projected" "model_trace:3561" "name:fired"  : bool__ref 
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "fired" defined at submarine.ads:142, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Submarine__firetorpedo__fired___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "load" defined at submarine.ads:146, created in Gnat2Why.Decls.Translate_Variable *)
module Submarine__loadtorpedo__load
 use import "_gnatprove_standard".Main

 val load #"submarine.ads" 146 0 0#"model_projected" "model_trace:3626" "name:load"  : bool__ref 
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "load" defined at submarine.ads:146, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Submarine__loadtorpedo__load___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "d" defined at submarine.ads:146, created in Gnat2Why.Decls.Translate_Variable *)
module Submarine__loadtorpedo__d
 use import "_gnatprove_standard".Main
 use        Array__Int__Submarine__box

 val d #"submarine.ads" 146 0 0#"model_projected" "name:d" "model_trace:3635"  : Array__Int__Submarine__box.map__ref 
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "d" defined at submarine.ads:146, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Submarine__loadtorpedo__d___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "store" defined at submarine.ads:150, created in Gnat2Why.Decls.Translate_Variable *)
module Submarine__storetorpedo__store
 use import "_gnatprove_standard".Main

 val store #"submarine.ads" 150 0 0#"model_projected" "model_trace:3700" "name:store"  : bool__ref 
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "store" defined at submarine.ads:150, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Submarine__storetorpedo__store___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "d" defined at submarine.ads:150, created in Gnat2Why.Decls.Translate_Variable *)
module Submarine__storetorpedo__d
 use import "_gnatprove_standard".Main
 use        Array__Int__Submarine__box

 val d #"submarine.ads" 150 0 0#"model_projected" "name:d" "model_trace:3709"  : Array__Int__Submarine__box.map__ref 
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "d" defined at submarine.ads:150, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Submarine__storetorpedo__d___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "pos" defined at submarine.adb:55, created in Gnat2Why.Decls.Translate_Variable *)
module Submarine__firetorpedo__pos
 use import "_gnatprove_standard".Main

 val pos #"submarine.adb" 55 0 0#"model_projected" "model_trace:2511" "name:Pos"  : int__ref 
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "pos" defined at submarine.adb:55, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Submarine__firetorpedo__pos___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "a" defined at submarine.adb:69, created in Gnat2Why.Decls.Translate_Variable *)
module Submarine__loadtorpedo__a
 use import "_gnatprove_standard".Main

 val a #"submarine.adb" 69 0 0#"model_projected" "model_trace:2588" "name:a"  : int__ref 
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "a" defined at submarine.adb:69, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Submarine__loadtorpedo__a___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "b" defined at submarine.adb:70, created in Gnat2Why.Decls.Translate_Variable *)
module Submarine__loadtorpedo__b
 use import "_gnatprove_standard".Main

 val b #"submarine.adb" 70 0 0#"model_projected" "model_trace:2600" "name:b"  : int__ref 
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "b" defined at submarine.adb:70, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Submarine__loadtorpedo__b___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "i" defined at submarine.adb:74, created in Gnat2Why.Decls.Translate_Variable *)
module Submarine__loadtorpedo__L_2__i
 use import "_gnatprove_standard".Main

 val i #"submarine.adb" 74 0 0#"model_projected" "model_trace:2620" "name:I"  : int__ref 
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "i" defined at submarine.adb:74, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Submarine__loadtorpedo__L_2__i___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "a" defined at submarine.adb:84, created in Gnat2Why.Decls.Translate_Variable *)
module Submarine__storetorpedo__a
 use import "_gnatprove_standard".Main

 val a #"submarine.adb" 84 0 0#"model_projected" "name:a" "model_trace:2672"  : int__ref 
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "a" defined at submarine.adb:84, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Submarine__storetorpedo__a___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "b" defined at submarine.adb:85, created in Gnat2Why.Decls.Translate_Variable *)
module Submarine__storetorpedo__b
 use import "_gnatprove_standard".Main

 val b #"submarine.adb" 85 0 0#"model_projected" "name:b" "model_trace:2684"  : int__ref 
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "b" defined at submarine.adb:85, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Submarine__storetorpedo__b___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "i" defined at submarine.adb:91, created in Gnat2Why.Decls.Translate_Variable *)
module Submarine__storetorpedo__L_3__i
 use import "_gnatprove_standard".Main

 val i #"submarine.adb" 91 0 0#"model_projected" "name:I" "model_trace:2704"  : int__ref 
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "i" defined at submarine.adb:91, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Submarine__storetorpedo__L_3__i___axiom
 use import "_gnatprove_standard".Main


end
(* Module giving axioms for type "short_short_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__short_short_integer___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__short_short_integer

 predicate dynamic_invariant "inline" 
   (temp___expr_4 : int) (temp___is_init_0 : bool) (temp___skip_constant_1 : bool) (temp___do_toplevel_2 : bool) (temp___do_typ_inv_3 : bool)  =
  (if (( temp___is_init_0 \/ (Standard__short_short_integer.first <= Standard__short_short_integer.last) )) then (
   (Standard__short_short_integer.dynamic_property Standard__short_short_integer.first Standard__short_short_integer.last temp___expr_4)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_5 : int) (temp___skip_top_level_6 : bool)  =
  true

end

(* Module giving axioms for type "short_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__short_integer___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__short_integer

 predicate dynamic_invariant "inline" 
   (temp___expr_11 : int) (temp___is_init_7 : bool) (temp___skip_constant_8 : bool) (temp___do_toplevel_9 : bool) (temp___do_typ_inv_10 : bool)  =
  (if (( temp___is_init_7 \/ (Standard__short_integer.first <= Standard__short_integer.last) )) then (
   (Standard__short_integer.dynamic_property Standard__short_integer.first Standard__short_integer.last temp___expr_11)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_12 : int) (temp___skip_top_level_13 : bool)  =
  true

end

(* Module giving axioms for type "integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer

 predicate dynamic_invariant "inline" 
   (temp___expr_18 : int) (temp___is_init_14 : bool) (temp___skip_constant_15 : bool) (temp___do_toplevel_16 : bool) (temp___do_typ_inv_17 : bool)  =
  (if (( temp___is_init_14 \/ (Standard__integer.first <= Standard__integer.last) )) then (
   (Standard__integer.dynamic_property Standard__integer.first Standard__integer.last temp___expr_18)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_19 : int) (temp___skip_top_level_20 : bool)  =
  true

end

(* Module giving axioms for type "long_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__long_integer___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__long_integer

 predicate dynamic_invariant "inline" 
   (temp___expr_25 : int) (temp___is_init_21 : bool) (temp___skip_constant_22 : bool) (temp___do_toplevel_23 : bool) (temp___do_typ_inv_24 : bool)  =
  (if (( temp___is_init_21 \/ (Standard__long_integer.first <= Standard__long_integer.last) )) then (
   (Standard__long_integer.dynamic_property Standard__long_integer.first Standard__long_integer.last temp___expr_25)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_26 : int) (temp___skip_top_level_27 : bool)  =
  true

end

(* Module giving axioms for type "long_long_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__long_long_integer___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__long_long_integer

 predicate dynamic_invariant "inline" 
   (temp___expr_32 : int) (temp___is_init_28 : bool) (temp___skip_constant_29 : bool) (temp___do_toplevel_30 : bool) (temp___do_typ_inv_31 : bool)  =
  (if (( temp___is_init_28 \/ (Standard__long_long_integer.first <= Standard__long_long_integer.last) )) then (
   (Standard__long_long_integer.dynamic_property Standard__long_long_integer.first Standard__long_long_integer.last temp___expr_32)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_33 : int) (temp___skip_top_level_34 : bool)  =
  true

end

(* Module giving axioms for type "natural", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__natural___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__natural

 predicate dynamic_invariant "inline" 
   (temp___expr_39 : int) (temp___is_init_35 : bool) (temp___skip_constant_36 : bool) (temp___do_toplevel_37 : bool) (temp___do_typ_inv_38 : bool)  =
  (if (( temp___is_init_35 \/ (Standard__natural.first <= Standard__natural.last) )) then (
   (Standard__natural.dynamic_property Standard__natural.first Standard__natural.last temp___expr_39)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_40 : int) (temp___skip_top_level_41 : bool)  =
  true

end

(* Module giving axioms for type "positive", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__positive___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__positive

 predicate dynamic_invariant "inline" 
   (temp___expr_46 : int) (temp___is_init_42 : bool) (temp___skip_constant_43 : bool) (temp___do_toplevel_44 : bool) (temp___do_typ_inv_45 : bool)  =
  (if (( temp___is_init_42 \/ (Standard__positive.first <= Standard__positive.last) )) then (
   (Standard__positive.dynamic_property Standard__positive.first Standard__positive.last temp___expr_46)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_47 : int) (temp___skip_top_level_48 : bool)  =
  true

end

(* Module giving axioms for type "short_float", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__short_float___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32
 use        Standard__short_float

 predicate dynamic_invariant "inline" 
   (temp___expr_53 : Float32.t) (temp___is_init_49 : bool) (temp___skip_constant_50 : bool) (temp___do_toplevel_51 : bool) (temp___do_typ_inv_52 : bool)  =
  (if (( temp___is_init_49 \/ (Float32.le Standard__short_float.first Standard__short_float.last) )) then (
   (Standard__short_float.dynamic_property Standard__short_float.first Standard__short_float.last temp___expr_53)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_54 : Float32.t) (temp___skip_top_level_55 : bool)  =
  true

end

(* Module giving axioms for type "float", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__float___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32
 use        Standard__float

 predicate dynamic_invariant "inline" 
   (temp___expr_60 : Float32.t) (temp___is_init_56 : bool) (temp___skip_constant_57 : bool) (temp___do_toplevel_58 : bool) (temp___do_typ_inv_59 : bool)  =
  (if (( temp___is_init_56 \/ (Float32.le Standard__float.first Standard__float.last) )) then (
   (Standard__float.dynamic_property Standard__float.first Standard__float.last temp___expr_60)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_61 : Float32.t) (temp___skip_top_level_62 : bool)  =
  true

end

(* Module giving axioms for type "long_float", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__long_float___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float64
 use        Standard__long_float

 predicate dynamic_invariant "inline" 
   (temp___expr_67 : Float64.t) (temp___is_init_63 : bool) (temp___skip_constant_64 : bool) (temp___do_toplevel_65 : bool) (temp___do_typ_inv_66 : bool)  =
  (if (( temp___is_init_63 \/ (Float64.le Standard__long_float.first Standard__long_float.last) )) then (
   (Standard__long_float.dynamic_property Standard__long_float.first Standard__long_float.last temp___expr_67)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_68 : Float64.t) (temp___skip_top_level_69 : bool)  =
  true

end

(* Module giving axioms for type "character", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__character___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__character

 predicate dynamic_invariant "inline" 
   (temp___expr_74 : int) (temp___is_init_70 : bool) (temp___skip_constant_71 : bool) (temp___do_toplevel_72 : bool) (temp___do_typ_inv_73 : bool)  =
  (if (( temp___is_init_70 \/ (Standard__character.first <= Standard__character.last) )) then (
   (Standard__character.dynamic_property Standard__character.first Standard__character.last temp___expr_74)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_75 : int) (temp___skip_top_level_76 : bool)  =
  true

end

(* Module giving axioms for type "wide_character", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__wide_character___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__wide_character

 predicate dynamic_invariant "inline" 
   (temp___expr_81 : int) (temp___is_init_77 : bool) (temp___skip_constant_78 : bool) (temp___do_toplevel_79 : bool) (temp___do_typ_inv_80 : bool)  =
  (if (( temp___is_init_77 \/ (Standard__wide_character.first <= Standard__wide_character.last) )) then (
   (Standard__wide_character.dynamic_property Standard__wide_character.first Standard__wide_character.last temp___expr_81)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_82 : int) (temp___skip_top_level_83 : bool)  =
  true

end

(* Module giving axioms for type "wide_wide_character", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__wide_wide_character___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__wide_wide_character

 predicate dynamic_invariant "inline" 
   (temp___expr_88 : int) (temp___is_init_84 : bool) (temp___skip_constant_85 : bool) (temp___do_toplevel_86 : bool) (temp___do_typ_inv_87 : bool)  =
  (if (( temp___is_init_84 \/ (Standard__wide_wide_character.first <= Standard__wide_wide_character.last) )) then (
   (Standard__wide_wide_character.dynamic_property Standard__wide_wide_character.first Standard__wide_wide_character.last temp___expr_88)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_89 : int) (temp___skip_top_level_90 : bool)  =
  true

end

(* Module giving axioms for type "string", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__string___axiom
 use import "_gnatprove_standard".Main
 use        Standard__string
 use        Standard__positive

 predicate dynamic_invariant "inline" 
   (temp___expr_96 : Standard__string.string) (temp___is_init_92 : bool) (temp___skip_constant_93 : bool) (temp___do_toplevel_94 : bool) (temp___do_typ_inv_95 : bool)  =
  (if (temp___skip_constant_93) then (
   true) else (
   (Standard__string.dynamic_property Standard__positive.first Standard__positive.last (Standard__string.first temp___expr_96) (Standard__string.last temp___expr_96))))

end

(* Module giving axioms for type "wide_string", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__wide_string___axiom
 use import "_gnatprove_standard".Main
 use        Standard__positive
 use        Standard__wide_string

 predicate dynamic_invariant "inline" 
   (temp___expr_103 : Standard__wide_string.wide_string) (temp___is_init_99 : bool) (temp___skip_constant_100 : bool) (temp___do_toplevel_101 : bool) (temp___do_typ_inv_102 : bool)  =
  (if (temp___skip_constant_100) then (
   true) else (
   (Standard__wide_string.dynamic_property Standard__positive.first Standard__positive.last (Standard__wide_string.first temp___expr_103) (Standard__wide_string.last temp___expr_103))))

end

(* Module giving axioms for type "wide_wide_string", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__wide_wide_string___axiom
 use import "_gnatprove_standard".Main
 use        Standard__positive
 use        Standard__wide_wide_string

 predicate dynamic_invariant "inline" 
   (temp___expr_110 : Standard__wide_wide_string.wide_wide_string) (temp___is_init_106 : bool) (temp___skip_constant_107 : bool) (temp___do_toplevel_108 : bool) (temp___do_typ_inv_109 : bool)  =
  (if (temp___skip_constant_107) then (
   true) else (
   (Standard__wide_wide_string.dynamic_property Standard__positive.first Standard__positive.last (Standard__wide_wide_string.first temp___expr_110) (Standard__wide_wide_string.last temp___expr_110))))

end

(* Module giving axioms for type "duration", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__duration___axiom
 use import "_gnatprove_standard".Main
 use        Standard__duration

 predicate dynamic_invariant "inline" 
   (temp___expr_116 : Standard__duration.duration) (temp___is_init_112 : bool) (temp___skip_constant_113 : bool) (temp___do_toplevel_114 : bool) (temp___do_typ_inv_115 : bool)  =
  true
 
 predicate default_initial_assumption "inline" 
   (temp___expr_117 : Standard__duration.duration) (temp___skip_top_level_118 : bool)  =
  true

end

(* Module giving axioms for type "integer_8", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer_8___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer_8

 predicate dynamic_invariant "inline" 
   (temp___expr_123 : int) (temp___is_init_119 : bool) (temp___skip_constant_120 : bool) (temp___do_toplevel_121 : bool) (temp___do_typ_inv_122 : bool)  =
  (if (( temp___is_init_119 \/ (Standard__integer_8.first <= Standard__integer_8.last) )) then (
   (Standard__integer_8.dynamic_property Standard__integer_8.first Standard__integer_8.last temp___expr_123)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_124 : int) (temp___skip_top_level_125 : bool)  =
  true

end

(* Module giving axioms for type "integer_16", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer_16___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer_16

 predicate dynamic_invariant "inline" 
   (temp___expr_130 : int) (temp___is_init_126 : bool) (temp___skip_constant_127 : bool) (temp___do_toplevel_128 : bool) (temp___do_typ_inv_129 : bool)  =
  (if (( temp___is_init_126 \/ (Standard__integer_16.first <= Standard__integer_16.last) )) then (
   (Standard__integer_16.dynamic_property Standard__integer_16.first Standard__integer_16.last temp___expr_130)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_131 : int) (temp___skip_top_level_132 : bool)  =
  true

end

(* Module giving axioms for type "integer_32", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer_32___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer_32

 predicate dynamic_invariant "inline" 
   (temp___expr_137 : int) (temp___is_init_133 : bool) (temp___skip_constant_134 : bool) (temp___do_toplevel_135 : bool) (temp___do_typ_inv_136 : bool)  =
  (if (( temp___is_init_133 \/ (Standard__integer_32.first <= Standard__integer_32.last) )) then (
   (Standard__integer_32.dynamic_property Standard__integer_32.first Standard__integer_32.last temp___expr_137)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_138 : int) (temp___skip_top_level_139 : bool)  =
  true

end

(* Module giving axioms for type "integer_64", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer_64___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer_64

 predicate dynamic_invariant "inline" 
   (temp___expr_144 : int) (temp___is_init_140 : bool) (temp___skip_constant_141 : bool) (temp___do_toplevel_142 : bool) (temp___do_typ_inv_143 : bool)  =
  (if (( temp___is_init_140 \/ (Standard__integer_64.first <= Standard__integer_64.last) )) then (
   (Standard__integer_64.dynamic_property Standard__integer_64.first Standard__integer_64.last temp___expr_144)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_145 : int) (temp___skip_top_level_146 : bool)  =
  true

end

(* Module giving axioms for type "universal_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__universal_integer___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__universal_integer

 predicate dynamic_invariant "inline" 
   (temp___expr_151 : int) (temp___is_init_147 : bool) (temp___skip_constant_148 : bool) (temp___do_toplevel_149 : bool) (temp___do_typ_inv_150 : bool)  =
  (if (( temp___is_init_147 \/ (Standard__universal_integer.first <= Standard__universal_integer.last) )) then (
   (Standard__universal_integer.dynamic_property Standard__universal_integer.first Standard__universal_integer.last temp___expr_151)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_152 : int) (temp___skip_top_level_153 : bool)  =
  true

end

(* Module for possibly declaring a logic function for "airlocks" defined at submarine.ads:45, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Submarine__airlocks
 use        Submarine__door1
 use        Submarine__door2
 use import "_gnatprove_standard".Main
 use        Submarine__door

 function airlocks 
   (submarine__door1__fields : Submarine__door.__split_fields) (submarine__door2__fields : Submarine__door.__split_fields) : bool
 
 predicate airlocks__function_guard 
   (result : bool) (submarine__door1__fields : Submarine__door.__split_fields) (submarine__door2__fields : Submarine__door.__split_fields) 

end

(* Module for possibly declaring a logic function for "lockdoor1" defined at submarine.ads:49, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Submarine__lockdoor1
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "lockdoor2" defined at submarine.ads:53, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Submarine__lockdoor2
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "opendoor2" defined at submarine.ads:59, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Submarine__opendoor2
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "opendoor1" defined at submarine.ads:63, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Submarine__opendoor1
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "checkairlockdoors" defined at submarine.ads:69, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Submarine__checkairlockdoors
 use        Submarine__door1
 use        Submarine__door2
 use import "_gnatprove_standard".Main
 use        Submarine__door

 function checkairlockdoors 
   (submarine__door1__fields : Submarine__door.__split_fields) (submarine__door2__fields : Submarine__door.__split_fields) : bool
 
 predicate checkairlockdoors__function_guard 
   (result : bool) (submarine__door1__fields : Submarine__door.__split_fields) (submarine__door2__fields : Submarine__door.__split_fields) 

end

(* Module for possibly declaring a logic function for "beginoperating" defined at submarine.ads:73, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Submarine__beginoperating
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "checkreactor" defined at submarine.ads:97, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Submarine__checkreactor
 use        Submarine__reactortemp
 use        Submarine__reactormaxtemp
 use import "_gnatprove_standard".Main

 function checkreactor 
   (submarine__reactortemp : int) (submarine__reactormaxtemp : int) : bool
 
 predicate checkreactor__function_guard 
   (result : bool) (submarine__reactortemp : int) (submarine__reactormaxtemp : int) 

end

(* Module for possibly declaring a logic function for "checkoxygen" defined at submarine.ads:100, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Submarine__checkoxygen
 use        Submarine__oxygenlevel
 use        Submarine__minoxygenlevel
 use import "_gnatprove_standard".Main

 function checkoxygen 
   (submarine__oxygenlevel : int) (submarine__minoxygenlevel : int) : bool
 
 predicate checkoxygen__function_guard 
   (result : bool) (submarine__oxygenlevel : int) (submarine__minoxygenlevel : int) 

end

(* Module for possibly declaring a logic function for "oxygenrunsout" defined at submarine.ads:103, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Submarine__oxygenrunsout
 use        Submarine__emptyoxygen
 use        Submarine__oxygenlevel
 use import "_gnatprove_standard".Main

 function oxygenrunsout 
   (submarine__oxygenlevel : int) (submarine__emptyoxygen : int) : bool
 
 predicate oxygenrunsout__function_guard 
   (result : bool) (submarine__oxygenlevel : int) (submarine__emptyoxygen : int) 

end

(* Module for possibly declaring a logic function for "checkdepth" defined at submarine.ads:106, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Submarine__checkdepth
 use        Submarine__currentdepth
 use        Submarine__maxdepth
 use import "_gnatprove_standard".Main

 function checkdepth 
   (submarine__currentdepth : int) (submarine__maxdepth : int) : bool
 
 predicate checkdepth__function_guard 
   (result : bool) (submarine__currentdepth : int) (submarine__maxdepth : int) 

end

(* Module for possibly declaring a logic function for "displaywarning" defined at submarine.ads:111, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Submarine__displaywarning
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "oxygensurface" defined at submarine.ads:119, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Submarine__oxygensurface
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "stopdepth" defined at submarine.ads:126, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Submarine__stopdepth
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "firetorpedo" defined at submarine.ads:142, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Submarine__firetorpedo
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "loadtorpedo" defined at submarine.ads:146, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Submarine__loadtorpedo
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "storetorpedo" defined at submarine.ads:150, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Submarine__storetorpedo
 use import "_gnatprove_standard".Main


end

(* Module for defining the loop exit exception for the loop "L_1" defined at submarine.adb:58, created in Gnat2Why.Decls.Translate_Loop_Entity *)
module Submarine__firetorpedo__L_1
 use import "_gnatprove_standard".Main

 exception L_1

end

(* Module giving an empty axiom for the entity "L_1" defined at submarine.adb:58, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Submarine__firetorpedo__L_1___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the loop exit exception for the loop "L_2" defined at submarine.adb:74, created in Gnat2Why.Decls.Translate_Loop_Entity *)
module Submarine__loadtorpedo__L_2
 use import "_gnatprove_standard".Main

 exception L_2

end

(* Module giving an empty axiom for the entity "L_2" defined at submarine.adb:74, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Submarine__loadtorpedo__L_2___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the loop exit exception for the loop "L_3" defined at submarine.adb:91, created in Gnat2Why.Decls.Translate_Loop_Entity *)
module Submarine__storetorpedo__L_3
 use import "_gnatprove_standard".Main

 exception L_3

end

(* Module giving an empty axiom for the entity "L_3" defined at submarine.adb:91, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Submarine__storetorpedo__L_3___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "submarineoperation" defined at submarine.ads:8, created in Gnat2Why.Types.Generate_Type_Completion *)
module Submarine__submarineoperation___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Submarine__submarineoperation

 predicate dynamic_invariant "inline" 
   (temp___expr_159 : int) (temp___is_init_155 : bool) (temp___skip_constant_156 : bool) (temp___do_toplevel_157 : bool) (temp___do_typ_inv_158 : bool)  =
  (if (( temp___is_init_155 \/ (Submarine__submarineoperation.first <= Submarine__submarineoperation.last) )) then (
   (Submarine__submarineoperation.dynamic_property Submarine__submarineoperation.first Submarine__submarineoperation.last temp___expr_159)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_160 : int) (temp___skip_top_level_161 : bool)  =
  true

end

(* Module giving axioms for type "submarinestatus" defined at submarine.ads:9, created in Gnat2Why.Types.Generate_Type_Completion *)
module Submarine__submarinestatus___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Submarine__submarinestatus

 predicate dynamic_invariant "inline" 
   (temp___expr_166 : int) (temp___is_init_162 : bool) (temp___skip_constant_163 : bool) (temp___do_toplevel_164 : bool) (temp___do_typ_inv_165 : bool)  =
  (if (( temp___is_init_162 \/ (Submarine__submarinestatus.first <= Submarine__submarinestatus.last) )) then (
   (Submarine__submarinestatus.dynamic_property Submarine__submarinestatus.first Submarine__submarinestatus.last temp___expr_166)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_167 : int) (temp___skip_top_level_168 : bool)  =
  true

end

(* Module giving axioms for type "submarine" defined at submarine.ads:14, created in Gnat2Why.Types.Generate_Type_Completion *)
module Submarine__submarine___axiom
 use import "_gnatprove_standard".Main
 use        Submarine__submarine

 predicate dynamic_invariant "inline" 
   (temp___expr_173 : Submarine__submarine.submarine) (temp___is_init_169 : bool) (temp___skip_constant_170 : bool) (temp___do_toplevel_171 : bool) (temp___do_typ_inv_172 : bool)  =
  true
 
 predicate default_initial_assumption "inline" 
   (temp___expr_174 : Submarine__submarine.submarine) (temp___skip_top_level_175 : bool)  =
  true

end

(* Module giving axioms for type "lockedunlocked" defined at submarine.ads:28, created in Gnat2Why.Types.Generate_Type_Completion *)
module Submarine__lockedunlocked___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Submarine__lockedunlocked

 predicate dynamic_invariant "inline" 
   (temp___expr_182 : int) (temp___is_init_178 : bool) (temp___skip_constant_179 : bool) (temp___do_toplevel_180 : bool) (temp___do_typ_inv_181 : bool)  =
  (if (( temp___is_init_178 \/ (Submarine__lockedunlocked.first <= Submarine__lockedunlocked.last) )) then (
   (Submarine__lockedunlocked.dynamic_property Submarine__lockedunlocked.first Submarine__lockedunlocked.last temp___expr_182)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_183 : int) (temp___skip_top_level_184 : bool)  =
  true

end

(* Module giving axioms for type "openclosed" defined at submarine.ads:32, created in Gnat2Why.Types.Generate_Type_Completion *)
module Submarine__openclosed___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Submarine__openclosed

 predicate dynamic_invariant "inline" 
   (temp___expr_189 : int) (temp___is_init_185 : bool) (temp___skip_constant_186 : bool) (temp___do_toplevel_187 : bool) (temp___do_typ_inv_188 : bool)  =
  (if (( temp___is_init_185 \/ (Submarine__openclosed.first <= Submarine__openclosed.last) )) then (
   (Submarine__openclosed.dynamic_property Submarine__openclosed.first Submarine__openclosed.last temp___expr_189)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_190 : int) (temp___skip_top_level_191 : bool)  =
  true

end

(* Module giving axioms for type "door" defined at submarine.ads:35, created in Gnat2Why.Types.Generate_Type_Completion *)
module Submarine__door___axiom
 use import "_gnatprove_standard".Main
 use        Submarine__door

 predicate dynamic_invariant "inline" 
   (temp___expr_196 : Submarine__door.door) (temp___is_init_192 : bool) (temp___skip_constant_193 : bool) (temp___do_toplevel_194 : bool) (temp___do_typ_inv_195 : bool)  =
  true
 
 predicate default_initial_assumption "inline" 
   (temp___expr_197 : Submarine__door.door) (temp___skip_top_level_198 : bool)  =
  true

end

(* Module giving axioms for type "TsubmarineoxygenB" defined at submarine.ads:82, created in Gnat2Why.Types.Generate_Type_Completion *)
module Submarine__TsubmarineoxygenB___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "submarineoxygen" defined at submarine.ads:82, created in Gnat2Why.Types.Generate_Type_Completion *)
module Submarine__submarineoxygen___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Submarine__submarineoxygen

 predicate dynamic_invariant "inline" 
   (temp___expr_209 : int) (temp___is_init_205 : bool) (temp___skip_constant_206 : bool) (temp___do_toplevel_207 : bool) (temp___do_typ_inv_208 : bool)  =
  (if (( temp___is_init_205 \/ (Submarine__submarineoxygen.first <= Submarine__submarineoxygen.last) )) then (
   (Submarine__submarineoxygen.dynamic_property Submarine__submarineoxygen.first Submarine__submarineoxygen.last temp___expr_209)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_210 : int) (temp___skip_top_level_211 : bool)  =
  true

end

(* Module giving axioms for type "TsubmarineheatB" defined at submarine.ads:89, created in Gnat2Why.Types.Generate_Type_Completion *)
module Submarine__TsubmarineheatB___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "submarineheat" defined at submarine.ads:89, created in Gnat2Why.Types.Generate_Type_Completion *)
module Submarine__submarineheat___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Submarine__submarineheat

 predicate dynamic_invariant "inline" 
   (temp___expr_216 : int) (temp___is_init_212 : bool) (temp___skip_constant_213 : bool) (temp___do_toplevel_214 : bool) (temp___do_typ_inv_215 : bool)  =
  (if (( temp___is_init_212 \/ (Submarine__submarineheat.first <= Submarine__submarineheat.last) )) then (
   (Submarine__submarineheat.dynamic_property Submarine__submarineheat.first Submarine__submarineheat.last temp___expr_216)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_217 : int) (temp___skip_top_level_218 : bool)  =
  true

end

(* Module giving axioms for type "TsubmarinedepthB" defined at submarine.ads:93, created in Gnat2Why.Types.Generate_Type_Completion *)
module Submarine__TsubmarinedepthB___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "submarinedepth" defined at submarine.ads:93, created in Gnat2Why.Types.Generate_Type_Completion *)
module Submarine__submarinedepth___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Submarine__submarinedepth

 predicate dynamic_invariant "inline" 
   (temp___expr_223 : int) (temp___is_init_219 : bool) (temp___skip_constant_220 : bool) (temp___do_toplevel_221 : bool) (temp___do_typ_inv_222 : bool)  =
  (if (( temp___is_init_219 \/ (Submarine__submarinedepth.first <= Submarine__submarinedepth.last) )) then (
   (Submarine__submarinedepth.dynamic_property Submarine__submarinedepth.first Submarine__submarinedepth.last temp___expr_223)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_224 : int) (temp___skip_top_level_225 : bool)  =
  true

end

(* Module giving axioms for type "box" defined at submarine.ads:136, created in Gnat2Why.Types.Generate_Type_Completion *)
module Submarine__box___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Submarine__box

 predicate dynamic_invariant "inline" 
   (temp___expr_238 : int) (temp___is_init_234 : bool) (temp___skip_constant_235 : bool) (temp___do_toplevel_236 : bool) (temp___do_typ_inv_237 : bool)  =
  (if (( temp___is_init_234 \/ (Submarine__box.first <= Submarine__box.last) )) then (
   (Submarine__box.dynamic_property Submarine__box.first Submarine__box.last temp___expr_238)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_239 : int) (temp___skip_top_level_240 : bool)  =
  true

end

(* Module giving axioms for type "Tph_indexB" defined at submarine.ads:137, created in Gnat2Why.Types.Generate_Type_Completion *)
module Submarine__Tph_indexB___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "ph_index" defined at submarine.ads:137, created in Gnat2Why.Types.Generate_Type_Completion *)
module Submarine__ph_index___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Submarine__ph_index

 predicate dynamic_invariant "inline" 
   (temp___expr_245 : int) (temp___is_init_241 : bool) (temp___skip_constant_242 : bool) (temp___do_toplevel_243 : bool) (temp___do_typ_inv_244 : bool)  =
  (if (( temp___is_init_241 \/ (Submarine__ph_index.first <= Submarine__ph_index.last) )) then (
   (Submarine__ph_index.dynamic_property Submarine__ph_index.first Submarine__ph_index.last temp___expr_245)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_246 : int) (temp___skip_top_level_247 : bool)  =
  true

end

(* Module giving axioms for type "TtorpedosB" defined at submarine.ads:139, created in Gnat2Why.Types.Generate_Type_Completion *)
module Submarine__TtorpedosB___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "torpedos" defined at submarine.ads:139, created in Gnat2Why.Types.Generate_Type_Completion *)
module Submarine__torpedos___axiom
 use import "_gnatprove_standard".Main
 use        Array__Int__Submarine__box
 use        Array__Int__Submarine__box

 predicate dynamic_invariant "inline" 
   (temp___expr_252 : Array__Int__Submarine__box.map) (temp___is_init_248 : bool) (temp___skip_constant_249 : bool) (temp___do_toplevel_250 : bool) (temp___do_typ_inv_251 : bool)  =
  true
 
 predicate default_initial_assumption "inline" 
   (temp___expr_254 : Array__Int__Submarine__box.map) (temp___skip_top_level_255 : bool)  =
  true

end

(* Module giving axioms for type "T43s" defined at submarine.ads:143, created in Gnat2Why.Types.Generate_Type_Completion *)
module Submarine__firetorpedo__L42s__T43s___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T45s" defined at submarine.ads:144, created in Gnat2Why.Types.Generate_Type_Completion *)
module Submarine__firetorpedo__L44s__T45s___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T47s" defined at submarine.ads:147, created in Gnat2Why.Types.Generate_Type_Completion *)
module Submarine__loadtorpedo__L46s__T47s___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T49s" defined at submarine.ads:148, created in Gnat2Why.Types.Generate_Type_Completion *)
module Submarine__loadtorpedo__L48s__T49s___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T51s" defined at submarine.ads:151, created in Gnat2Why.Types.Generate_Type_Completion *)
module Submarine__storetorpedo__L50s__T51s___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T53s" defined at submarine.ads:152, created in Gnat2Why.Types.Generate_Type_Completion *)
module Submarine__storetorpedo__L52s__T53s___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T3b" defined at submarine.adb:74, created in Gnat2Why.Types.Generate_Type_Completion *)
module Submarine__loadtorpedo__L_2__T3b___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T6b" defined at submarine.adb:91, created in Gnat2Why.Types.Generate_Type_Completion *)
module Submarine__storetorpedo__L_3__T6b___axiom
 use import "_gnatprove_standard".Main


end
(* Module for defining the value of constant "R1b" defined at submarine.adb:74, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Submarine__loadtorpedo__L_2__R1b___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the value of constant "R2b" defined at submarine.adb:74, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Submarine__loadtorpedo__L_2__R2b___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the value of constant "R4b" defined at submarine.adb:91, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Submarine__storetorpedo__L_3__R4b___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the value of constant "R5b" defined at submarine.adb:91, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Submarine__storetorpedo__L_3__R5b___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving a program function and a defining axiom for the expression function "airlocks" defined at submarine.ads:45, created in Gnat2Why.Subprograms.Translate_Expression_Function_Body *)
module Submarine__airlocks___axiom
 use        Submarine__door1
 use        Submarine__door2
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Submarine__airlocks
 use        Submarine__openclosed
 use        Submarine__openclosed__rep
 use        Submarine__door
 use        Submarine__door___axiom
 use        Submarine__door1
 use        Submarine__door2

 val airlocks 
   (__void_param : unit) : bool
  requires {  true }
  ensures {  ( ( (result = (Submarine__airlocks.airlocks Submarine__door1.door1__split_fields.Submarine__door.__split_fields__content Submarine__door2.door2__split_fields.Submarine__door.__split_fields__content)) /\ (Submarine__airlocks.airlocks__function_guard result Submarine__door1.door1__split_fields.Submarine__door.__split_fields__content Submarine__door2.door2__split_fields.Submarine__door.__split_fields__content) ) /\ ( (result = True) <-> ( ((Submarine__openclosed__rep.to_rep (Submarine__door.rec__submarine__door__status (Submarine__door.__split_fields { Submarine__door.__split_fields = Submarine__door1.door1__split_fields.Submarine__door.__split_fields__content }))) = 1) \/ ((Submarine__openclosed__rep.to_rep (Submarine__door.rec__submarine__door__status (Submarine__door.__split_fields { Submarine__door.__split_fields = Submarine__door2.door2__split_fields.Submarine__door.__split_fields__content }))) = 1) ) ) ) }
  reads {Submarine__door1.door1__split_fields, Submarine__door2.door2__split_fields}
 
 axiom airlocks__post_axiom :
  (forall submarine__door1__fields   submarine__door2__fields   : Submarine__door.__split_fields [(Submarine__airlocks.airlocks submarine__door1__fields submarine__door2__fields)].
   ( ( (Submarine__door___axiom.dynamic_invariant { Submarine__door.__split_fields = submarine__door1__fields } True True True True) /\ (Submarine__door___axiom.dynamic_invariant { Submarine__door.__split_fields = submarine__door2__fields } True True True True) ) -> (let result = (Submarine__airlocks.airlocks submarine__door1__fields submarine__door2__fields) in (
    (if ((Submarine__airlocks.airlocks__function_guard result submarine__door1__fields submarine__door2__fields)) then (
     ( ( true /\ true ) /\ true )) else true)))
    ))
 
 axiom airlocks__def_axiom :
  (forall submarine__door1__fields   submarine__door2__fields   : Submarine__door.__split_fields [(Submarine__airlocks.airlocks submarine__door1__fields submarine__door2__fields)].
   ( (let result = (Submarine__airlocks.airlocks submarine__door1__fields submarine__door2__fields) in (
    (Submarine__airlocks.airlocks__function_guard result submarine__door1__fields submarine__door2__fields)))
    -> ( ((Submarine__airlocks.airlocks submarine__door1__fields submarine__door2__fields) = True) <-> ( ((Submarine__openclosed__rep.to_rep (Submarine__door.rec__submarine__door__status (Submarine__door.__split_fields { Submarine__door.__split_fields = submarine__door1__fields }))) = 1) \/ ((Submarine__openclosed__rep.to_rep (Submarine__door.rec__submarine__door__status (Submarine__door.__split_fields { Submarine__door.__split_fields = submarine__door2__fields }))) = 1) ) ) ))

end

(* Module for declaring a program function (and possibly an axiom) for "lockdoor1" defined at submarine.ads:49, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Submarine__lockdoor1___axiom
 use        Submarine__door1
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Submarine__lockedunlocked
 use        Submarine__lockedunlocked__rep
 use        Submarine__openclosed
 use        Submarine__openclosed__rep
 use        Submarine__door
 use        Submarine__door___axiom
 use        Submarine__door1

 val lockdoor1 
   (__void_param : unit) : unit
  requires {  ((Submarine__openclosed__rep.to_rep (Submarine__door.rec__submarine__door__status (Submarine__door.__split_fields { Submarine__door.__split_fields = Submarine__door1.door1__split_fields.Submarine__door.__split_fields__content }))) = 1) }
  ensures {  ( ( ((Submarine__openclosed__rep.to_rep (Submarine__door.rec__submarine__door__status (Submarine__door.__split_fields { Submarine__door.__split_fields = Submarine__door1.door1__split_fields.Submarine__door.__split_fields__content }))) = 1) /\ ((Submarine__lockedunlocked__rep.to_rep (Submarine__door.rec__submarine__door__lock (Submarine__door.__split_fields { Submarine__door.__split_fields = Submarine__door1.door1__split_fields.Submarine__door.__split_fields__content }))) = 0) ) /\ (Submarine__door___axiom.dynamic_invariant { Submarine__door.__split_fields = Submarine__door1.door1__split_fields.Submarine__door.__split_fields__content } True True True True) ) }
  reads {Submarine__door1.door1__split_fields}
  writes {Submarine__door1.door1__split_fields}

end

(* Module for declaring a program function (and possibly an axiom) for "lockdoor2" defined at submarine.ads:53, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Submarine__lockdoor2___axiom
 use        Submarine__door2
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Submarine__lockedunlocked
 use        Submarine__lockedunlocked__rep
 use        Submarine__openclosed
 use        Submarine__openclosed__rep
 use        Submarine__door
 use        Submarine__door___axiom
 use        Submarine__door2

 val lockdoor2 
   (__void_param : unit) : unit
  requires {  ((Submarine__openclosed__rep.to_rep (Submarine__door.rec__submarine__door__status (Submarine__door.__split_fields { Submarine__door.__split_fields = Submarine__door2.door2__split_fields.Submarine__door.__split_fields__content }))) = 1) }
  ensures {  ( ( ((Submarine__openclosed__rep.to_rep (Submarine__door.rec__submarine__door__status (Submarine__door.__split_fields { Submarine__door.__split_fields = Submarine__door2.door2__split_fields.Submarine__door.__split_fields__content }))) = 1) /\ ((Submarine__lockedunlocked__rep.to_rep (Submarine__door.rec__submarine__door__lock (Submarine__door.__split_fields { Submarine__door.__split_fields = Submarine__door2.door2__split_fields.Submarine__door.__split_fields__content }))) = 0) ) /\ (Submarine__door___axiom.dynamic_invariant { Submarine__door.__split_fields = Submarine__door2.door2__split_fields.Submarine__door.__split_fields__content } True True True True) ) }
  reads {Submarine__door2.door2__split_fields}
  writes {Submarine__door2.door2__split_fields}

end

(* Module for declaring a program function (and possibly an axiom) for "opendoor2" defined at submarine.ads:59, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Submarine__opendoor2___axiom
 use        Submarine__door1
 use        Submarine__door2
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Submarine__airlocks
 use        Submarine__lockedunlocked
 use        Submarine__lockedunlocked__rep
 use        Submarine__openclosed
 use        Submarine__openclosed__rep
 use        Submarine__door
 use        Submarine__door___axiom
 use        Submarine__door1
 use        Submarine__door2

 val opendoor2 
   (__void_param : unit) : unit
  requires {  ( ((Submarine__openclosed__rep.to_rep (Submarine__door.rec__submarine__door__status (Submarine__door.__split_fields { Submarine__door.__split_fields = Submarine__door1.door1__split_fields.Submarine__door.__split_fields__content }))) = 1) /\ ((Submarine__lockedunlocked__rep.to_rep (Submarine__door.rec__submarine__door__lock (Submarine__door.__split_fields { Submarine__door.__split_fields = Submarine__door2.door2__split_fields.Submarine__door.__split_fields__content }))) = 1) ) }
  ensures {  ( ((epsilon temp___result_201 : bool.
   ( (temp___result_201 = (Submarine__airlocks.airlocks Submarine__door1.door1__split_fields.Submarine__door.__split_fields__content Submarine__door2.door2__split_fields.Submarine__door.__split_fields__content)) /\ (Submarine__airlocks.airlocks__function_guard temp___result_201 Submarine__door1.door1__split_fields.Submarine__door.__split_fields__content Submarine__door2.door2__split_fields.Submarine__door.__split_fields__content) )) = True) /\ ( (Submarine__door___axiom.dynamic_invariant { Submarine__door.__split_fields = Submarine__door1.door1__split_fields.Submarine__door.__split_fields__content } True True True True) /\ (Submarine__door___axiom.dynamic_invariant { Submarine__door.__split_fields = Submarine__door2.door2__split_fields.Submarine__door.__split_fields__content } True True True True) ) ) }
  reads {Submarine__door1.door1__split_fields, Submarine__door2.door2__split_fields}
  writes {Submarine__door1.door1__split_fields, Submarine__door2.door2__split_fields}

end

(* Module for declaring a program function (and possibly an axiom) for "opendoor1" defined at submarine.ads:63, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Submarine__opendoor1___axiom
 use        Submarine__door1
 use        Submarine__door2
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Submarine__airlocks
 use        Submarine__lockedunlocked
 use        Submarine__lockedunlocked__rep
 use        Submarine__openclosed
 use        Submarine__openclosed__rep
 use        Submarine__door
 use        Submarine__door___axiom
 use        Submarine__door1
 use        Submarine__door2

 val opendoor1 
   (__void_param : unit) : unit
  requires {  ( ((Submarine__openclosed__rep.to_rep (Submarine__door.rec__submarine__door__status (Submarine__door.__split_fields { Submarine__door.__split_fields = Submarine__door2.door2__split_fields.Submarine__door.__split_fields__content }))) = 1) /\ ((Submarine__lockedunlocked__rep.to_rep (Submarine__door.rec__submarine__door__lock (Submarine__door.__split_fields { Submarine__door.__split_fields = Submarine__door1.door1__split_fields.Submarine__door.__split_fields__content }))) = 1) ) }
  ensures {  ( ((epsilon temp___result_202 : bool.
   ( (temp___result_202 = (Submarine__airlocks.airlocks Submarine__door1.door1__split_fields.Submarine__door.__split_fields__content Submarine__door2.door2__split_fields.Submarine__door.__split_fields__content)) /\ (Submarine__airlocks.airlocks__function_guard temp___result_202 Submarine__door1.door1__split_fields.Submarine__door.__split_fields__content Submarine__door2.door2__split_fields.Submarine__door.__split_fields__content) )) = True) /\ ( (Submarine__door___axiom.dynamic_invariant { Submarine__door.__split_fields = Submarine__door1.door1__split_fields.Submarine__door.__split_fields__content } True True True True) /\ (Submarine__door___axiom.dynamic_invariant { Submarine__door.__split_fields = Submarine__door2.door2__split_fields.Submarine__door.__split_fields__content } True True True True) ) ) }
  reads {Submarine__door1.door1__split_fields, Submarine__door2.door2__split_fields}
  writes {Submarine__door1.door1__split_fields, Submarine__door2.door2__split_fields}

end

(* Module giving a program function and a defining axiom for the expression function "checkairlockdoors" defined at submarine.ads:69, created in Gnat2Why.Subprograms.Translate_Expression_Function_Body *)
module Submarine__checkairlockdoors___axiom
 use        Submarine__door1
 use        Submarine__door2
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Submarine__checkairlockdoors
 use        Submarine__lockedunlocked
 use        Submarine__lockedunlocked__rep
 use        Submarine__door
 use        Submarine__door___axiom
 use        Submarine__door1
 use        Submarine__door2

 val checkairlockdoors 
   (__void_param : unit) : bool
  requires {  true }
  ensures {  ( ( (result = (Submarine__checkairlockdoors.checkairlockdoors Submarine__door1.door1__split_fields.Submarine__door.__split_fields__content Submarine__door2.door2__split_fields.Submarine__door.__split_fields__content)) /\ (Submarine__checkairlockdoors.checkairlockdoors__function_guard result Submarine__door1.door1__split_fields.Submarine__door.__split_fields__content Submarine__door2.door2__split_fields.Submarine__door.__split_fields__content) ) /\ ( (result = True) <-> ( ((Submarine__lockedunlocked__rep.to_rep (Submarine__door.rec__submarine__door__lock (Submarine__door.__split_fields { Submarine__door.__split_fields = Submarine__door1.door1__split_fields.Submarine__door.__split_fields__content }))) = 0) /\ ((Submarine__lockedunlocked__rep.to_rep (Submarine__door.rec__submarine__door__lock (Submarine__door.__split_fields { Submarine__door.__split_fields = Submarine__door2.door2__split_fields.Submarine__door.__split_fields__content }))) = 0) ) ) ) }
  reads {Submarine__door1.door1__split_fields, Submarine__door2.door2__split_fields}
 
 axiom checkairlockdoors__post_axiom :
  (forall submarine__door1__fields   submarine__door2__fields   : Submarine__door.__split_fields [(Submarine__checkairlockdoors.checkairlockdoors submarine__door1__fields submarine__door2__fields)].
   ( ( (Submarine__door___axiom.dynamic_invariant { Submarine__door.__split_fields = submarine__door1__fields } True True True True) /\ (Submarine__door___axiom.dynamic_invariant { Submarine__door.__split_fields = submarine__door2__fields } True True True True) ) -> (let result = (Submarine__checkairlockdoors.checkairlockdoors submarine__door1__fields submarine__door2__fields) in (
    (if ((Submarine__checkairlockdoors.checkairlockdoors__function_guard result submarine__door1__fields submarine__door2__fields)) then (
     ( ( true /\ true ) /\ true )) else true)))
    ))
 
 axiom checkairlockdoors__def_axiom :
  (forall submarine__door1__fields   submarine__door2__fields   : Submarine__door.__split_fields [(Submarine__checkairlockdoors.checkairlockdoors submarine__door1__fields submarine__door2__fields)].
   ( (let result = (Submarine__checkairlockdoors.checkairlockdoors submarine__door1__fields submarine__door2__fields) in (
    (Submarine__checkairlockdoors.checkairlockdoors__function_guard result submarine__door1__fields submarine__door2__fields)))
    -> ( ((Submarine__checkairlockdoors.checkairlockdoors submarine__door1__fields submarine__door2__fields) = True) <-> ( ((Submarine__lockedunlocked__rep.to_rep (Submarine__door.rec__submarine__door__lock (Submarine__door.__split_fields { Submarine__door.__split_fields = submarine__door1__fields }))) = 0) /\ ((Submarine__lockedunlocked__rep.to_rep (Submarine__door.rec__submarine__door__lock (Submarine__door.__split_fields { Submarine__door.__split_fields = submarine__door2__fields }))) = 0) ) ) ))

end

(* Module for declaring a program function (and possibly an axiom) for "beginoperating" defined at submarine.ads:73, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Submarine__beginoperating___axiom
 use        Submarine__door1
 use        Submarine__nuclearsubmarine
 use        Submarine__door2
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Submarine__checkairlockdoors
 use        Submarine__submarineoperation
 use        Submarine__submarineoperation__rep
 use        Submarine__submarine
 use        Submarine__submarine___axiom
 use        Submarine__nuclearsubmarine
 use        Submarine__door
 use        Submarine__door1
 use        Submarine__door2

 val beginoperating 
   (__void_param : unit) : unit
  requires {  ((epsilon temp___result_203 : bool.
   ( (temp___result_203 = (Submarine__checkairlockdoors.checkairlockdoors Submarine__door1.door1__split_fields.Submarine__door.__split_fields__content Submarine__door2.door2__split_fields.Submarine__door.__split_fields__content)) /\ (Submarine__checkairlockdoors.checkairlockdoors__function_guard temp___result_203 Submarine__door1.door1__split_fields.Submarine__door.__split_fields__content Submarine__door2.door2__split_fields.Submarine__door.__split_fields__content) )) = True) }
  ensures {  ( ( ((Submarine__submarineoperation__rep.to_rep (Submarine__submarine.rec__submarine__submarine__operating (Submarine__submarine.__split_fields { Submarine__submarine.__split_fields = Submarine__nuclearsubmarine.nuclearsubmarine__split_fields.Submarine__submarine.__split_fields__content }))) = 0) /\ ((epsilon temp___result_204 : bool.
   ( (temp___result_204 = (Submarine__checkairlockdoors.checkairlockdoors Submarine__door1.door1__split_fields.Submarine__door.__split_fields__content Submarine__door2.door2__split_fields.Submarine__door.__split_fields__content)) /\ (Submarine__checkairlockdoors.checkairlockdoors__function_guard temp___result_204 Submarine__door1.door1__split_fields.Submarine__door.__split_fields__content Submarine__door2.door2__split_fields.Submarine__door.__split_fields__content) )) = True) ) /\ (Submarine__submarine___axiom.dynamic_invariant { Submarine__submarine.__split_fields = Submarine__nuclearsubmarine.nuclearsubmarine__split_fields.Submarine__submarine.__split_fields__content } True True True True) ) }
  reads {Submarine__nuclearsubmarine.nuclearsubmarine__split_fields, Submarine__door1.door1__split_fields, Submarine__door2.door2__split_fields}
  writes {Submarine__nuclearsubmarine.nuclearsubmarine__split_fields}

end

(* Module giving a program function and a defining axiom for the expression function "checkreactor" defined at submarine.ads:97, created in Gnat2Why.Subprograms.Translate_Expression_Function_Body *)
module Submarine__checkreactor___axiom
 use        Submarine__reactortemp
 use        Submarine__reactormaxtemp
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Submarine__checkreactor
 use        Submarine__submarineheat___axiom
 use        Submarine__reactortemp
 use        Submarine__reactormaxtemp

 val checkreactor 
   (__void_param : unit) : bool
  requires {  true }
  ensures {  ( ( (result = (Submarine__checkreactor.checkreactor Submarine__reactortemp.reactortemp.int__content Submarine__reactormaxtemp.reactormaxtemp.int__content)) /\ (Submarine__checkreactor.checkreactor__function_guard result Submarine__reactortemp.reactortemp.int__content Submarine__reactormaxtemp.reactormaxtemp.int__content) ) /\ ( (result = True) <-> (Submarine__reactortemp.reactortemp.int__content >= Submarine__reactormaxtemp.reactormaxtemp.int__content) ) ) }
  reads {Submarine__reactortemp.reactortemp, Submarine__reactormaxtemp.reactormaxtemp}
 
 axiom checkreactor__post_axiom :
  (forall submarine__reactortemp   submarine__reactormaxtemp   : int [(Submarine__checkreactor.checkreactor submarine__reactortemp submarine__reactormaxtemp)].
   ( ( (Submarine__submarineheat___axiom.dynamic_invariant submarine__reactortemp True True True True) /\ (Submarine__submarineheat___axiom.dynamic_invariant submarine__reactormaxtemp True True True True) ) -> (let result = (Submarine__checkreactor.checkreactor submarine__reactortemp submarine__reactormaxtemp) in (
    (if ((Submarine__checkreactor.checkreactor__function_guard result submarine__reactortemp submarine__reactormaxtemp)) then (
     ( ( true /\ true ) /\ true )) else true)))
    ))
 
 axiom checkreactor__def_axiom :
  (forall submarine__reactortemp   submarine__reactormaxtemp   : int [(Submarine__checkreactor.checkreactor submarine__reactortemp submarine__reactormaxtemp)].
   ( (let result = (Submarine__checkreactor.checkreactor submarine__reactortemp submarine__reactormaxtemp) in (
    (Submarine__checkreactor.checkreactor__function_guard result submarine__reactortemp submarine__reactormaxtemp)))
    -> ( ((Submarine__checkreactor.checkreactor submarine__reactortemp submarine__reactormaxtemp) = True) <-> (submarine__reactortemp >= submarine__reactormaxtemp) ) ))

end

(* Module giving a program function and a defining axiom for the expression function "checkoxygen" defined at submarine.ads:100, created in Gnat2Why.Subprograms.Translate_Expression_Function_Body *)
module Submarine__checkoxygen___axiom
 use        Submarine__oxygenlevel
 use        Submarine__minoxygenlevel
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Submarine__checkoxygen
 use        Submarine__submarineoxygen___axiom
 use        Submarine__oxygenlevel
 use        Submarine__minoxygenlevel

 val checkoxygen 
   (__void_param : unit) : bool
  requires {  true }
  ensures {  ( ( (result = (Submarine__checkoxygen.checkoxygen Submarine__oxygenlevel.oxygenlevel.int__content Submarine__minoxygenlevel.minoxygenlevel.int__content)) /\ (Submarine__checkoxygen.checkoxygen__function_guard result Submarine__oxygenlevel.oxygenlevel.int__content Submarine__minoxygenlevel.minoxygenlevel.int__content) ) /\ ( (result = True) <-> (Submarine__oxygenlevel.oxygenlevel.int__content <= Submarine__minoxygenlevel.minoxygenlevel.int__content) ) ) }
  reads {Submarine__oxygenlevel.oxygenlevel, Submarine__minoxygenlevel.minoxygenlevel}
 
 axiom checkoxygen__post_axiom :
  (forall submarine__oxygenlevel   submarine__minoxygenlevel   : int [(Submarine__checkoxygen.checkoxygen submarine__oxygenlevel submarine__minoxygenlevel)].
   ( ( (Submarine__submarineoxygen___axiom.dynamic_invariant submarine__oxygenlevel True True True True) /\ (Submarine__submarineoxygen___axiom.dynamic_invariant submarine__minoxygenlevel True True True True) ) -> (let result = (Submarine__checkoxygen.checkoxygen submarine__oxygenlevel submarine__minoxygenlevel) in (
    (if ((Submarine__checkoxygen.checkoxygen__function_guard result submarine__oxygenlevel submarine__minoxygenlevel)) then (
     ( ( true /\ true ) /\ true )) else true)))
    ))
 
 axiom checkoxygen__def_axiom :
  (forall submarine__oxygenlevel   submarine__minoxygenlevel   : int [(Submarine__checkoxygen.checkoxygen submarine__oxygenlevel submarine__minoxygenlevel)].
   ( (let result = (Submarine__checkoxygen.checkoxygen submarine__oxygenlevel submarine__minoxygenlevel) in (
    (Submarine__checkoxygen.checkoxygen__function_guard result submarine__oxygenlevel submarine__minoxygenlevel)))
    -> ( ((Submarine__checkoxygen.checkoxygen submarine__oxygenlevel submarine__minoxygenlevel) = True) <-> (submarine__oxygenlevel <= submarine__minoxygenlevel) ) ))

end

(* Module giving a program function and a defining axiom for the expression function "oxygenrunsout" defined at submarine.ads:103, created in Gnat2Why.Subprograms.Translate_Expression_Function_Body *)
module Submarine__oxygenrunsout___axiom
 use        Submarine__emptyoxygen
 use        Submarine__oxygenlevel
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Submarine__oxygenrunsout
 use        Submarine__submarineoxygen___axiom
 use        Submarine__oxygenlevel
 use        Submarine__emptyoxygen

 val oxygenrunsout 
   (__void_param : unit) : bool
  requires {  true }
  ensures {  ( ( (result = (Submarine__oxygenrunsout.oxygenrunsout Submarine__oxygenlevel.oxygenlevel.int__content Submarine__emptyoxygen.emptyoxygen.int__content)) /\ (Submarine__oxygenrunsout.oxygenrunsout__function_guard result Submarine__oxygenlevel.oxygenlevel.int__content Submarine__emptyoxygen.emptyoxygen.int__content) ) /\ ( (result = True) <-> (Submarine__oxygenlevel.oxygenlevel.int__content <= Submarine__emptyoxygen.emptyoxygen.int__content) ) ) }
  reads {Submarine__oxygenlevel.oxygenlevel, Submarine__emptyoxygen.emptyoxygen}
 
 axiom oxygenrunsout__post_axiom :
  (forall submarine__oxygenlevel   submarine__emptyoxygen   : int [(Submarine__oxygenrunsout.oxygenrunsout submarine__oxygenlevel submarine__emptyoxygen)].
   ( ( (Submarine__submarineoxygen___axiom.dynamic_invariant submarine__oxygenlevel True True True True) /\ (Submarine__submarineoxygen___axiom.dynamic_invariant submarine__emptyoxygen True True True True) ) -> (let result = (Submarine__oxygenrunsout.oxygenrunsout submarine__oxygenlevel submarine__emptyoxygen) in (
    (if ((Submarine__oxygenrunsout.oxygenrunsout__function_guard result submarine__oxygenlevel submarine__emptyoxygen)) then (
     ( ( true /\ true ) /\ true )) else true)))
    ))
 
 axiom oxygenrunsout__def_axiom :
  (forall submarine__oxygenlevel   submarine__emptyoxygen   : int [(Submarine__oxygenrunsout.oxygenrunsout submarine__oxygenlevel submarine__emptyoxygen)].
   ( (let result = (Submarine__oxygenrunsout.oxygenrunsout submarine__oxygenlevel submarine__emptyoxygen) in (
    (Submarine__oxygenrunsout.oxygenrunsout__function_guard result submarine__oxygenlevel submarine__emptyoxygen)))
    -> ( ((Submarine__oxygenrunsout.oxygenrunsout submarine__oxygenlevel submarine__emptyoxygen) = True) <-> (submarine__oxygenlevel <= submarine__emptyoxygen) ) ))

end

(* Module giving a program function and a defining axiom for the expression function "checkdepth" defined at submarine.ads:106, created in Gnat2Why.Subprograms.Translate_Expression_Function_Body *)
module Submarine__checkdepth___axiom
 use        Submarine__currentdepth
 use        Submarine__maxdepth
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Submarine__checkdepth
 use        Submarine__submarinedepth___axiom
 use        Submarine__currentdepth
 use        Submarine__maxdepth

 val checkdepth 
   (__void_param : unit) : bool
  requires {  true }
  ensures {  ( ( (result = (Submarine__checkdepth.checkdepth Submarine__currentdepth.currentdepth.int__content Submarine__maxdepth.maxdepth.int__content)) /\ (Submarine__checkdepth.checkdepth__function_guard result Submarine__currentdepth.currentdepth.int__content Submarine__maxdepth.maxdepth.int__content) ) /\ ( (result = True) <-> (Submarine__currentdepth.currentdepth.int__content >= Submarine__maxdepth.maxdepth.int__content) ) ) }
  reads {Submarine__currentdepth.currentdepth, Submarine__maxdepth.maxdepth}
 
 axiom checkdepth__post_axiom :
  (forall submarine__currentdepth   submarine__maxdepth   : int [(Submarine__checkdepth.checkdepth submarine__currentdepth submarine__maxdepth)].
   ( ( (Submarine__submarinedepth___axiom.dynamic_invariant submarine__currentdepth True True True True) /\ (Submarine__submarinedepth___axiom.dynamic_invariant submarine__maxdepth True True True True) ) -> (let result = (Submarine__checkdepth.checkdepth submarine__currentdepth submarine__maxdepth) in (
    (if ((Submarine__checkdepth.checkdepth__function_guard result submarine__currentdepth submarine__maxdepth)) then (
     ( ( true /\ true ) /\ true )) else true)))
    ))
 
 axiom checkdepth__def_axiom :
  (forall submarine__currentdepth   submarine__maxdepth   : int [(Submarine__checkdepth.checkdepth submarine__currentdepth submarine__maxdepth)].
   ( (let result = (Submarine__checkdepth.checkdepth submarine__currentdepth submarine__maxdepth) in (
    (Submarine__checkdepth.checkdepth__function_guard result submarine__currentdepth submarine__maxdepth)))
    -> ( ((Submarine__checkdepth.checkdepth submarine__currentdepth submarine__maxdepth) = True) <-> (submarine__currentdepth >= submarine__maxdepth) ) ))

end

(* Module for declaring a program function (and possibly an axiom) for "displaywarning" defined at submarine.ads:111, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Submarine__displaywarning___axiom
 use        Submarine__oxygenlevel
 use        Submarine__minoxygenlevel
 use import "_gnatprove_standard".Main
 use        Submarine__checkoxygen
 use        Submarine__oxygenlevel
 use        Submarine__minoxygenlevel

 val displaywarning 
   (warningmessage : bool__ref) : unit
  requires {  ( ((epsilon temp___result_226 : bool.
   ( (temp___result_226 = (Submarine__checkoxygen.checkoxygen Submarine__oxygenlevel.oxygenlevel.int__content Submarine__minoxygenlevel.minoxygenlevel.int__content)) /\ (Submarine__checkoxygen.checkoxygen__function_guard temp___result_226 Submarine__oxygenlevel.oxygenlevel.int__content Submarine__minoxygenlevel.minoxygenlevel.int__content) )) = True) /\ ( (warningmessage.bool__content = True) <-> false ) ) }
  ensures {  ( ((epsilon temp___result_227 : bool.
   ( (temp___result_227 = (Submarine__checkoxygen.checkoxygen Submarine__oxygenlevel.oxygenlevel.int__content Submarine__minoxygenlevel.minoxygenlevel.int__content)) /\ (Submarine__checkoxygen.checkoxygen__function_guard temp___result_227 Submarine__oxygenlevel.oxygenlevel.int__content Submarine__minoxygenlevel.minoxygenlevel.int__content) )) = True) /\ ( (warningmessage.bool__content = True) <-> true ) ) }
  reads {Submarine__oxygenlevel.oxygenlevel, Submarine__minoxygenlevel.minoxygenlevel}
  writes {warningmessage}

end

(* Module for declaring a program function (and possibly an axiom) for "oxygensurface" defined at submarine.ads:119, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Submarine__oxygensurface___axiom
 use        Submarine__emptyoxygen
 use        Submarine__reactortemp
 use        Submarine__reactormaxtemp
 use        Submarine__oxygenlevel
 use import "_gnatprove_standard".Main
 use        Submarine__checkreactor
 use        Submarine__oxygenrunsout
 use        Submarine__oxygenlevel
 use        Submarine__emptyoxygen
 use        Submarine__reactortemp
 use        Submarine__reactormaxtemp

 val oxygensurface 
   (surface : bool__ref) : unit
  requires {  ( ( ((epsilon temp___result_228 : bool.
   ( (temp___result_228 = (Submarine__oxygenrunsout.oxygenrunsout Submarine__oxygenlevel.oxygenlevel.int__content Submarine__emptyoxygen.emptyoxygen.int__content)) /\ (Submarine__oxygenrunsout.oxygenrunsout__function_guard temp___result_228 Submarine__oxygenlevel.oxygenlevel.int__content Submarine__emptyoxygen.emptyoxygen.int__content) )) = True) \/ ((epsilon temp___result_229 : bool.
   ( (temp___result_229 = (Submarine__checkreactor.checkreactor Submarine__reactortemp.reactortemp.int__content Submarine__reactormaxtemp.reactormaxtemp.int__content)) /\ (Submarine__checkreactor.checkreactor__function_guard temp___result_229 Submarine__reactortemp.reactortemp.int__content Submarine__reactormaxtemp.reactormaxtemp.int__content) )) = True) ) /\ ( (surface.bool__content = True) <-> false ) ) }
  ensures {  ( ( ((epsilon temp___result_230 : bool.
   ( (temp___result_230 = (Submarine__oxygenrunsout.oxygenrunsout Submarine__oxygenlevel.oxygenlevel.int__content Submarine__emptyoxygen.emptyoxygen.int__content)) /\ (Submarine__oxygenrunsout.oxygenrunsout__function_guard temp___result_230 Submarine__oxygenlevel.oxygenlevel.int__content Submarine__emptyoxygen.emptyoxygen.int__content) )) = True) \/ ((epsilon temp___result_231 : bool.
   ( (temp___result_231 = (Submarine__checkreactor.checkreactor Submarine__reactortemp.reactortemp.int__content Submarine__reactormaxtemp.reactormaxtemp.int__content)) /\ (Submarine__checkreactor.checkreactor__function_guard temp___result_231 Submarine__reactortemp.reactortemp.int__content Submarine__reactormaxtemp.reactormaxtemp.int__content) )) = True) ) /\ ( (surface.bool__content = True) <-> true ) ) }
  reads {Submarine__oxygenlevel.oxygenlevel, Submarine__emptyoxygen.emptyoxygen, Submarine__reactortemp.reactortemp, Submarine__reactormaxtemp.reactormaxtemp}
  writes {surface}

end

(* Module for declaring a program function (and possibly an axiom) for "stopdepth" defined at submarine.ads:126, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Submarine__stopdepth___axiom
 use        Submarine__currentdepth
 use        Submarine__maxdepth
 use import "_gnatprove_standard".Main
 use        Submarine__checkdepth
 use        Submarine__currentdepth
 use        Submarine__maxdepth

 val stopdepth 
   (stopsubdepth : bool__ref) : unit
  requires {  ( ((epsilon temp___result_232 : bool.
   ( (temp___result_232 = (Submarine__checkdepth.checkdepth Submarine__currentdepth.currentdepth.int__content Submarine__maxdepth.maxdepth.int__content)) /\ (Submarine__checkdepth.checkdepth__function_guard temp___result_232 Submarine__currentdepth.currentdepth.int__content Submarine__maxdepth.maxdepth.int__content) )) = True) /\ ( (stopsubdepth.bool__content = True) <-> false ) ) }
  ensures {  ( ((epsilon temp___result_233 : bool.
   ( (temp___result_233 = (Submarine__checkdepth.checkdepth Submarine__currentdepth.currentdepth.int__content Submarine__maxdepth.maxdepth.int__content)) /\ (Submarine__checkdepth.checkdepth__function_guard temp___result_233 Submarine__currentdepth.currentdepth.int__content Submarine__maxdepth.maxdepth.int__content) )) = True) /\ ( (stopsubdepth.bool__content = True) <-> true ) ) }
  reads {Submarine__currentdepth.currentdepth, Submarine__maxdepth.maxdepth}
  writes {stopsubdepth}

end

(* Module for declaring a program function (and possibly an axiom) for "firetorpedo" defined at submarine.ads:142, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Submarine__firetorpedo___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Submarine__box
 use        Submarine__box__rep
 use        Array__Int__Submarine__box
 use        Submarine__torpedos___axiom
 use        Array__Int__Submarine__box

 val firetorpedo 
   (d : Array__Int__Submarine__box.map__ref) (fired : bool__ref) : unit
  requires {  ( ( (fired.bool__content = True) <-> true ) /\ (forall j   "model" "model_trace:3581" "name:J"  : int.
   ( ( (0 <= j) /\ (j <= 1) ) -> ((Submarine__box__rep.to_rep (Array__Int__Submarine__box.get d.Array__Int__Submarine__box.map__content j)) = 0) )) ) }
  ensures {  ( ( (forall j   "model" "name:J" "model_trace:3600"  : int.
   ( ( (0 <= j) /\ (j <= 1) ) -> ((Submarine__box__rep.to_rep (Array__Int__Submarine__box.get d.Array__Int__Submarine__box.map__content j)) <> 0) )) /\ ( (fired.bool__content = True) <-> false ) ) /\ (Submarine__torpedos___axiom.dynamic_invariant d.Array__Int__Submarine__box.map__content True True True True) ) }
  writes {d, fired}

end

(* Module for declaring a program function (and possibly an axiom) for "loadtorpedo" defined at submarine.ads:146, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Submarine__loadtorpedo___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Submarine__box
 use        Submarine__box__rep
 use        Array__Int__Submarine__box
 use        Submarine__torpedos___axiom
 use        Array__Int__Submarine__box

 val loadtorpedo 
   (load : bool__ref) (d : Array__Int__Submarine__box.map__ref) : unit
  requires {  ( ( (load.bool__content = True) <-> true ) /\ (forall j   "model" "name:J" "model_trace:3655"  : int.
   ( ( (0 <= j) /\ (j <= 1) ) -> ((Submarine__box__rep.to_rep (Array__Int__Submarine__box.get d.Array__Int__Submarine__box.map__content j)) = 2) )) ) }
  ensures {  ( ( (forall j   "model" "name:J" "model_trace:3674"  : int.
   ( ( (0 <= j) /\ (j <= 1) ) -> ((Submarine__box__rep.to_rep (Array__Int__Submarine__box.get d.Array__Int__Submarine__box.map__content j)) = 0) )) /\ ( (load.bool__content = True) <-> false ) ) /\ (Submarine__torpedos___axiom.dynamic_invariant d.Array__Int__Submarine__box.map__content True True True True) ) }
  writes {load, d}

end

(* Module for declaring a program function (and possibly an axiom) for "storetorpedo" defined at submarine.ads:150, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Submarine__storetorpedo___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Submarine__box
 use        Submarine__box__rep
 use        Array__Int__Submarine__box
 use        Submarine__torpedos___axiom
 use        Array__Int__Submarine__box

 val storetorpedo 
   (store : bool__ref) (d : Array__Int__Submarine__box.map__ref) : unit
  requires {  ( ( (store.bool__content = True) <-> true ) /\ (forall j   "model" "name:J" "model_trace:3729"  : int.
   ( ( (0 <= j) /\ (j <= 1) ) -> ((Submarine__box__rep.to_rep (Array__Int__Submarine__box.get d.Array__Int__Submarine__box.map__content j)) = 1) )) ) }
  ensures {  ( ( (forall j   "model" "name:J" "model_trace:3748"  : int.
   ( ( (0 <= j) /\ (j <= 1) ) -> ((Submarine__box__rep.to_rep (Array__Int__Submarine__box.get d.Array__Int__Submarine__box.map__content j)) = 2) )) /\ ( (store.bool__content = True) <-> false ) ) /\ (Submarine__torpedos___axiom.dynamic_invariant d.Array__Int__Submarine__box.map__content True True True True) ) }
  writes {store, d}

end

(* Module for checking absence of run-time errors and package initial condition on package elaboration of "submarine" defined at submarine.ads:1, created in Gnat2Why.Subprograms.Generate_VCs_For_Package_Elaboration *)
module Submarine__package_def
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Submarine__submarineoperation
 use        Submarine__submarineoperation__rep
 use        Submarine__submarinestatus
 use        Submarine__submarinestatus__rep
 use        Submarine__submarine
 use        Submarine__submarine___axiom
 use        Submarine__nuclearsubmarine
 use        Submarine__lockedunlocked
 use        Submarine__lockedunlocked__rep
 use        Submarine__openclosed
 use        Submarine__openclosed__rep
 use        Submarine__door
 use        Submarine__door___axiom
 use        Submarine__door1
 use        Submarine__door2
 use        Submarine__submarineoxygen___axiom
 use        Submarine__oxygenlevel
 use        Submarine__minoxygenlevel
 use        Submarine__emptyoxygen
 use        Submarine__submarineheat___axiom
 use        Submarine__reactortemp
 use        Submarine__reactormaxtemp
 use        Submarine__submarinedepth___axiom
 use        Submarine__currentdepth
 use        Submarine__maxdepth
 use        Submarine__submarineoperation___axiom
 use        Submarine__submarinestatus___axiom
 use        Submarine__submarine___axiom
 use        Submarine__nuclearsubmarine___axiom
 use        Submarine__lockedunlocked___axiom
 use        Submarine__openclosed___axiom
 use        Submarine__door___axiom
 use        Submarine__door1___axiom
 use        Submarine__door2___axiom
 use        Submarine__submarineoxygen___axiom
 use        Submarine__oxygenlevel___axiom
 use        Submarine__minoxygenlevel___axiom
 use        Submarine__emptyoxygen___axiom
 use        Submarine__submarineheat___axiom
 use        Submarine__reactortemp___axiom
 use        Submarine__reactormaxtemp___axiom
 use        Submarine__submarinedepth___axiom
 use        Submarine__currentdepth___axiom
 use        Submarine__maxdepth___axiom

 let def #"submarine.ads" 1 0 0#"GP_Subp:submarine.ads:1" "W:diverges:N" 
   (__void_param : unit)
  requires { #"submarine.ads" 1 0 0# true }
  ensures { #"submarine.ads" 1 0 0# true }
   =
  ( (#"submarine.ads" 1 0 0# ());
  (#"submarine.ads" 8 0 0# ());
  (#"submarine.ads" 9 0 0# ());
  (#"submarine.ads" 14 0 0# ());
  (#"submarine.ads" 21 0 0# ());
  (#"submarine.ads" 21 0 0# ());
  (#"submarine.ads" 21 0 0# ());
  (#"submarine.ads" 21 0 0# ( (let submarine__nuclearsubmarine__assume = { Submarine__submarine.__split_fields = { Submarine__submarine.rec__submarine__submarine__operating = (Submarine__submarineoperation__rep.of_rep(1)); Submarine__submarine.rec__submarine__submarine__statusinwater = (Submarine__submarinestatus__rep.of_rep(1)) } } in (
   #"submarine.ads" 21 0 0# Submarine__nuclearsubmarine.nuclearsubmarine__split_fields.Submarine__submarine.__split_fields__content <- ( (Submarine__submarine.__split_fields(submarine__nuclearsubmarine__assume)) )))
  ;
  #"submarine.ads" 21 0 0# assume { #"submarine.ads" 21 0 0# (Submarine__submarine___axiom.dynamic_invariant { Submarine__submarine.__split_fields = Submarine__nuclearsubmarine.nuclearsubmarine__split_fields.Submarine__submarine.__split_fields__content } True False True True) } ));
  (#"submarine.ads" 28 0 0# ());
  (#"submarine.ads" 32 0 0# ());
  (#"submarine.ads" 35 0 0# ());
  (#"submarine.ads" 41 0 0# ());
  (#"submarine.ads" 41 0 0# ());
  (#"submarine.ads" 41 0 0# ());
  (#"submarine.ads" 41 0 0# ( (let submarine__door1__assume = { Submarine__door.__split_fields = { Submarine__door.rec__submarine__door__lock = (Submarine__lockedunlocked__rep.of_rep(1)); Submarine__door.rec__submarine__door__status = (Submarine__openclosed__rep.of_rep(0)) } } in (
   #"submarine.ads" 41 0 0# Submarine__door1.door1__split_fields.Submarine__door.__split_fields__content <- ( (Submarine__door.__split_fields(submarine__door1__assume)) )))
  ;
  #"submarine.ads" 41 0 0# assume { #"submarine.ads" 41 0 0# (Submarine__door___axiom.dynamic_invariant { Submarine__door.__split_fields = Submarine__door1.door1__split_fields.Submarine__door.__split_fields__content } True False True True) } ));
  (#"submarine.ads" 42 0 0# ( (let submarine__door2__assume = { Submarine__door.__split_fields = { Submarine__door.rec__submarine__door__lock = (Submarine__lockedunlocked__rep.of_rep(1)); Submarine__door.rec__submarine__door__status = (Submarine__openclosed__rep.of_rep(0)) } } in (
   #"submarine.ads" 42 0 0# Submarine__door2.door2__split_fields.Submarine__door.__split_fields__content <- ( (Submarine__door.__split_fields(submarine__door2__assume)) )))
  ;
  #"submarine.ads" 42 0 0# assume { #"submarine.ads" 42 0 0# (Submarine__door___axiom.dynamic_invariant { Submarine__door.__split_fields = Submarine__door2.door2__split_fields.Submarine__door.__split_fields__content } True False True True) } ));
  (#"submarine.ads" 45 0 0# ());
  (#"submarine.ads" 49 0 0# ());
  (#"submarine.ads" 52 0 0# ());
  (#"submarine.ads" 51 0 0# ());
  (#"submarine.ads" 50 0 0# ());
  (#"submarine.ads" 53 0 0# ());
  (#"submarine.ads" 56 0 0# ());
  (#"submarine.ads" 55 0 0# ());
  (#"submarine.ads" 54 0 0# ());
  (#"submarine.ads" 59 0 0# ());
  (#"submarine.ads" 62 0 0# ());
  (#"submarine.ads" 61 0 0# ());
  (#"submarine.ads" 60 0 0# ());
  (#"submarine.ads" 63 0 0# ());
  (#"submarine.ads" 66 0 0# ());
  (#"submarine.ads" 65 0 0# ());
  (#"submarine.ads" 64 0 0# ());
  (#"submarine.ads" 69 0 0# ());
  (#"submarine.ads" 73 0 0# ());
  (#"submarine.ads" 76 0 0# ());
  (#"submarine.ads" 75 0 0# ());
  (#"submarine.ads" 74 0 0# ());
  (#"submarine.ads" 82 0 0# ());
  (#"submarine.ads" 83 0 0# ());
  (#"submarine.ads" 83 0 0# ());
  (#"submarine.ads" 83 0 0# ( #"submarine.ads" 83 0 0# Submarine__oxygenlevel.oxygenlevel.int__content <- ( 20 );
  #"submarine.ads" 83 0 0# assume { #"submarine.ads" 83 0 0# (Submarine__submarineoxygen___axiom.dynamic_invariant Submarine__oxygenlevel.oxygenlevel.int__content True False True True) } ));
  (#"submarine.ads" 84 0 0# ( #"submarine.ads" 84 0 0# Submarine__minoxygenlevel.minoxygenlevel.int__content <- ( 10 );
  #"submarine.ads" 84 0 0# assume { #"submarine.ads" 84 0 0# (Submarine__submarineoxygen___axiom.dynamic_invariant Submarine__minoxygenlevel.minoxygenlevel.int__content True False True True) } ));
  (#"submarine.ads" 85 0 0# ( #"submarine.ads" 85 0 0# Submarine__emptyoxygen.emptyoxygen.int__content <- ( 0 );
  #"submarine.ads" 85 0 0# assume { #"submarine.ads" 85 0 0# (Submarine__submarineoxygen___axiom.dynamic_invariant Submarine__emptyoxygen.emptyoxygen.int__content True False True True) } ));
  (#"submarine.ads" 89 0 0# ());
  (#"submarine.ads" 90 0 0# ());
  (#"submarine.ads" 90 0 0# ());
  (#"submarine.ads" 90 0 0# ( #"submarine.ads" 90 0 0# Submarine__reactortemp.reactortemp.int__content <- ( 20 );
  #"submarine.ads" 90 0 0# assume { #"submarine.ads" 90 0 0# (Submarine__submarineheat___axiom.dynamic_invariant Submarine__reactortemp.reactortemp.int__content True False True True) } ));
  (#"submarine.ads" 91 0 0# ( #"submarine.ads" 91 0 0# Submarine__reactormaxtemp.reactormaxtemp.int__content <- ( 100 );
  #"submarine.ads" 91 0 0# assume { #"submarine.ads" 91 0 0# (Submarine__submarineheat___axiom.dynamic_invariant Submarine__reactormaxtemp.reactormaxtemp.int__content True False True True) } ));
  (#"submarine.ads" 93 0 0# ());
  (#"submarine.ads" 94 0 0# ());
  (#"submarine.ads" 94 0 0# ());
  (#"submarine.ads" 94 0 0# ( #"submarine.ads" 94 0 0# abstract ensures {true}(let _ = () in (
   ()))
   end ;
  #"submarine.ads" 94 0 0# assume { #"submarine.ads" 94 0 0# (Submarine__submarinedepth___axiom.default_initial_assumption Submarine__currentdepth.currentdepth.int__content False) };
  #"submarine.ads" 94 0 0# assume { #"submarine.ads" 94 0 0# (Submarine__submarinedepth___axiom.dynamic_invariant Submarine__currentdepth.currentdepth.int__content False False True True) } ));
  (#"submarine.ads" 95 0 0# ( #"submarine.ads" 95 0 0# abstract ensures {true}(let _ = () in (
   ()))
   end ;
  #"submarine.ads" 95 0 0# assume { #"submarine.ads" 95 0 0# (Submarine__submarinedepth___axiom.default_initial_assumption Submarine__maxdepth.maxdepth.int__content False) };
  #"submarine.ads" 95 0 0# assume { #"submarine.ads" 95 0 0# (Submarine__submarinedepth___axiom.dynamic_invariant Submarine__maxdepth.maxdepth.int__content False False True True) } ));
  (#"submarine.ads" 97 0 0# ());
  (#"submarine.ads" 100 0 0# ());
  (#"submarine.ads" 103 0 0# ());
  (#"submarine.ads" 106 0 0# ());
  (#"submarine.ads" 111 0 0# ());
  (#"submarine.ads" 115 0 0# ());
  (#"submarine.ads" 115 0 0# ());
  (#"submarine.ads" 114 0 0# ());
  (#"submarine.ads" 114 0 0# ());
  (#"submarine.ads" 113 0 0# ());
  (#"submarine.ads" 119 0 0# ());
  (#"submarine.ads" 123 0 0# ());
  (#"submarine.ads" 123 0 0# ());
  (#"submarine.ads" 122 0 0# ());
  (#"submarine.ads" 122 0 0# ());
  (#"submarine.ads" 121 0 0# ());
  (#"submarine.ads" 126 0 0# ());
  (#"submarine.ads" 130 0 0# ());
  (#"submarine.ads" 130 0 0# ());
  (#"submarine.ads" 129 0 0# ());
  (#"submarine.ads" 129 0 0# ());
  (#"submarine.ads" 128 0 0# ());
  (#"submarine.ads" 136 0 0# ());
  (#"submarine.ads" 137 0 0# ());
  (#"submarine.ads" 139 0 0# ());
  (#"submarine.ads" 142 0 0# ());
  (#"submarine.ads" 144 0 0# ());
  (#"submarine.ads" 144 0 0# ());
  (#"submarine.ads" 143 0 0# ());
  (#"submarine.ads" 143 0 0# ());
  (#"submarine.ads" 146 0 0# ());
  (#"submarine.ads" 148 0 0# ());
  (#"submarine.ads" 148 0 0# ());
  (#"submarine.ads" 147 0 0# ());
  (#"submarine.ads" 147 0 0# ());
  (#"submarine.ads" 150 0 0# ());
  (#"submarine.ads" 152 0 0# ());
  (#"submarine.ads" 152 0 0# ());
  (#"submarine.ads" 151 0 0# ());
  (#"submarine.ads" 151 0 0# ());
  (#"submarine.ads" 151 0 0# ());
  (#"submarine.ads" 151 0 0# ());
  (#"submarine.ads" 151 0 0# ());
  (#"submarine.ads" 151 0 0# ());
  (#"submarine.ads" 151 0 0# ());
  (#"submarine.ads" 151 0 0# ());
  (#"submarine.ads" 151 0 0# ());
  (#"submarine.ads" 45 0 0# ());
  (#"submarine.ads" 69 0 0# ());
  (#"submarine.ads" 97 0 0# ());
  (#"submarine.ads" 100 0 0# ());
  (#"submarine.ads" 103 0 0# ());
  (#"submarine.ads" 106 0 0# ());
  (#"submarine.adb" 2 0 0# ());
  (#"submarine.adb" 6 0 0# ());
  (#"submarine.adb" 12 0 0# ());
  (#"submarine.adb" 18 0 0# ());
  (#"submarine.adb" 24 0 0# ());
  (#"submarine.adb" 30 0 0# ());
  (#"submarine.adb" 35 0 0# ());
  (#"submarine.adb" 40 0 0# ());
  (#"submarine.adb" 45 0 0# ());
  (#"submarine.adb" 54 0 0# ());
  (#"submarine.adb" 68 0 0# ());
  (#"submarine.adb" 82 0 0# ());
  ( "GP_Sloc:submarine.adb:98:1" (#"submarine.adb" 98 0 0# ()) ) )
end

(* Module for checking contracts and absence of run-time errors in subprogram "airlocks" defined at submarine.ads:45, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Submarine__airlocks__subprogram_def
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        Submarine__openclosed
 use        Submarine__openclosed__rep
 use        Submarine__door
 use        Submarine__door___axiom
 use        Submarine__door1
 use        Submarine__door2
 use        Submarine__lockedunlocked___axiom
 use        Submarine__openclosed___axiom
 use        Submarine__door___axiom
 use        Submarine__door1___axiom
 use        Submarine__door2___axiom

 val submarine__airlocks__result "model_projected" "model_trace:2981@result" "name:airlocks"  : bool__ref 
 
 let def #"submarine.ads" 45 0 0#"W:diverges:N" "GP_Subp:submarine.ads:45" 
   (__void_param : unit)
  requires { #"submarine.ads" 45 0 0# true }
  ensures { #"submarine.ads" 45 0 0# true }
   =
  ( () (* Assume dynamic invariants of inputs of the subprogram submarine.ads:45 *)
  ;
  #"submarine.ads" 45 0 0# assume { #"submarine.ads" 45 0 0# (Submarine__door___axiom.dynamic_invariant { Submarine__door.__split_fields = Submarine__door1.door1__split_fields.Submarine__door.__split_fields__content } True False True True) };
  #"submarine.ads" 45 0 0# assume { #"submarine.ads" 45 0 0# (Submarine__door___axiom.dynamic_invariant { Submarine__door.__split_fields = Submarine__door2.door2__split_fields.Submarine__door.__split_fields__content } True False True True) };
  #"submarine.ads" 45 0 0# assume { #"submarine.ads" 45 0 0# true };
  () (* Declarations introduced by the compiler at the beginning of the subprogram submarine.ads:45 *)
  ;
  () (* Check for RTE in the Pre of the subprogram submarine.ads:45 *)
  ;
  #"submarine.ads" 45 0 0# abstract ensures {true}(let _ = True in (
   ()))
   end ;
  () (* Assume Pre of the subprogram submarine.ads:45 *)
  ;
  #"submarine.ads" 45 0 0# assume { #"submarine.ads" 45 0 0# true };
  #"submarine.ads" 45 0 0# try
   ( ( "GP_Sloc:submarine.ads:46:30" (#"submarine.ads" 46 0 0# ( #"submarine.ads" 46 0 0# submarine__airlocks__result.bool__content <- ( (Boolean.orb(((Submarine__openclosed__rep.to_rep((Submarine__door.rec__submarine__door__status((Submarine__door.__split_fields({ Submarine__door.__split_fields = Submarine__door1.door1__split_fields.Submarine__door.__split_fields__content })))))) = 1)) (((Submarine__openclosed__rep.to_rep((Submarine__door.rec__submarine__door__status((Submarine__door.__split_fields({ Submarine__door.__split_fields = Submarine__door2.door2__split_fields.Submarine__door.__split_fields__content })))))) = 1))) );
   #"submarine.ads" 46 0 0# raise Return__exc )) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   abstract ensures {true}(let _ = True in (
   ()))
   end ;
  submarine__airlocks__result.bool__content )
end

(* Module for checking contracts and absence of run-time errors in subprogram "lockdoor1" defined at submarine.ads:49, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Submarine__lockdoor1__subprogram_def
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        Submarine__lockedunlocked
 use        Submarine__lockedunlocked__rep
 use        Submarine__openclosed
 use        Submarine__openclosed__rep
 use        Submarine__door
 use        Submarine__door___axiom
 use        Submarine__door1
 use        Submarine__lockedunlocked___axiom
 use        Submarine__openclosed___axiom
 use        Submarine__door___axiom
 use        Submarine__door1___axiom

 let def #"submarine.ads" 49 0 0#"W:diverges:N" "GP_Subp:submarine.ads:49" 
   (__void_param : unit)
  requires { #"submarine.ads" 49 0 0# true }
  ensures { #"submarine.ads" 49 0 0# (#"submarine.ads" 52 0 0# ( "model_vc_post" "keep_on_simp" "GP_Sloc:submarine.ads:52:14" "GP_Reason:VC_POSTCONDITION" "GP_Id:0" "comment:     Post => Door1.status = Closed and Door1.lock = Locked;
             ^ submarine.ads:52:14:VC_POSTCONDITION" "GP_Shape:pragargs__and" ( ( "GP_Pretty_Ada:3032" "GP_Sloc:submarine.ads:52:14" ((Submarine__openclosed__rep.to_rep (Submarine__door.rec__submarine__door__status (Submarine__door.__split_fields { Submarine__door.__split_fields = Submarine__door1.door1__split_fields.Submarine__door.__split_fields__content }))) = 1) ) /\ ( "GP_Pretty_Ada:3038" "GP_Sloc:submarine.ads:52:40" ((Submarine__lockedunlocked__rep.to_rep (Submarine__door.rec__submarine__door__lock (Submarine__door.__split_fields { Submarine__door.__split_fields = Submarine__door1.door1__split_fields.Submarine__door.__split_fields__content }))) = 0) ) ) )) }
   =
  ( () (* Assume dynamic invariants of inputs of the subprogram submarine.ads:49 *)
  ;
   assume {  (Submarine__door___axiom.dynamic_invariant { Submarine__door.__split_fields = Submarine__door1.door1__split_fields.Submarine__door.__split_fields__content } True False True True) };
   assume {  true };
  () (* Declarations introduced by the compiler at the beginning of the subprogram submarine.ads:49 *)
  ;
  () (* Check for RTE in the Pre of the subprogram submarine.ads:49 *)
  ;
   abstract ensures {true}(let _ = ((Submarine__openclosed__rep.to_rep((Submarine__door.rec__submarine__door__status((Submarine__door.__split_fields({ Submarine__door.__split_fields = Submarine__door1.door1__split_fields.Submarine__door.__split_fields__content })))))) = 1) in (
   ()))
   end ;
  () (* Assume Pre of the subprogram submarine.ads:49 *)
  ;
   assume {  ((Submarine__openclosed__rep.to_rep (Submarine__door.rec__submarine__door__status (Submarine__door.__split_fields { Submarine__door.__split_fields = Submarine__door1.door1__split_fields.Submarine__door.__split_fields__content }))) = 1) };
   try
   ( ( "GP_Sloc:submarine.adb:8:7" (#"submarine.adb" 8 0 0# ()) );
   ( "GP_Sloc:submarine.adb:8:20" (#"submarine.adb" 8 0 0# (let temp___265 = (let temp___264 = { Submarine__door.__split_fields = Submarine__door1.door1__split_fields.Submarine__door.__split_fields__content } in (
    ( #"submarine.adb" 8 0 0# abstract ensures {true}(let _ = (Submarine__door.rec__submarine__door__status((Submarine__door.__split_fields(temp___264)))) in (
     ()))
     end ;
    { ( temp___264 ) with Submarine__door.__split_fields = { ( (Submarine__door.__split_fields(temp___264)) ) with Submarine__door.rec__submarine__door__status = (Submarine__openclosed__rep.of_rep(1)) } } )))
    in (
    #"submarine.adb" 8 0 0# Submarine__door1.door1__split_fields.Submarine__door.__split_fields__content <- ( (Submarine__door.__split_fields(temp___265)) )))
   ) );
   ( "GP_Sloc:submarine.adb:9:7" (#"submarine.adb" 9 0 0# ()) );
   ( "GP_Sloc:submarine.adb:9:18" (#"submarine.adb" 9 0 0# (let temp___267 = (let temp___266 = { Submarine__door.__split_fields = Submarine__door1.door1__split_fields.Submarine__door.__split_fields__content } in (
    ( #"submarine.adb" 9 0 0# abstract ensures {true}(let _ = (Submarine__door.rec__submarine__door__lock((Submarine__door.__split_fields(temp___266)))) in (
     ()))
     end ;
    { ( temp___266 ) with Submarine__door.__split_fields = { ( (Submarine__door.__split_fields(temp___266)) ) with Submarine__door.rec__submarine__door__lock = (Submarine__lockedunlocked__rep.of_rep(0)) } } )))
    in (
    #"submarine.adb" 9 0 0# Submarine__door1.door1__split_fields.Submarine__door.__split_fields__content <- ( (Submarine__door.__split_fields(temp___267)) )))
   ) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   abstract ensures {true}(let _ = (Boolean.andb(((Submarine__openclosed__rep.to_rep((Submarine__door.rec__submarine__door__status((Submarine__door.__split_fields({ Submarine__door.__split_fields = Submarine__door1.door1__split_fields.Submarine__door.__split_fields__content })))))) = 1)) (((Submarine__lockedunlocked__rep.to_rep((Submarine__door.rec__submarine__door__lock((Submarine__door.__split_fields({ Submarine__door.__split_fields = Submarine__door1.door1__split_fields.Submarine__door.__split_fields__content })))))) = 0))) in (
   ()))
   end  )
end

(* Module for checking contracts and absence of run-time errors in subprogram "lockdoor2" defined at submarine.ads:53, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Submarine__lockdoor2__subprogram_def
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        Submarine__lockedunlocked
 use        Submarine__lockedunlocked__rep
 use        Submarine__openclosed
 use        Submarine__openclosed__rep
 use        Submarine__door
 use        Submarine__door___axiom
 use        Submarine__door2
 use        Submarine__lockedunlocked___axiom
 use        Submarine__openclosed___axiom
 use        Submarine__door___axiom
 use        Submarine__door2___axiom

 let def #"submarine.ads" 53 0 0#"W:diverges:N" "GP_Subp:submarine.ads:53" 
   (__void_param : unit)
  requires { #"submarine.ads" 53 0 0# true }
  ensures { #"submarine.ads" 53 0 0# (#"submarine.ads" 56 0 0# ( "model_vc_post" "keep_on_simp" "GP_Reason:VC_POSTCONDITION" "GP_Shape:pragargs__and" "GP_Sloc:submarine.ads:56:14" "GP_Id:1" "comment:     Post => Door2.status = Closed and Door2.lock = Locked;
             ^ submarine.ads:56:14:VC_POSTCONDITION" ( ( "GP_Pretty_Ada:3069" "GP_Sloc:submarine.ads:56:14" ((Submarine__openclosed__rep.to_rep (Submarine__door.rec__submarine__door__status (Submarine__door.__split_fields { Submarine__door.__split_fields = Submarine__door2.door2__split_fields.Submarine__door.__split_fields__content }))) = 1) ) /\ ( "GP_Pretty_Ada:3075" "GP_Sloc:submarine.ads:56:40" ((Submarine__lockedunlocked__rep.to_rep (Submarine__door.rec__submarine__door__lock (Submarine__door.__split_fields { Submarine__door.__split_fields = Submarine__door2.door2__split_fields.Submarine__door.__split_fields__content }))) = 0) ) ) )) }
   =
  ( () (* Assume dynamic invariants of inputs of the subprogram submarine.ads:53 *)
  ;
   assume {  (Submarine__door___axiom.dynamic_invariant { Submarine__door.__split_fields = Submarine__door2.door2__split_fields.Submarine__door.__split_fields__content } True False True True) };
   assume {  true };
  () (* Declarations introduced by the compiler at the beginning of the subprogram submarine.ads:53 *)
  ;
  () (* Check for RTE in the Pre of the subprogram submarine.ads:53 *)
  ;
   abstract ensures {true}(let _ = ((Submarine__openclosed__rep.to_rep((Submarine__door.rec__submarine__door__status((Submarine__door.__split_fields({ Submarine__door.__split_fields = Submarine__door2.door2__split_fields.Submarine__door.__split_fields__content })))))) = 1) in (
   ()))
   end ;
  () (* Assume Pre of the subprogram submarine.ads:53 *)
  ;
   assume {  ((Submarine__openclosed__rep.to_rep (Submarine__door.rec__submarine__door__status (Submarine__door.__split_fields { Submarine__door.__split_fields = Submarine__door2.door2__split_fields.Submarine__door.__split_fields__content }))) = 1) };
   try
   ( ( "GP_Sloc:submarine.adb:14:7" (#"submarine.adb" 14 0 0# ()) );
   ( "GP_Sloc:submarine.adb:14:20" (#"submarine.adb" 14 0 0# (let temp___269 = (let temp___268 = { Submarine__door.__split_fields = Submarine__door2.door2__split_fields.Submarine__door.__split_fields__content } in (
    ( #"submarine.adb" 14 0 0# abstract ensures {true}(let _ = (Submarine__door.rec__submarine__door__status((Submarine__door.__split_fields(temp___268)))) in (
     ()))
     end ;
    { ( temp___268 ) with Submarine__door.__split_fields = { ( (Submarine__door.__split_fields(temp___268)) ) with Submarine__door.rec__submarine__door__status = (Submarine__openclosed__rep.of_rep(1)) } } )))
    in (
    #"submarine.adb" 14 0 0# Submarine__door2.door2__split_fields.Submarine__door.__split_fields__content <- ( (Submarine__door.__split_fields(temp___269)) )))
   ) );
   ( "GP_Sloc:submarine.adb:15:7" (#"submarine.adb" 15 0 0# ()) );
   ( "GP_Sloc:submarine.adb:15:18" (#"submarine.adb" 15 0 0# (let temp___271 = (let temp___270 = { Submarine__door.__split_fields = Submarine__door2.door2__split_fields.Submarine__door.__split_fields__content } in (
    ( #"submarine.adb" 15 0 0# abstract ensures {true}(let _ = (Submarine__door.rec__submarine__door__lock((Submarine__door.__split_fields(temp___270)))) in (
     ()))
     end ;
    { ( temp___270 ) with Submarine__door.__split_fields = { ( (Submarine__door.__split_fields(temp___270)) ) with Submarine__door.rec__submarine__door__lock = (Submarine__lockedunlocked__rep.of_rep(0)) } } )))
    in (
    #"submarine.adb" 15 0 0# Submarine__door2.door2__split_fields.Submarine__door.__split_fields__content <- ( (Submarine__door.__split_fields(temp___271)) )))
   ) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   abstract ensures {true}(let _ = (Boolean.andb(((Submarine__openclosed__rep.to_rep((Submarine__door.rec__submarine__door__status((Submarine__door.__split_fields({ Submarine__door.__split_fields = Submarine__door2.door2__split_fields.Submarine__door.__split_fields__content })))))) = 1)) (((Submarine__lockedunlocked__rep.to_rep((Submarine__door.rec__submarine__door__lock((Submarine__door.__split_fields({ Submarine__door.__split_fields = Submarine__door2.door2__split_fields.Submarine__door.__split_fields__content })))))) = 0))) in (
   ()))
   end  )
end

(* Module for checking contracts and absence of run-time errors in subprogram "opendoor2" defined at submarine.ads:59, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Submarine__opendoor2__subprogram_def
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        Submarine__airlocks
 use        Submarine__airlocks___axiom
 use        Submarine__lockedunlocked
 use        Submarine__lockedunlocked__rep
 use        Submarine__openclosed
 use        Submarine__openclosed__rep
 use        Submarine__door
 use        Submarine__door___axiom
 use        Submarine__door1
 use        Submarine__door2
 use        Submarine__lockedunlocked___axiom
 use        Submarine__openclosed___axiom
 use        Submarine__door___axiom
 use        Submarine__door1___axiom
 use        Submarine__door2___axiom
 use        Submarine__airlocks___axiom

 let def #"submarine.ads" 59 0 0#"W:diverges:N" "GP_Subp:submarine.ads:59" 
   (__void_param : unit)
  requires { #"submarine.ads" 59 0 0# true }
  ensures { #"submarine.ads" 59 0 0# (#"submarine.ads" 62 0 0# ( "model_vc_post" "keep_on_simp" "GP_Reason:VC_POSTCONDITION" "GP_Sloc:submarine.ads:62:14" "GP_Id:2" "comment:     Post => airlocks;
             ^ submarine.ads:62:14:VC_POSTCONDITION" "GP_Shape:pragargs__call_airlocks" ( "GP_Pretty_Ada:3969" "GP_Sloc:submarine.ads:62:14" ((epsilon temp___result_276 : bool.
   ( (temp___result_276 = (Submarine__airlocks.airlocks Submarine__door1.door1__split_fields.Submarine__door.__split_fields__content Submarine__door2.door2__split_fields.Submarine__door.__split_fields__content)) /\ (Submarine__airlocks.airlocks__function_guard temp___result_276 Submarine__door1.door1__split_fields.Submarine__door.__split_fields__content Submarine__door2.door2__split_fields.Submarine__door.__split_fields__content) )) = True) ) )) }
   =
  ( () (* Assume dynamic invariants of inputs of the subprogram submarine.ads:59 *)
  ;
   assume {  (Submarine__door___axiom.dynamic_invariant { Submarine__door.__split_fields = Submarine__door1.door1__split_fields.Submarine__door.__split_fields__content } True False True True) };
   assume {  (Submarine__door___axiom.dynamic_invariant { Submarine__door.__split_fields = Submarine__door2.door2__split_fields.Submarine__door.__split_fields__content } True False True True) };
   assume {  true };
  () (* Declarations introduced by the compiler at the beginning of the subprogram submarine.ads:59 *)
  ;
  () (* Check for RTE in the Pre of the subprogram submarine.ads:59 *)
  ;
   abstract ensures {true}(let _ = (Boolean.andb(((Submarine__openclosed__rep.to_rep((Submarine__door.rec__submarine__door__status((Submarine__door.__split_fields({ Submarine__door.__split_fields = Submarine__door1.door1__split_fields.Submarine__door.__split_fields__content })))))) = 1)) (((Submarine__lockedunlocked__rep.to_rep((Submarine__door.rec__submarine__door__lock((Submarine__door.__split_fields({ Submarine__door.__split_fields = Submarine__door2.door2__split_fields.Submarine__door.__split_fields__content })))))) = 1))) in (
   ()))
   end ;
  () (* Assume Pre of the subprogram submarine.ads:59 *)
  ;
   assume {  ( ((Submarine__openclosed__rep.to_rep (Submarine__door.rec__submarine__door__status (Submarine__door.__split_fields { Submarine__door.__split_fields = Submarine__door1.door1__split_fields.Submarine__door.__split_fields__content }))) = 1) /\ ((Submarine__lockedunlocked__rep.to_rep (Submarine__door.rec__submarine__door__lock (Submarine__door.__split_fields { Submarine__door.__split_fields = Submarine__door2.door2__split_fields.Submarine__door.__split_fields__content }))) = 1) ) };
   try
   ( ( "GP_Sloc:submarine.adb:20:7" (#"submarine.adb" 20 0 0# ()) );
   ( "GP_Sloc:submarine.adb:20:20" (#"submarine.adb" 20 0 0# (let temp___273 = (let temp___272 = { Submarine__door.__split_fields = Submarine__door1.door1__split_fields.Submarine__door.__split_fields__content } in (
    ( #"submarine.adb" 20 0 0# abstract ensures {true}(let _ = (Submarine__door.rec__submarine__door__status((Submarine__door.__split_fields(temp___272)))) in (
     ()))
     end ;
    { ( temp___272 ) with Submarine__door.__split_fields = { ( (Submarine__door.__split_fields(temp___272)) ) with Submarine__door.rec__submarine__door__status = (Submarine__openclosed__rep.of_rep(1)) } } )))
    in (
    #"submarine.adb" 20 0 0# Submarine__door1.door1__split_fields.Submarine__door.__split_fields__content <- ( (Submarine__door.__split_fields(temp___273)) )))
   ) );
   ( "GP_Sloc:submarine.adb:21:7" (#"submarine.adb" 21 0 0# ()) );
   ( "GP_Sloc:submarine.adb:21:20" (#"submarine.adb" 21 0 0# (let temp___275 = (let temp___274 = { Submarine__door.__split_fields = Submarine__door2.door2__split_fields.Submarine__door.__split_fields__content } in (
    ( #"submarine.adb" 21 0 0# abstract ensures {true}(let _ = (Submarine__door.rec__submarine__door__status((Submarine__door.__split_fields(temp___274)))) in (
     ()))
     end ;
    { ( temp___274 ) with Submarine__door.__split_fields = { ( (Submarine__door.__split_fields(temp___274)) ) with Submarine__door.rec__submarine__door__status = (Submarine__openclosed__rep.of_rep(0)) } } )))
    in (
    #"submarine.adb" 21 0 0# Submarine__door2.door2__split_fields.Submarine__door.__split_fields__content <- ( (Submarine__door.__split_fields(temp___275)) )))
   ) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   abstract ensures {true}(let _ = (Submarine__airlocks___axiom.airlocks(())) in (
   ()))
   end  )
end

(* Module for checking contracts and absence of run-time errors in subprogram "opendoor1" defined at submarine.ads:63, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Submarine__opendoor1__subprogram_def
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        Submarine__airlocks
 use        Submarine__airlocks___axiom
 use        Submarine__lockedunlocked
 use        Submarine__lockedunlocked__rep
 use        Submarine__openclosed
 use        Submarine__openclosed__rep
 use        Submarine__door
 use        Submarine__door___axiom
 use        Submarine__door1
 use        Submarine__door2
 use        Submarine__lockedunlocked___axiom
 use        Submarine__openclosed___axiom
 use        Submarine__door___axiom
 use        Submarine__door1___axiom
 use        Submarine__door2___axiom
 use        Submarine__airlocks___axiom

 let def #"submarine.ads" 63 0 0#"W:diverges:N" "GP_Subp:submarine.ads:63" 
   (__void_param : unit)
  requires { #"submarine.ads" 63 0 0# true }
  ensures { #"submarine.ads" 63 0 0# (#"submarine.ads" 66 0 0# ( "model_vc_post" "keep_on_simp" "GP_Reason:VC_POSTCONDITION" "GP_Shape:pragargs__call_airlocks" "GP_Sloc:submarine.ads:66:14" "GP_Id:3" "comment:     Post => airlocks;
             ^ submarine.ads:66:14:VC_POSTCONDITION" ( "GP_Pretty_Ada:4021" "GP_Sloc:submarine.ads:66:14" ((epsilon temp___result_281 : bool.
   ( (temp___result_281 = (Submarine__airlocks.airlocks Submarine__door1.door1__split_fields.Submarine__door.__split_fields__content Submarine__door2.door2__split_fields.Submarine__door.__split_fields__content)) /\ (Submarine__airlocks.airlocks__function_guard temp___result_281 Submarine__door1.door1__split_fields.Submarine__door.__split_fields__content Submarine__door2.door2__split_fields.Submarine__door.__split_fields__content) )) = True) ) )) }
   =
  ( () (* Assume dynamic invariants of inputs of the subprogram submarine.ads:63 *)
  ;
   assume {  (Submarine__door___axiom.dynamic_invariant { Submarine__door.__split_fields = Submarine__door1.door1__split_fields.Submarine__door.__split_fields__content } True False True True) };
   assume {  (Submarine__door___axiom.dynamic_invariant { Submarine__door.__split_fields = Submarine__door2.door2__split_fields.Submarine__door.__split_fields__content } True False True True) };
   assume {  true };
  () (* Declarations introduced by the compiler at the beginning of the subprogram submarine.ads:63 *)
  ;
  () (* Check for RTE in the Pre of the subprogram submarine.ads:63 *)
  ;
   abstract ensures {true}(let _ = (Boolean.andb(((Submarine__openclosed__rep.to_rep((Submarine__door.rec__submarine__door__status((Submarine__door.__split_fields({ Submarine__door.__split_fields = Submarine__door2.door2__split_fields.Submarine__door.__split_fields__content })))))) = 1)) (((Submarine__lockedunlocked__rep.to_rep((Submarine__door.rec__submarine__door__lock((Submarine__door.__split_fields({ Submarine__door.__split_fields = Submarine__door1.door1__split_fields.Submarine__door.__split_fields__content })))))) = 1))) in (
   ()))
   end ;
  () (* Assume Pre of the subprogram submarine.ads:63 *)
  ;
   assume {  ( ((Submarine__openclosed__rep.to_rep (Submarine__door.rec__submarine__door__status (Submarine__door.__split_fields { Submarine__door.__split_fields = Submarine__door2.door2__split_fields.Submarine__door.__split_fields__content }))) = 1) /\ ((Submarine__lockedunlocked__rep.to_rep (Submarine__door.rec__submarine__door__lock (Submarine__door.__split_fields { Submarine__door.__split_fields = Submarine__door1.door1__split_fields.Submarine__door.__split_fields__content }))) = 1) ) };
   try
   ( ( "GP_Sloc:submarine.adb:26:7" (#"submarine.adb" 26 0 0# ()) );
   ( "GP_Sloc:submarine.adb:26:20" (#"submarine.adb" 26 0 0# (let temp___278 = (let temp___277 = { Submarine__door.__split_fields = Submarine__door2.door2__split_fields.Submarine__door.__split_fields__content } in (
    ( #"submarine.adb" 26 0 0# abstract ensures {true}(let _ = (Submarine__door.rec__submarine__door__status((Submarine__door.__split_fields(temp___277)))) in (
     ()))
     end ;
    { ( temp___277 ) with Submarine__door.__split_fields = { ( (Submarine__door.__split_fields(temp___277)) ) with Submarine__door.rec__submarine__door__status = (Submarine__openclosed__rep.of_rep(1)) } } )))
    in (
    #"submarine.adb" 26 0 0# Submarine__door2.door2__split_fields.Submarine__door.__split_fields__content <- ( (Submarine__door.__split_fields(temp___278)) )))
   ) );
   ( "GP_Sloc:submarine.adb:27:7" (#"submarine.adb" 27 0 0# ()) );
   ( "GP_Sloc:submarine.adb:27:20" (#"submarine.adb" 27 0 0# (let temp___280 = (let temp___279 = { Submarine__door.__split_fields = Submarine__door1.door1__split_fields.Submarine__door.__split_fields__content } in (
    ( #"submarine.adb" 27 0 0# abstract ensures {true}(let _ = (Submarine__door.rec__submarine__door__status((Submarine__door.__split_fields(temp___279)))) in (
     ()))
     end ;
    { ( temp___279 ) with Submarine__door.__split_fields = { ( (Submarine__door.__split_fields(temp___279)) ) with Submarine__door.rec__submarine__door__status = (Submarine__openclosed__rep.of_rep(0)) } } )))
    in (
    #"submarine.adb" 27 0 0# Submarine__door1.door1__split_fields.Submarine__door.__split_fields__content <- ( (Submarine__door.__split_fields(temp___280)) )))
   ) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   abstract ensures {true}(let _ = (Submarine__airlocks___axiom.airlocks(())) in (
   ()))
   end  )
end

(* Module for checking contracts and absence of run-time errors in subprogram "checkairlockdoors" defined at submarine.ads:69, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Submarine__checkairlockdoors__subprogram_def
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        Submarine__lockedunlocked
 use        Submarine__lockedunlocked__rep
 use        Submarine__door
 use        Submarine__door___axiom
 use        Submarine__door1
 use        Submarine__door2
 use        Submarine__lockedunlocked___axiom
 use        Submarine__openclosed___axiom
 use        Submarine__door___axiom
 use        Submarine__door1___axiom
 use        Submarine__door2___axiom

 val submarine__checkairlockdoors__result "model_projected" "model_trace:3148@result" "name:checkAirlockDoors"  : bool__ref 
 
 let def #"submarine.ads" 69 0 0#"W:diverges:N" "GP_Subp:submarine.ads:69" 
   (__void_param : unit)
  requires { #"submarine.ads" 69 0 0# true }
  ensures { #"submarine.ads" 69 0 0# true }
   =
  ( () (* Assume dynamic invariants of inputs of the subprogram submarine.ads:69 *)
  ;
  #"submarine.ads" 69 0 0# assume { #"submarine.ads" 69 0 0# (Submarine__door___axiom.dynamic_invariant { Submarine__door.__split_fields = Submarine__door1.door1__split_fields.Submarine__door.__split_fields__content } True False True True) };
  #"submarine.ads" 69 0 0# assume { #"submarine.ads" 69 0 0# (Submarine__door___axiom.dynamic_invariant { Submarine__door.__split_fields = Submarine__door2.door2__split_fields.Submarine__door.__split_fields__content } True False True True) };
  #"submarine.ads" 69 0 0# assume { #"submarine.ads" 69 0 0# true };
  () (* Declarations introduced by the compiler at the beginning of the subprogram submarine.ads:69 *)
  ;
  () (* Check for RTE in the Pre of the subprogram submarine.ads:69 *)
  ;
  #"submarine.ads" 69 0 0# abstract ensures {true}(let _ = True in (
   ()))
   end ;
  () (* Assume Pre of the subprogram submarine.ads:69 *)
  ;
  #"submarine.ads" 69 0 0# assume { #"submarine.ads" 69 0 0# true };
  #"submarine.ads" 69 0 0# try
   ( ( "GP_Sloc:submarine.ads:70:27" (#"submarine.ads" 70 0 0# ( #"submarine.ads" 70 0 0# submarine__checkairlockdoors__result.bool__content <- ( (Boolean.andb(((Submarine__lockedunlocked__rep.to_rep((Submarine__door.rec__submarine__door__lock((Submarine__door.__split_fields({ Submarine__door.__split_fields = Submarine__door1.door1__split_fields.Submarine__door.__split_fields__content })))))) = 0)) (((Submarine__lockedunlocked__rep.to_rep((Submarine__door.rec__submarine__door__lock((Submarine__door.__split_fields({ Submarine__door.__split_fields = Submarine__door2.door2__split_fields.Submarine__door.__split_fields__content })))))) = 0))) );
   #"submarine.ads" 70 0 0# raise Return__exc )) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   abstract ensures {true}(let _ = True in (
   ()))
   end ;
  submarine__checkairlockdoors__result.bool__content )
end

(* Module for checking contracts and absence of run-time errors in subprogram "beginoperating" defined at submarine.ads:73, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Submarine__beginoperating__subprogram_def
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        Submarine__checkairlockdoors
 use        Submarine__checkairlockdoors___axiom
 use        Submarine__submarineoperation
 use        Submarine__submarineoperation__rep
 use        Submarine__submarine
 use        Submarine__submarine___axiom
 use        Submarine__nuclearsubmarine
 use        Submarine__door
 use        Submarine__door___axiom
 use        Submarine__door1
 use        Submarine__door2
 use        Submarine__submarineoperation___axiom
 use        Submarine__submarinestatus___axiom
 use        Submarine__submarine___axiom
 use        Submarine__nuclearsubmarine___axiom
 use        Submarine__lockedunlocked___axiom
 use        Submarine__openclosed___axiom
 use        Submarine__door___axiom
 use        Submarine__door1___axiom
 use        Submarine__door2___axiom
 use        Submarine__checkairlockdoors___axiom

 let def #"submarine.ads" 73 0 0#"W:diverges:N" "GP_Subp:submarine.ads:73" 
   (__void_param : unit)
  requires { #"submarine.ads" 73 0 0# true }
  ensures { #"submarine.ads" 73 0 0# (#"submarine.ads" 76 0 0# ( "model_vc_post" "keep_on_simp" "GP_Reason:VC_POSTCONDITION" "GP_Shape:pragargs__and" "GP_Sloc:submarine.ads:76:14" "GP_Id:4" "comment:     Post => NuclearSubmarine.operating = IsOperating and checkAirlockDoors;
             ^ submarine.ads:76:14:VC_POSTCONDITION" ( ( "GP_Pretty_Ada:3200" "GP_Sloc:submarine.ads:76:14" ((Submarine__submarineoperation__rep.to_rep (Submarine__submarine.rec__submarine__submarine__operating (Submarine__submarine.__split_fields { Submarine__submarine.__split_fields = Submarine__nuclearsubmarine.nuclearsubmarine__split_fields.Submarine__submarine.__split_fields__content }))) = 0) ) /\ ( "GP_Pretty_Ada:3201" "GP_Sloc:submarine.ads:76:59" ((epsilon temp___result_285 : bool.
   ( (temp___result_285 = (Submarine__checkairlockdoors.checkairlockdoors Submarine__door1.door1__split_fields.Submarine__door.__split_fields__content Submarine__door2.door2__split_fields.Submarine__door.__split_fields__content)) /\ (Submarine__checkairlockdoors.checkairlockdoors__function_guard temp___result_285 Submarine__door1.door1__split_fields.Submarine__door.__split_fields__content Submarine__door2.door2__split_fields.Submarine__door.__split_fields__content) )) = True) ) ) )) }
   =
  ( () (* Assume dynamic invariants of inputs of the subprogram submarine.ads:73 *)
  ;
   assume {  (Submarine__submarine___axiom.dynamic_invariant { Submarine__submarine.__split_fields = Submarine__nuclearsubmarine.nuclearsubmarine__split_fields.Submarine__submarine.__split_fields__content } True False True True) };
   assume {  (Submarine__door___axiom.dynamic_invariant { Submarine__door.__split_fields = Submarine__door1.door1__split_fields.Submarine__door.__split_fields__content } True False True True) };
   assume {  (Submarine__door___axiom.dynamic_invariant { Submarine__door.__split_fields = Submarine__door2.door2__split_fields.Submarine__door.__split_fields__content } True False True True) };
   assume {  true };
  () (* Declarations introduced by the compiler at the beginning of the subprogram submarine.ads:73 *)
  ;
  () (* Check for RTE in the Pre of the subprogram submarine.ads:73 *)
  ;
   abstract ensures {true}(let _ = (Submarine__checkairlockdoors___axiom.checkairlockdoors(())) in (
   ()))
   end ;
  () (* Assume Pre of the subprogram submarine.ads:73 *)
  ;
   assume {  ((epsilon temp___result_284 : bool.
   ( (temp___result_284 = (Submarine__checkairlockdoors.checkairlockdoors Submarine__door1.door1__split_fields.Submarine__door.__split_fields__content Submarine__door2.door2__split_fields.Submarine__door.__split_fields__content)) /\ (Submarine__checkairlockdoors.checkairlockdoors__function_guard temp___result_284 Submarine__door1.door1__split_fields.Submarine__door.__split_fields__content Submarine__door2.door2__split_fields.Submarine__door.__split_fields__content) )) = True) };
   try
   ( ( "GP_Sloc:submarine.adb:32:7" (#"submarine.adb" 32 0 0# ()) );
   ( "GP_Sloc:submarine.adb:32:34" (#"submarine.adb" 32 0 0# (let temp___283 = (let temp___282 = { Submarine__submarine.__split_fields = Submarine__nuclearsubmarine.nuclearsubmarine__split_fields.Submarine__submarine.__split_fields__content } in (
    ( #"submarine.adb" 32 0 0# abstract ensures {true}(let _ = (Submarine__submarine.rec__submarine__submarine__operating((Submarine__submarine.__split_fields(temp___282)))) in (
     ()))
     end ;
    { ( temp___282 ) with Submarine__submarine.__split_fields = { ( (Submarine__submarine.__split_fields(temp___282)) ) with Submarine__submarine.rec__submarine__submarine__operating = (Submarine__submarineoperation__rep.of_rep(0)) } } )))
    in (
    #"submarine.adb" 32 0 0# Submarine__nuclearsubmarine.nuclearsubmarine__split_fields.Submarine__submarine.__split_fields__content <- ( (Submarine__submarine.__split_fields(temp___283)) )))
   ) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   abstract ensures {true}(let _ = (Boolean.andb(((Submarine__submarineoperation__rep.to_rep((Submarine__submarine.rec__submarine__submarine__operating((Submarine__submarine.__split_fields({ Submarine__submarine.__split_fields = Submarine__nuclearsubmarine.nuclearsubmarine__split_fields.Submarine__submarine.__split_fields__content })))))) = 0)) ((Submarine__checkairlockdoors___axiom.checkairlockdoors(())))) in (
   ()))
   end  )
end

(* Module for checking contracts and absence of run-time errors in subprogram "checkreactor" defined at submarine.ads:97, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Submarine__checkreactor__subprogram_def
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Submarine__submarineheat___axiom
 use        Submarine__reactortemp
 use        Submarine__reactormaxtemp
 use        Submarine__submarineheat___axiom
 use        Submarine__reactortemp___axiom
 use        Submarine__reactormaxtemp___axiom

 val submarine__checkreactor__result "model_projected" "model_trace:3304@result" "name:checkReactor"  : bool__ref 
 
 let def #"submarine.ads" 97 0 0#"W:diverges:N" "GP_Subp:submarine.ads:97" 
   (__void_param : unit)
  requires { #"submarine.ads" 97 0 0# true }
  ensures { #"submarine.ads" 97 0 0# true }
   =
  ( () (* Assume dynamic invariants of inputs of the subprogram submarine.ads:97 *)
  ;
  #"submarine.ads" 97 0 0# assume { #"submarine.ads" 97 0 0# (Submarine__submarineheat___axiom.dynamic_invariant Submarine__reactortemp.reactortemp.int__content True False True True) };
  #"submarine.ads" 97 0 0# assume { #"submarine.ads" 97 0 0# (Submarine__submarineheat___axiom.dynamic_invariant Submarine__reactormaxtemp.reactormaxtemp.int__content True False True True) };
  #"submarine.ads" 97 0 0# assume { #"submarine.ads" 97 0 0# true };
  () (* Declarations introduced by the compiler at the beginning of the subprogram submarine.ads:97 *)
  ;
  () (* Check for RTE in the Pre of the subprogram submarine.ads:97 *)
  ;
  #"submarine.ads" 97 0 0# abstract ensures {true}(let _ = True in (
   ()))
   end ;
  () (* Assume Pre of the subprogram submarine.ads:97 *)
  ;
  #"submarine.ads" 97 0 0# assume { #"submarine.ads" 97 0 0# true };
  #"submarine.ads" 97 0 0# try
   ( ( "GP_Sloc:submarine.ads:98:20" (#"submarine.ads" 98 0 0# ( #"submarine.ads" 98 0 0# submarine__checkreactor__result.bool__content <- ( (Submarine__reactortemp.reactortemp.int__content >= Submarine__reactormaxtemp.reactormaxtemp.int__content) );
   #"submarine.ads" 98 0 0# raise Return__exc )) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   abstract ensures {true}(let _ = True in (
   ()))
   end ;
  submarine__checkreactor__result.bool__content )
end

(* Module for checking contracts and absence of run-time errors in subprogram "checkoxygen" defined at submarine.ads:100, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Submarine__checkoxygen__subprogram_def
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Submarine__submarineoxygen___axiom
 use        Submarine__oxygenlevel
 use        Submarine__minoxygenlevel
 use        Submarine__submarineoxygen___axiom
 use        Submarine__oxygenlevel___axiom
 use        Submarine__minoxygenlevel___axiom

 val submarine__checkoxygen__result "model_projected" "model_trace:3317@result" "name:checkOxygen"  : bool__ref 
 
 let def #"submarine.ads" 100 0 0#"W:diverges:N" "GP_Subp:submarine.ads:100" 
   (__void_param : unit)
  requires { #"submarine.ads" 100 0 0# true }
  ensures { #"submarine.ads" 100 0 0# true }
   =
  ( () (* Assume dynamic invariants of inputs of the subprogram submarine.ads:100 *)
  ;
  #"submarine.ads" 100 0 0# assume { #"submarine.ads" 100 0 0# (Submarine__submarineoxygen___axiom.dynamic_invariant Submarine__oxygenlevel.oxygenlevel.int__content True False True True) };
  #"submarine.ads" 100 0 0# assume { #"submarine.ads" 100 0 0# (Submarine__submarineoxygen___axiom.dynamic_invariant Submarine__minoxygenlevel.minoxygenlevel.int__content True False True True) };
  #"submarine.ads" 100 0 0# assume { #"submarine.ads" 100 0 0# true };
  () (* Declarations introduced by the compiler at the beginning of the subprogram submarine.ads:100 *)
  ;
  () (* Check for RTE in the Pre of the subprogram submarine.ads:100 *)
  ;
  #"submarine.ads" 100 0 0# abstract ensures {true}(let _ = True in (
   ()))
   end ;
  () (* Assume Pre of the subprogram submarine.ads:100 *)
  ;
  #"submarine.ads" 100 0 0# assume { #"submarine.ads" 100 0 0# true };
  #"submarine.ads" 100 0 0# try
   ( ( "GP_Sloc:submarine.ads:101:19" (#"submarine.ads" 101 0 0# ( #"submarine.ads" 101 0 0# submarine__checkoxygen__result.bool__content <- ( (Submarine__oxygenlevel.oxygenlevel.int__content <= Submarine__minoxygenlevel.minoxygenlevel.int__content) );
   #"submarine.ads" 101 0 0# raise Return__exc )) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   abstract ensures {true}(let _ = True in (
   ()))
   end ;
  submarine__checkoxygen__result.bool__content )
end

(* Module for checking contracts and absence of run-time errors in subprogram "oxygenrunsout" defined at submarine.ads:103, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Submarine__oxygenrunsout__subprogram_def
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Submarine__submarineoxygen___axiom
 use        Submarine__oxygenlevel
 use        Submarine__emptyoxygen
 use        Submarine__submarineoxygen___axiom
 use        Submarine__oxygenlevel___axiom
 use        Submarine__emptyoxygen___axiom

 val submarine__oxygenrunsout__result "model_projected" "model_trace:3330@result" "name:oxygenRunsOut"  : bool__ref 
 
 let def #"submarine.ads" 103 0 0#"W:diverges:N" "GP_Subp:submarine.ads:103" 
   (__void_param : unit)
  requires { #"submarine.ads" 103 0 0# true }
  ensures { #"submarine.ads" 103 0 0# true }
   =
  ( () (* Assume dynamic invariants of inputs of the subprogram submarine.ads:103 *)
  ;
  #"submarine.ads" 103 0 0# assume { #"submarine.ads" 103 0 0# (Submarine__submarineoxygen___axiom.dynamic_invariant Submarine__oxygenlevel.oxygenlevel.int__content True False True True) };
  #"submarine.ads" 103 0 0# assume { #"submarine.ads" 103 0 0# (Submarine__submarineoxygen___axiom.dynamic_invariant Submarine__emptyoxygen.emptyoxygen.int__content True False True True) };
  #"submarine.ads" 103 0 0# assume { #"submarine.ads" 103 0 0# true };
  () (* Declarations introduced by the compiler at the beginning of the subprogram submarine.ads:103 *)
  ;
  () (* Check for RTE in the Pre of the subprogram submarine.ads:103 *)
  ;
  #"submarine.ads" 103 0 0# abstract ensures {true}(let _ = True in (
   ()))
   end ;
  () (* Assume Pre of the subprogram submarine.ads:103 *)
  ;
  #"submarine.ads" 103 0 0# assume { #"submarine.ads" 103 0 0# true };
  #"submarine.ads" 103 0 0# try
   ( ( "GP_Sloc:submarine.ads:104:19" (#"submarine.ads" 104 0 0# ( #"submarine.ads" 104 0 0# submarine__oxygenrunsout__result.bool__content <- ( (Submarine__oxygenlevel.oxygenlevel.int__content <= Submarine__emptyoxygen.emptyoxygen.int__content) );
   #"submarine.ads" 104 0 0# raise Return__exc )) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   abstract ensures {true}(let _ = True in (
   ()))
   end ;
  submarine__oxygenrunsout__result.bool__content )
end

(* Module for checking contracts and absence of run-time errors in subprogram "checkdepth" defined at submarine.ads:106, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Submarine__checkdepth__subprogram_def
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Submarine__submarinedepth___axiom
 use        Submarine__currentdepth
 use        Submarine__maxdepth
 use        Submarine__submarinedepth___axiom
 use        Submarine__currentdepth___axiom
 use        Submarine__maxdepth___axiom

 val submarine__checkdepth__result "model_projected" "model_trace:3343@result" "name:checkDepth"  : bool__ref 
 
 let def #"submarine.ads" 106 0 0#"W:diverges:N" "GP_Subp:submarine.ads:106" 
   (__void_param : unit)
  requires { #"submarine.ads" 106 0 0# true }
  ensures { #"submarine.ads" 106 0 0# true }
   =
  ( () (* Assume dynamic invariants of inputs of the subprogram submarine.ads:106 *)
  ;
  #"submarine.ads" 106 0 0# assume { #"submarine.ads" 106 0 0# (Submarine__submarinedepth___axiom.dynamic_invariant Submarine__currentdepth.currentdepth.int__content True False True True) };
  #"submarine.ads" 106 0 0# assume { #"submarine.ads" 106 0 0# (Submarine__submarinedepth___axiom.dynamic_invariant Submarine__maxdepth.maxdepth.int__content True False True True) };
  #"submarine.ads" 106 0 0# assume { #"submarine.ads" 106 0 0# true };
  () (* Declarations introduced by the compiler at the beginning of the subprogram submarine.ads:106 *)
  ;
  () (* Check for RTE in the Pre of the subprogram submarine.ads:106 *)
  ;
  #"submarine.ads" 106 0 0# abstract ensures {true}(let _ = True in (
   ()))
   end ;
  () (* Assume Pre of the subprogram submarine.ads:106 *)
  ;
  #"submarine.ads" 106 0 0# assume { #"submarine.ads" 106 0 0# true };
  #"submarine.ads" 106 0 0# try
   ( ( "GP_Sloc:submarine.ads:107:20" (#"submarine.ads" 107 0 0# ( #"submarine.ads" 107 0 0# submarine__checkdepth__result.bool__content <- ( (Submarine__currentdepth.currentdepth.int__content >= Submarine__maxdepth.maxdepth.int__content) );
   #"submarine.ads" 107 0 0# raise Return__exc )) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   abstract ensures {true}(let _ = True in (
   ()))
   end ;
  submarine__checkdepth__result.bool__content )
end

(* Module for checking contracts and absence of run-time errors in subprogram "displaywarning" defined at submarine.ads:111, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Submarine__displaywarning__subprogram_def
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        Submarine__checkoxygen
 use        Submarine__checkoxygen___axiom
 use        Submarine__submarineoxygen___axiom
 use        Submarine__oxygenlevel
 use        Submarine__minoxygenlevel
 use        Submarine__displaywarning__warningmessage
 use        Submarine__submarineoxygen___axiom
 use        Submarine__oxygenlevel___axiom
 use        Submarine__minoxygenlevel___axiom
 use        Submarine__checkoxygen___axiom
 use        Submarine__displaywarning__warningmessage___axiom

 let def #"submarine.ads" 111 0 0#"W:diverges:N" "GP_Subp:submarine.ads:111" 
   (__void_param : unit)
  requires { #"submarine.ads" 111 0 0# true }
  ensures { #"submarine.ads" 111 0 0# (#"submarine.ads" 115 0 0# ( "model_vc_post" "keep_on_simp" "GP_Reason:VC_POSTCONDITION" "GP_Sloc:submarine.ads:115:14" "GP_Id:5" "comment:     Post => checkOxygen and then warningMessage = True;
             ^ submarine.ads:115:14:VC_POSTCONDITION" "GP_Shape:pragargs__call_checkoxygen" ( ( "GP_Pretty_Ada:4243" "GP_Sloc:submarine.ads:115:14" ((epsilon temp___result_287 : bool.
   ( (temp___result_287 = (Submarine__checkoxygen.checkoxygen Submarine__oxygenlevel.oxygenlevel.int__content Submarine__minoxygenlevel.minoxygenlevel.int__content)) /\ (Submarine__checkoxygen.checkoxygen__function_guard temp___result_287 Submarine__oxygenlevel.oxygenlevel.int__content Submarine__minoxygenlevel.minoxygenlevel.int__content) )) = True) ) /\ ( "GP_Pretty_Ada:3398" "GP_Sloc:submarine.ads:115:50" ( (Submarine__displaywarning__warningmessage.warningmessage.bool__content = True) <-> true ) ) ) )) }
   =
  ( () (* Assume dynamic invariants of inputs of the subprogram submarine.ads:111 *)
  ;
   assume {  (Submarine__submarineoxygen___axiom.dynamic_invariant Submarine__oxygenlevel.oxygenlevel.int__content True False True True) };
   assume {  (Submarine__submarineoxygen___axiom.dynamic_invariant Submarine__minoxygenlevel.minoxygenlevel.int__content True False True True) };
   assume {  true };
  () (* Declarations introduced by the compiler at the beginning of the subprogram submarine.ads:111 *)
  ;
  () (* Check for RTE in the Pre of the subprogram submarine.ads:111 *)
  ;
   abstract ensures {true}(let _ = ( (Submarine__checkoxygen___axiom.checkoxygen(())) && ((Boolean.to_int(Submarine__displaywarning__warningmessage.warningmessage.bool__content)) = (Boolean.to_int((Boolean.of_int(0))))) ) in (
   ()))
   end ;
  () (* Assume Pre of the subprogram submarine.ads:111 *)
  ;
   assume {  ( ((epsilon temp___result_286 : bool.
   ( (temp___result_286 = (Submarine__checkoxygen.checkoxygen Submarine__oxygenlevel.oxygenlevel.int__content Submarine__minoxygenlevel.minoxygenlevel.int__content)) /\ (Submarine__checkoxygen.checkoxygen__function_guard temp___result_286 Submarine__oxygenlevel.oxygenlevel.int__content Submarine__minoxygenlevel.minoxygenlevel.int__content) )) = True) /\ ( (Submarine__displaywarning__warningmessage.warningmessage.bool__content = True) <-> false ) ) };
   try
   ( ( "GP_Sloc:submarine.adb:37:22" (#"submarine.adb" 37 0 0# #"submarine.adb" 37 0 0# Submarine__displaywarning__warningmessage.warningmessage.bool__content <- ( (Boolean.of_int(1)) )) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   abstract ensures {true}(let _ = ( (Submarine__checkoxygen___axiom.checkoxygen(())) && ((Boolean.to_int(Submarine__displaywarning__warningmessage.warningmessage.bool__content)) = (Boolean.to_int((Boolean.of_int(1))))) ) in (
   ()))
   end  )
end

(* Module for checking contracts and absence of run-time errors in subprogram "oxygensurface" defined at submarine.ads:119, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Submarine__oxygensurface__subprogram_def
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        Submarine__checkreactor
 use        Submarine__checkreactor___axiom
 use        Submarine__oxygenrunsout
 use        Submarine__oxygenrunsout___axiom
 use        Submarine__submarineoxygen___axiom
 use        Submarine__oxygenlevel
 use        Submarine__emptyoxygen
 use        Submarine__submarineheat___axiom
 use        Submarine__reactortemp
 use        Submarine__reactormaxtemp
 use        Submarine__oxygensurface__surface
 use        Submarine__submarineoxygen___axiom
 use        Submarine__oxygenlevel___axiom
 use        Submarine__emptyoxygen___axiom
 use        Submarine__submarineheat___axiom
 use        Submarine__reactortemp___axiom
 use        Submarine__reactormaxtemp___axiom
 use        Submarine__checkreactor___axiom
 use        Submarine__oxygenrunsout___axiom
 use        Submarine__oxygensurface__surface___axiom

 let def #"submarine.ads" 119 0 0#"W:diverges:N" "GP_Subp:submarine.ads:119" 
   (__void_param : unit)
  requires { #"submarine.ads" 119 0 0# true }
  ensures { #"submarine.ads" 119 0 0# (#"submarine.ads" 123 0 0# ( "model_vc_post" "keep_on_simp" "GP_Reason:VC_POSTCONDITION" "GP_Sloc:submarine.ads:123:15" "GP_Id:6" "comment:       Post=> (oxygenRunsOut or checkReactor) and then surface = True;
              ^ submarine.ads:123:15:VC_POSTCONDITION" "GP_Shape:pragargs__or" ( ( "GP_Pretty_Ada:4341" "GP_Sloc:submarine.ads:123:15" ( ((epsilon temp___result_290 : bool.
   ( (temp___result_290 = (Submarine__oxygenrunsout.oxygenrunsout Submarine__oxygenlevel.oxygenlevel.int__content Submarine__emptyoxygen.emptyoxygen.int__content)) /\ (Submarine__oxygenrunsout.oxygenrunsout__function_guard temp___result_290 Submarine__oxygenlevel.oxygenlevel.int__content Submarine__emptyoxygen.emptyoxygen.int__content) )) = True) \/ ((epsilon temp___result_291 : bool.
   ( (temp___result_291 = (Submarine__checkreactor.checkreactor Submarine__reactortemp.reactortemp.int__content Submarine__reactormaxtemp.reactormaxtemp.int__content)) /\ (Submarine__checkreactor.checkreactor__function_guard temp___result_291 Submarine__reactortemp.reactortemp.int__content Submarine__reactormaxtemp.reactormaxtemp.int__content) )) = True) ) ) /\ ( "GP_Pretty_Ada:3447" "GP_Sloc:submarine.ads:123:64" ( (Submarine__oxygensurface__surface.surface.bool__content = True) <-> true ) ) ) )) }
   =
  ( () (* Assume dynamic invariants of inputs of the subprogram submarine.ads:119 *)
  ;
   assume {  (Submarine__submarineoxygen___axiom.dynamic_invariant Submarine__oxygenlevel.oxygenlevel.int__content True False True True) };
   assume {  (Submarine__submarineoxygen___axiom.dynamic_invariant Submarine__emptyoxygen.emptyoxygen.int__content True False True True) };
   assume {  (Submarine__submarineheat___axiom.dynamic_invariant Submarine__reactortemp.reactortemp.int__content True False True True) };
   assume {  (Submarine__submarineheat___axiom.dynamic_invariant Submarine__reactormaxtemp.reactormaxtemp.int__content True False True True) };
   assume {  true };
  () (* Declarations introduced by the compiler at the beginning of the subprogram submarine.ads:119 *)
  ;
  () (* Check for RTE in the Pre of the subprogram submarine.ads:119 *)
  ;
   abstract ensures {true}(let _ = ( (Boolean.orb((Submarine__oxygenrunsout___axiom.oxygenrunsout(()))) ((Submarine__checkreactor___axiom.checkreactor(())))) && ((Boolean.to_int(Submarine__oxygensurface__surface.surface.bool__content)) = (Boolean.to_int((Boolean.of_int(0))))) ) in (
   ()))
   end ;
  () (* Assume Pre of the subprogram submarine.ads:119 *)
  ;
   assume {  ( ( ((epsilon temp___result_288 : bool.
   ( (temp___result_288 = (Submarine__oxygenrunsout.oxygenrunsout Submarine__oxygenlevel.oxygenlevel.int__content Submarine__emptyoxygen.emptyoxygen.int__content)) /\ (Submarine__oxygenrunsout.oxygenrunsout__function_guard temp___result_288 Submarine__oxygenlevel.oxygenlevel.int__content Submarine__emptyoxygen.emptyoxygen.int__content) )) = True) \/ ((epsilon temp___result_289 : bool.
   ( (temp___result_289 = (Submarine__checkreactor.checkreactor Submarine__reactortemp.reactortemp.int__content Submarine__reactormaxtemp.reactormaxtemp.int__content)) /\ (Submarine__checkreactor.checkreactor__function_guard temp___result_289 Submarine__reactortemp.reactortemp.int__content Submarine__reactormaxtemp.reactormaxtemp.int__content) )) = True) ) /\ ( (Submarine__oxygensurface__surface.surface.bool__content = True) <-> false ) ) };
   try
   ( ( "GP_Sloc:submarine.adb:42:15" (#"submarine.adb" 42 0 0# #"submarine.adb" 42 0 0# Submarine__oxygensurface__surface.surface.bool__content <- ( (Boolean.of_int(1)) )) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   abstract ensures {true}(let _ = ( (Boolean.orb((Submarine__oxygenrunsout___axiom.oxygenrunsout(()))) ((Submarine__checkreactor___axiom.checkreactor(())))) && ((Boolean.to_int(Submarine__oxygensurface__surface.surface.bool__content)) = (Boolean.to_int((Boolean.of_int(1))))) ) in (
   ()))
   end  )
end

(* Module for checking contracts and absence of run-time errors in subprogram "stopdepth" defined at submarine.ads:126, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Submarine__stopdepth__subprogram_def
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        Submarine__checkdepth
 use        Submarine__checkdepth___axiom
 use        Submarine__submarinedepth___axiom
 use        Submarine__currentdepth
 use        Submarine__maxdepth
 use        Submarine__stopdepth__stopsubdepth
 use        Submarine__submarinedepth___axiom
 use        Submarine__currentdepth___axiom
 use        Submarine__maxdepth___axiom
 use        Submarine__checkdepth___axiom
 use        Submarine__stopdepth__stopsubdepth___axiom

 let def #"submarine.ads" 126 0 0#"W:diverges:N" "GP_Subp:submarine.ads:126" 
   (__void_param : unit)
  requires { #"submarine.ads" 126 0 0# true }
  ensures { #"submarine.ads" 126 0 0# (#"submarine.ads" 130 0 0# ( "model_vc_post" "keep_on_simp" "GP_Reason:VC_POSTCONDITION" "GP_Sloc:submarine.ads:130:16" "GP_Id:7" "comment:       Post => checkDepth and then stopSubDepth = True;
               ^ submarine.ads:130:16:VC_POSTCONDITION" "GP_Shape:pragargs__call_checkdepth" ( ( "GP_Pretty_Ada:4429" "GP_Sloc:submarine.ads:130:16" ((epsilon temp___result_293 : bool.
   ( (temp___result_293 = (Submarine__checkdepth.checkdepth Submarine__currentdepth.currentdepth.int__content Submarine__maxdepth.maxdepth.int__content)) /\ (Submarine__checkdepth.checkdepth__function_guard temp___result_293 Submarine__currentdepth.currentdepth.int__content Submarine__maxdepth.maxdepth.int__content) )) = True) ) /\ ( "GP_Pretty_Ada:3490" "GP_Sloc:submarine.ads:130:49" ( (Submarine__stopdepth__stopsubdepth.stopsubdepth.bool__content = True) <-> true ) ) ) )) }
   =
  ( () (* Assume dynamic invariants of inputs of the subprogram submarine.ads:126 *)
  ;
   assume {  (Submarine__submarinedepth___axiom.dynamic_invariant Submarine__currentdepth.currentdepth.int__content True False True True) };
   assume {  (Submarine__submarinedepth___axiom.dynamic_invariant Submarine__maxdepth.maxdepth.int__content True False True True) };
   assume {  true };
  () (* Declarations introduced by the compiler at the beginning of the subprogram submarine.ads:126 *)
  ;
  () (* Check for RTE in the Pre of the subprogram submarine.ads:126 *)
  ;
   abstract ensures {true}(let _ = ( (Submarine__checkdepth___axiom.checkdepth(())) && ((Boolean.to_int(Submarine__stopdepth__stopsubdepth.stopsubdepth.bool__content)) = (Boolean.to_int((Boolean.of_int(0))))) ) in (
   ()))
   end ;
  () (* Assume Pre of the subprogram submarine.ads:126 *)
  ;
   assume {  ( ((epsilon temp___result_292 : bool.
   ( (temp___result_292 = (Submarine__checkdepth.checkdepth Submarine__currentdepth.currentdepth.int__content Submarine__maxdepth.maxdepth.int__content)) /\ (Submarine__checkdepth.checkdepth__function_guard temp___result_292 Submarine__currentdepth.currentdepth.int__content Submarine__maxdepth.maxdepth.int__content) )) = True) /\ ( (Submarine__stopdepth__stopsubdepth.stopsubdepth.bool__content = True) <-> false ) ) };
   try
   ( ( "GP_Sloc:submarine.adb:47:20" (#"submarine.adb" 47 0 0# #"submarine.adb" 47 0 0# Submarine__stopdepth__stopsubdepth.stopsubdepth.bool__content <- ( (Boolean.of_int(1)) )) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   abstract ensures {true}(let _ = ( (Submarine__checkdepth___axiom.checkdepth(())) && ((Boolean.to_int(Submarine__stopdepth__stopsubdepth.stopsubdepth.bool__content)) = (Boolean.to_int((Boolean.of_int(1))))) ) in (
   ()))
   end  )
end

(* Module for checking contracts and absence of run-time errors in subprogram "firetorpedo" defined at submarine.ads:142, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Submarine__firetorpedo__subprogram_def
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        Submarine__box
 use        Submarine__box__rep
 use        Submarine__ph_index
 use        Submarine__ph_index___axiom
 use        Array__Int__Submarine__box
 use        Submarine__torpedos___axiom
 use        Array__Int__Submarine__box
 use        Submarine__firetorpedo__d
 use        Submarine__firetorpedo__fired
 use        Submarine__firetorpedo__pos
 use        Submarine__firetorpedo__L_1
 use        Submarine__firetorpedo__pos___axiom
 use        Submarine__firetorpedo__L_1___axiom
 use        Submarine__box___axiom
 use        Submarine__ph_index___axiom
 use        Submarine__torpedos___axiom
 use        Submarine__firetorpedo__d___axiom
 use        Submarine__firetorpedo__fired___axiom

 let def #"submarine.ads" 142 0 0#"W:diverges:N" "GP_Subp:submarine.ads:142" 
   (__void_param : unit)
  requires { #"submarine.ads" 142 0 0# true }
  ensures { #"submarine.ads" 142 0 0# (#"submarine.ads" 144 0 0# ( "model_vc_post" "keep_on_simp" "GP_Reason:VC_POSTCONDITION" "GP_Sloc:submarine.ads:144:13" "GP_Id:9" "comment:    Post => (for all J in d'Range => d(J) /= loaded) and then fired = False;
            ^ submarine.ads:144:13:VC_POSTCONDITION" "GP_Shape:pragargs__forall" ( (forall j #"submarine.ads" 144 0 0#  "model" "name:J" "model_trace:3600"  : int.
   ( ( (0 <= j) /\ (j <= 1) ) -> ( "GP_Pretty_Ada:3614" "GP_Sloc:submarine.ads:144:38" ((Submarine__box__rep.to_rep (Array__Int__Submarine__box.get Submarine__firetorpedo__d.d.Array__Int__Submarine__box.map__content j)) <> 0) ) )) /\ ( "GP_Pretty_Ada:3618" "GP_Sloc:submarine.ads:144:69" ( (Submarine__firetorpedo__fired.fired.bool__content = True) <-> false ) ) ) )) }
   =
  ( () (* Assume dynamic invariants of inputs of the subprogram submarine.ads:142 *)
  ;
   assume {  (Submarine__torpedos___axiom.dynamic_invariant Submarine__firetorpedo__d.d.Array__Int__Submarine__box.map__content True False True True) };
   assume {  true };
  () (* Declarations introduced by the compiler at the beginning of the subprogram submarine.ads:142 *)
  ;
  () (* Check for RTE in the Pre of the subprogram submarine.ads:142 *)
  ;
   abstract ensures {true}(let _ = ( ((Boolean.to_int(Submarine__firetorpedo__fired.fired.bool__content)) = (Boolean.to_int((Boolean.of_int(1))))) && ( (let j =  (any int
  ) in (
   (if ((Boolean.andb((0 <= j)) ((j <= 1)))) then (
     abstract ensures {true}(let _ = ((Submarine__box__rep.to_rep((Array__Int__Submarine__box.get(Submarine__firetorpedo__d.d.Array__Int__Submarine__box.map__content) (j)))) = 0) in (
     ()))
     end ))))
  ;
   (any bool
  requires { true} 
  ensures { ( (result = True) <-> (forall j   "model" "model_trace:3581" "name:J"  : int.
   ( ( (0 <= j) /\ (j <= 1) ) -> ((Submarine__box__rep.to_rep (Array__Int__Submarine__box.get Submarine__firetorpedo__d.d.Array__Int__Submarine__box.map__content j)) = 0) )) )} 
  ) ) ) in (
   ()))
   end ;
  () (* Assume Pre of the subprogram submarine.ads:142 *)
  ;
   assume {  ( ( (Submarine__firetorpedo__fired.fired.bool__content = True) <-> true ) /\ (forall j   "model" "model_trace:3581" "name:J"  : int.
   ( ( (0 <= j) /\ (j <= 1) ) -> ((Submarine__box__rep.to_rep (Array__Int__Submarine__box.get Submarine__firetorpedo__d.d.Array__Int__Submarine__box.map__content j)) = 0) )) ) };
   try
   ( (#"submarine.adb" 55 0 0# ( #"submarine.adb" 55 0 0# Submarine__firetorpedo__pos.pos.int__content <- ( 0 );
   #"submarine.adb" 55 0 0# assume { #"submarine.adb" 55 0 0# (Submarine__ph_index___axiom.dynamic_invariant Submarine__firetorpedo__pos.pos.int__content True False True True) } ));
   (#"submarine.adb" 58 0 0# ());
   ( "GP_Sloc:submarine.adb:57:7" (#"submarine.adb" 57 0 0# (if (((Boolean.to_int(Submarine__firetorpedo__fired.fired.bool__content)) = (Boolean.to_int((Boolean.of_int(1)))))) then (
    ( ( "GP_Sloc:submarine.adb:58:26" (#"submarine.adb" 58 0 0# ( () (* Translation of an Ada loop from submarine.adb:58 *)
    ;
    (if ((Submarine__firetorpedo__pos.pos.int__content < 1)) then (
     #"submarine.adb" 58 0 0# try
      ( #"submarine.adb" 58 0 0# abstract ensures {true}(let _ = Submarine__firetorpedo__pos.pos.int__content in (
       ()))
       end ;
      (let temp___296 = #"submarine.adb" 58 0 0# (any int
      ensures {#"submarine.adb" 58 0 0# (result = Submarine__firetorpedo__pos.pos.int__content)} 
      ) in (
       ( #"submarine.adb" 58 0 0# abstract ensures {true}(let _ = Submarine__firetorpedo__d.d.Array__Int__Submarine__box.map__content in (
        ()))
        end ;
       (let temp___294 = #"submarine.adb" 58 0 0# (any Array__Int__Submarine__box.map
       ensures {#"submarine.adb" 58 0 0# (result = Submarine__firetorpedo__d.d.Array__Int__Submarine__box.map__content)} 
       ) in (
        ( () (* First unroling of the loop statements appearing before the loop invariant of loop submarine.adb:58 *)
        ;
        () (* While loop translating the Ada loop from submarine.adb:58 *)
        ;
        #"submarine.adb" 58 0 0# while True do
         ( () (* Assume implicit invariants from the loop submarine.adb:58 *)
         ;
         #"submarine.adb" 58 0 0# assume { #"submarine.adb" 58 0 0# (Boolean.andb(( ( ( ( true /\ (Submarine__torpedos___axiom.dynamic_invariant Submarine__firetorpedo__d.d.Array__Int__Submarine__box.map__content True True True True) ) /\ true ) /\ (Submarine__ph_index___axiom.dynamic_invariant Submarine__firetorpedo__pos.pos.int__content False True True True) ) /\ true )) ((Submarine__firetorpedo__pos.pos.int__content < 1))) };
         () (* Check for absence of RTE in the invariant of loop submarine.adb:58 *)
         ;
         () (* Loop statements appearing after the loop invariant of loop submarine.adb:58 *)
         ;
         ( "GP_Sloc:submarine.adb:59:12" (#"submarine.adb" 59 0 0# ()) );
         ( "GP_Sloc:submarine.adb:59:17" (#"submarine.adb" 59 0 0# #"submarine.adb" 59 0 0# Submarine__firetorpedo__d.d.Array__Int__Submarine__box.map__content <- ( (Array__Int__Submarine__box.set(Submarine__firetorpedo__d.d.Array__Int__Submarine__box.map__content) (Submarine__firetorpedo__pos.pos.int__content) ((Submarine__box__rep.of_rep(1)))) )) );
         ( "GP_Sloc:submarine.adb:60:11" (#"submarine.adb" 60 0 0# ()) );
         ( "GP_Sloc:submarine.adb:60:18" (#"submarine.adb" 60 0 0# ()) );
         ( "GP_Sloc:submarine.adb:60:15" (#"submarine.adb" 60 0 0# #"submarine.adb" 60 0 0# Submarine__firetorpedo__pos.pos.int__content <- ( (#"submarine.adb" 60 0 0# ( "model_vc" "keep_on_simp" "GP_Sloc:submarine.adb:60:22" "GP_Reason:VC_RANGE_CHECK" "GP_Id:8" "comment:          Pos := Pos + 1;
                     ^ submarine.adb:60:22:VC_RANGE_CHECK" "GP_Shape:if__L_1_while__pos_assign__add" (Submarine__ph_index.range_check_((Submarine__firetorpedo__pos.pos.int__content + 1))) )) )) );
         () (* Check for the exit condition and loop statements appearing before the loop invariant of loop submarine.adb:58 *)
         ;
         (if (not ( (Submarine__firetorpedo__pos.pos.int__content < 1) )) then (
           raise Submarine__firetorpedo__L_1.L_1)) )
        done )))
        )))
       )
     with
      Submarine__firetorpedo__L_1.L_1 -> ()
     end)) )) );
    ( "GP_Sloc:submarine.adb:62:20" (#"submarine.adb" 62 0 0# #"submarine.adb" 62 0 0# Submarine__firetorpedo__d.d.Array__Int__Submarine__box.map__content <- ( (Array__Int__Submarine__box.set(Submarine__firetorpedo__d.d.Array__Int__Submarine__box.map__content) (1) ((Submarine__box__rep.of_rep(1)))) )) ) )) else (
    ()))) );
   ( "GP_Sloc:submarine.adb:64:13" (#"submarine.adb" 64 0 0# #"submarine.adb" 64 0 0# Submarine__firetorpedo__fired.fired.bool__content <- ( (Boolean.of_int(0)) )) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   abstract ensures {true}(let _ = ( ( (let j =  (any int
  ) in (
   (if ((Boolean.andb((0 <= j)) ((j <= 1)))) then (
     abstract ensures {true}(let _ = ((Submarine__box__rep.to_rep((Array__Int__Submarine__box.get(Submarine__firetorpedo__d.d.Array__Int__Submarine__box.map__content) (j)))) <> 0) in (
     ()))
     end ))))
  ;
   (any bool
  requires { true} 
  ensures { ( (result = True) <-> (forall j   "model" "name:J" "model_trace:3600"  : int.
   ( ( (0 <= j) /\ (j <= 1) ) -> ((Submarine__box__rep.to_rep (Array__Int__Submarine__box.get Submarine__firetorpedo__d.d.Array__Int__Submarine__box.map__content j)) <> 0) )) )} 
  ) ) && ((Boolean.to_int(Submarine__firetorpedo__fired.fired.bool__content)) = (Boolean.to_int((Boolean.of_int(0))))) ) in (
   ()))
   end  )
end

(* Module for checking contracts and absence of run-time errors in subprogram "loadtorpedo" defined at submarine.ads:146, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Submarine__loadtorpedo__subprogram_def
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        Submarine__box
 use        Submarine__box__rep
 use        Submarine__ph_index___axiom
 use        Array__Int__Submarine__box
 use        Submarine__torpedos___axiom
 use        Submarine__loadtorpedo__load
 use        Array__Int__Submarine__box
 use        Submarine__loadtorpedo__d
 use        Submarine__loadtorpedo__a
 use        Submarine__loadtorpedo__b
 use        Submarine__loadtorpedo__L_2__R1b
 use        Submarine__loadtorpedo__L_2__R2b
 use        Submarine__loadtorpedo__L_2
 use        Submarine__loadtorpedo__L_2__i
 use        Submarine__loadtorpedo__a___axiom
 use        Submarine__loadtorpedo__b___axiom
 use        Submarine__loadtorpedo__L_2__i___axiom
 use        Submarine__loadtorpedo__L_2___axiom
 use        Submarine__box___axiom
 use        Submarine__ph_index___axiom
 use        Submarine__torpedos___axiom
 use        Submarine__loadtorpedo__load___axiom
 use        Submarine__loadtorpedo__d___axiom
 use        Submarine__loadtorpedo__L_2__R1b___axiom
 use        Submarine__loadtorpedo__L_2__R2b___axiom

 let def #"submarine.ads" 146 0 0#"W:diverges:N" "GP_Subp:submarine.ads:146" 
   (__void_param : unit)
  requires { #"submarine.ads" 146 0 0# true }
  ensures { #"submarine.ads" 146 0 0# (#"submarine.ads" 148 0 0# ( "model_vc_post" "keep_on_simp" "GP_Reason:VC_POSTCONDITION" "GP_Shape:pragargs__forall" "GP_Sloc:submarine.ads:148:12" "GP_Id:10" "comment:   Post => (for all J in d'Range => d(J) = loaded) and then load = False;
           ^ submarine.ads:148:12:VC_POSTCONDITION" ( (forall j #"submarine.ads" 148 0 0#  "model" "name:J" "model_trace:3674"  : int.
   ( ( (0 <= j) /\ (j <= 1) ) -> ( "GP_Pretty_Ada:3688" "GP_Sloc:submarine.ads:148:37" ((Submarine__box__rep.to_rep (Array__Int__Submarine__box.get Submarine__loadtorpedo__d.d.Array__Int__Submarine__box.map__content j)) = 0) ) )) /\ ( "GP_Pretty_Ada:3692" "GP_Sloc:submarine.ads:148:66" ( (Submarine__loadtorpedo__load.load.bool__content = True) <-> false ) ) ) )) }
   =
  ( () (* Assume dynamic invariants of inputs of the subprogram submarine.ads:146 *)
  ;
   assume {  (Submarine__torpedos___axiom.dynamic_invariant Submarine__loadtorpedo__d.d.Array__Int__Submarine__box.map__content True False True True) };
   assume {  true };
  () (* Declarations introduced by the compiler at the beginning of the subprogram submarine.ads:146 *)
  ;
  () (* Check for RTE in the Pre of the subprogram submarine.ads:146 *)
  ;
   abstract ensures {true}(let _ = ( ((Boolean.to_int(Submarine__loadtorpedo__load.load.bool__content)) = (Boolean.to_int((Boolean.of_int(1))))) && ( (let j =  (any int
  ) in (
   (if ((Boolean.andb((0 <= j)) ((j <= 1)))) then (
     abstract ensures {true}(let _ = ((Submarine__box__rep.to_rep((Array__Int__Submarine__box.get(Submarine__loadtorpedo__d.d.Array__Int__Submarine__box.map__content) (j)))) = 2) in (
     ()))
     end ))))
  ;
   (any bool
  requires { true} 
  ensures { ( (result = True) <-> (forall j   "model" "name:J" "model_trace:3655"  : int.
   ( ( (0 <= j) /\ (j <= 1) ) -> ((Submarine__box__rep.to_rep (Array__Int__Submarine__box.get Submarine__loadtorpedo__d.d.Array__Int__Submarine__box.map__content j)) = 2) )) )} 
  ) ) ) in (
   ()))
   end ;
  () (* Assume Pre of the subprogram submarine.ads:146 *)
  ;
   assume {  ( ( (Submarine__loadtorpedo__load.load.bool__content = True) <-> true ) /\ (forall j   "model" "name:J" "model_trace:3655"  : int.
   ( ( (0 <= j) /\ (j <= 1) ) -> ((Submarine__box__rep.to_rep (Array__Int__Submarine__box.get Submarine__loadtorpedo__d.d.Array__Int__Submarine__box.map__content j)) = 2) )) ) };
   try
   ( (#"submarine.adb" 69 0 0# ( #"submarine.adb" 69 0 0# Submarine__loadtorpedo__a.a.int__content <- ( 0 );
   #"submarine.adb" 69 0 0# assume { #"submarine.adb" 69 0 0# (Submarine__ph_index___axiom.dynamic_invariant Submarine__loadtorpedo__a.a.int__content True False True True) } ));
   (#"submarine.adb" 70 0 0# ( #"submarine.adb" 70 0 0# Submarine__loadtorpedo__b.b.int__content <- ( 1 );
   #"submarine.adb" 70 0 0# assume { #"submarine.adb" 70 0 0# (Submarine__ph_index___axiom.dynamic_invariant Submarine__loadtorpedo__b.b.int__content True False True True) } ));
   (#"submarine.adb" 74 0 0# ());
   ( "GP_Sloc:submarine.adb:73:7" (#"submarine.adb" 73 0 0# (if (((Boolean.to_int(Submarine__loadtorpedo__load.load.bool__content)) = (Boolean.to_int((Boolean.of_int(1)))))) then (
    ( ( "GP_Sloc:submarine.adb:74:19" (#"submarine.adb" 74 0 0# ()) );
    ( "GP_Sloc:submarine.adb:74:22" (#"submarine.adb" 74 0 0# ()) );
    ( "GP_Sloc:submarine.adb:74:19" (#"submarine.adb" 74 0 0# (#"submarine.adb" 74 0 0# ( (let submarine__loadtorpedo__L_2__R1b__assume = Submarine__loadtorpedo__a.a.int__content in (
     #"submarine.adb" 74 0 0# assume { #"submarine.adb" 74 0 0# (submarine__loadtorpedo__L_2__R1b__assume = Submarine__loadtorpedo__L_2__R1b.r1b) }))
    ;
    #"submarine.adb" 74 0 0# assume { #"submarine.adb" 74 0 0# (Submarine__ph_index___axiom.dynamic_invariant Submarine__loadtorpedo__L_2__R1b.r1b True False True True) } ))) );
    ( "GP_Sloc:submarine.adb:74:22" (#"submarine.adb" 74 0 0# (#"submarine.adb" 74 0 0# ( (let submarine__loadtorpedo__L_2__R2b__assume = Submarine__loadtorpedo__b.b.int__content in (
     #"submarine.adb" 74 0 0# assume { #"submarine.adb" 74 0 0# (submarine__loadtorpedo__L_2__R2b__assume = Submarine__loadtorpedo__L_2__R2b.r2b) }))
    ;
    #"submarine.adb" 74 0 0# assume { #"submarine.adb" 74 0 0# (Submarine__ph_index___axiom.dynamic_invariant Submarine__loadtorpedo__L_2__R2b.r2b True False True True) } ))) );
    ( "GP_Sloc:submarine.adb:74:24" (#"submarine.adb" 74 0 0# (let temp___299 = Submarine__loadtorpedo__L_2__R1b.r1b in (
    (let temp___300 = Submarine__loadtorpedo__L_2__R2b.r2b in (
     ( () (* Translation of an Ada loop from submarine.adb:74 *)
     ;
     #"submarine.adb" 74 0 0# try
      ( #"submarine.adb" 74 0 0# abstract ensures {true}(let _ = Submarine__loadtorpedo__d.d.Array__Int__Submarine__box.map__content in (
       ()))
       end ;
      (let temp___301 = #"submarine.adb" 74 0 0# (any Array__Int__Submarine__box.map
      ensures {#"submarine.adb" 74 0 0# (result = Submarine__loadtorpedo__d.d.Array__Int__Submarine__box.map__content)} 
      ) in (
       ( () (* Unrolling of the loop statements of loop submarine.adb:74 *)
       ;
       #"submarine.adb" 74 0 0# Submarine__loadtorpedo__L_2__i.i.int__content <- ( 0 );
       (if ((Boolean.andb((temp___299 <= Submarine__loadtorpedo__L_2__i.i.int__content)) ((Submarine__loadtorpedo__L_2__i.i.int__content <= temp___300)))) then (
        ( "GP_Sloc:submarine.adb:75:18" (#"submarine.adb" 75 0 0# #"submarine.adb" 75 0 0# Submarine__loadtorpedo__d.d.Array__Int__Submarine__box.map__content <- ( (Array__Int__Submarine__box.set(Submarine__loadtorpedo__d.d.Array__Int__Submarine__box.map__content) (Submarine__loadtorpedo__L_2__i.i.int__content) ((Submarine__box__rep.of_rep(0)))) )) )));
        Submarine__loadtorpedo__L_2__i.i.int__content <- ( 1 );
       (if ((Boolean.andb((temp___299 <= Submarine__loadtorpedo__L_2__i.i.int__content)) ((Submarine__loadtorpedo__L_2__i.i.int__content <= temp___300)))) then (
        ( "GP_Sloc:submarine.adb:75:18" (#"submarine.adb" 75 0 0# #"submarine.adb" 75 0 0# Submarine__loadtorpedo__d.d.Array__Int__Submarine__box.map__content <- ( (Array__Int__Submarine__box.set(Submarine__loadtorpedo__d.d.Array__Int__Submarine__box.map__content) (Submarine__loadtorpedo__L_2__i.i.int__content) ((Submarine__box__rep.of_rep(0)))) )) ))) )))
       )
     with
      Submarine__loadtorpedo__L_2.L_2 -> ()
     end )))
    ))
    ) ) )) else (
    ()))) );
   ( "GP_Sloc:submarine.adb:78:12" (#"submarine.adb" 78 0 0# #"submarine.adb" 78 0 0# Submarine__loadtorpedo__load.load.bool__content <- ( (Boolean.of_int(0)) )) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   abstract ensures {true}(let _ = ( ( (let j =  (any int
  ) in (
   (if ((Boolean.andb((0 <= j)) ((j <= 1)))) then (
     abstract ensures {true}(let _ = ((Submarine__box__rep.to_rep((Array__Int__Submarine__box.get(Submarine__loadtorpedo__d.d.Array__Int__Submarine__box.map__content) (j)))) = 0) in (
     ()))
     end ))))
  ;
   (any bool
  requires { true} 
  ensures { ( (result = True) <-> (forall j   "model" "name:J" "model_trace:3674"  : int.
   ( ( (0 <= j) /\ (j <= 1) ) -> ((Submarine__box__rep.to_rep (Array__Int__Submarine__box.get Submarine__loadtorpedo__d.d.Array__Int__Submarine__box.map__content j)) = 0) )) )} 
  ) ) && ((Boolean.to_int(Submarine__loadtorpedo__load.load.bool__content)) = (Boolean.to_int((Boolean.of_int(0))))) ) in (
   ()))
   end  )
end

(* Module for checking contracts and absence of run-time errors in subprogram "storetorpedo" defined at submarine.ads:150, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Submarine__storetorpedo__subprogram_def
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        Submarine__box
 use        Submarine__box__rep
 use        Submarine__ph_index___axiom
 use        Array__Int__Submarine__box
 use        Submarine__torpedos___axiom
 use        Submarine__storetorpedo__store
 use        Array__Int__Submarine__box
 use        Submarine__storetorpedo__d
 use        Submarine__storetorpedo__a
 use        Submarine__storetorpedo__b
 use        Submarine__storetorpedo__L_3__R4b
 use        Submarine__storetorpedo__L_3__R5b
 use        Submarine__storetorpedo__L_3
 use        Submarine__storetorpedo__L_3__i
 use        Submarine__storetorpedo__a___axiom
 use        Submarine__storetorpedo__b___axiom
 use        Submarine__storetorpedo__L_3__i___axiom
 use        Submarine__storetorpedo__L_3___axiom
 use        Submarine__box___axiom
 use        Submarine__ph_index___axiom
 use        Submarine__torpedos___axiom
 use        Submarine__storetorpedo__store___axiom
 use        Submarine__storetorpedo__d___axiom
 use        Submarine__storetorpedo__L_3__R4b___axiom
 use        Submarine__storetorpedo__L_3__R5b___axiom

 let def #"submarine.ads" 150 0 0#"W:diverges:N" "GP_Subp:submarine.ads:150" 
   (__void_param : unit)
  requires { #"submarine.ads" 150 0 0# true }
  ensures { #"submarine.ads" 150 0 0# (#"submarine.ads" 152 0 0# ( "model_vc_post" "keep_on_simp" "GP_Reason:VC_POSTCONDITION" "GP_Shape:pragargs__forall" "GP_Sloc:submarine.ads:152:12" "GP_Id:11" "comment:   Post => (for all J in d'Range => d(J) = stored) and then store = False;
           ^ submarine.ads:152:12:VC_POSTCONDITION" ( (forall j #"submarine.ads" 152 0 0#  "model" "name:J" "model_trace:3748"  : int.
   ( ( (0 <= j) /\ (j <= 1) ) -> ( "GP_Pretty_Ada:3762" "GP_Sloc:submarine.ads:152:37" ((Submarine__box__rep.to_rep (Array__Int__Submarine__box.get Submarine__storetorpedo__d.d.Array__Int__Submarine__box.map__content j)) = 2) ) )) /\ ( "GP_Pretty_Ada:3766" "GP_Sloc:submarine.ads:152:67" ( (Submarine__storetorpedo__store.store.bool__content = True) <-> false ) ) ) )) }
   =
  ( () (* Assume dynamic invariants of inputs of the subprogram submarine.ads:150 *)
  ;
   assume {  (Submarine__torpedos___axiom.dynamic_invariant Submarine__storetorpedo__d.d.Array__Int__Submarine__box.map__content True False True True) };
   assume {  true };
  () (* Declarations introduced by the compiler at the beginning of the subprogram submarine.ads:150 *)
  ;
  () (* Check for RTE in the Pre of the subprogram submarine.ads:150 *)
  ;
   abstract ensures {true}(let _ = (Boolean.andb(((Boolean.to_int(Submarine__storetorpedo__store.store.bool__content)) = (Boolean.to_int((Boolean.of_int(1)))))) (( (let j =  (any int
  ) in (
   (if ((Boolean.andb((0 <= j)) ((j <= 1)))) then (
     abstract ensures {true}(let _ = ((Submarine__box__rep.to_rep((Array__Int__Submarine__box.get(Submarine__storetorpedo__d.d.Array__Int__Submarine__box.map__content) (j)))) = 1) in (
     ()))
     end ))))
  ;
   (any bool
  requires { true} 
  ensures { ( (result = True) <-> (forall j   "model" "name:J" "model_trace:3729"  : int.
   ( ( (0 <= j) /\ (j <= 1) ) -> ((Submarine__box__rep.to_rep (Array__Int__Submarine__box.get Submarine__storetorpedo__d.d.Array__Int__Submarine__box.map__content j)) = 1) )) )} 
  ) ))) in (
   ()))
   end ;
  () (* Assume Pre of the subprogram submarine.ads:150 *)
  ;
   assume {  ( ( (Submarine__storetorpedo__store.store.bool__content = True) <-> true ) /\ (forall j   "model" "name:J" "model_trace:3729"  : int.
   ( ( (0 <= j) /\ (j <= 1) ) -> ((Submarine__box__rep.to_rep (Array__Int__Submarine__box.get Submarine__storetorpedo__d.d.Array__Int__Submarine__box.map__content j)) = 1) )) ) };
   try
   ( (#"submarine.adb" 84 0 0# ( #"submarine.adb" 84 0 0# Submarine__storetorpedo__a.a.int__content <- ( 0 );
   #"submarine.adb" 84 0 0# assume { #"submarine.adb" 84 0 0# (Submarine__ph_index___axiom.dynamic_invariant Submarine__storetorpedo__a.a.int__content True False True True) } ));
   (#"submarine.adb" 85 0 0# ( #"submarine.adb" 85 0 0# Submarine__storetorpedo__b.b.int__content <- ( 1 );
   #"submarine.adb" 85 0 0# assume { #"submarine.adb" 85 0 0# (Submarine__ph_index___axiom.dynamic_invariant Submarine__storetorpedo__b.b.int__content True False True True) } ));
   (#"submarine.adb" 91 0 0# ());
   ( "GP_Sloc:submarine.adb:90:7" (#"submarine.adb" 90 0 0# (if (((Boolean.to_int(Submarine__storetorpedo__store.store.bool__content)) = (Boolean.to_int((Boolean.of_int(1)))))) then (
    ( ( "GP_Sloc:submarine.adb:91:19" (#"submarine.adb" 91 0 0# ()) );
    ( "GP_Sloc:submarine.adb:91:22" (#"submarine.adb" 91 0 0# ()) );
    ( "GP_Sloc:submarine.adb:91:19" (#"submarine.adb" 91 0 0# (#"submarine.adb" 91 0 0# ( (let submarine__storetorpedo__L_3__R4b__assume = Submarine__storetorpedo__a.a.int__content in (
     #"submarine.adb" 91 0 0# assume { #"submarine.adb" 91 0 0# (submarine__storetorpedo__L_3__R4b__assume = Submarine__storetorpedo__L_3__R4b.r4b) }))
    ;
    #"submarine.adb" 91 0 0# assume { #"submarine.adb" 91 0 0# (Submarine__ph_index___axiom.dynamic_invariant Submarine__storetorpedo__L_3__R4b.r4b True False True True) } ))) );
    ( "GP_Sloc:submarine.adb:91:22" (#"submarine.adb" 91 0 0# (#"submarine.adb" 91 0 0# ( (let submarine__storetorpedo__L_3__R5b__assume = Submarine__storetorpedo__b.b.int__content in (
     #"submarine.adb" 91 0 0# assume { #"submarine.adb" 91 0 0# (submarine__storetorpedo__L_3__R5b__assume = Submarine__storetorpedo__L_3__R5b.r5b) }))
    ;
    #"submarine.adb" 91 0 0# assume { #"submarine.adb" 91 0 0# (Submarine__ph_index___axiom.dynamic_invariant Submarine__storetorpedo__L_3__R5b.r5b True False True True) } ))) );
    ( "GP_Sloc:submarine.adb:91:24" (#"submarine.adb" 91 0 0# (let temp___305 = Submarine__storetorpedo__L_3__R4b.r4b in (
    (let temp___306 = Submarine__storetorpedo__L_3__R5b.r5b in (
     ( () (* Translation of an Ada loop from submarine.adb:91 *)
     ;
     #"submarine.adb" 91 0 0# try
      ( #"submarine.adb" 91 0 0# abstract ensures {true}(let _ = Submarine__storetorpedo__d.d.Array__Int__Submarine__box.map__content in (
       ()))
       end ;
      (let temp___307 = #"submarine.adb" 91 0 0# (any Array__Int__Submarine__box.map
      ensures {#"submarine.adb" 91 0 0# (result = Submarine__storetorpedo__d.d.Array__Int__Submarine__box.map__content)} 
      ) in (
       ( () (* Unrolling of the loop statements of loop submarine.adb:91 *)
       ;
       #"submarine.adb" 91 0 0# Submarine__storetorpedo__L_3__i.i.int__content <- ( 0 );
       (if ((Boolean.andb((temp___305 <= Submarine__storetorpedo__L_3__i.i.int__content)) ((Submarine__storetorpedo__L_3__i.i.int__content <= temp___306)))) then (
        ( "GP_Sloc:submarine.adb:92:18" (#"submarine.adb" 92 0 0# #"submarine.adb" 92 0 0# Submarine__storetorpedo__d.d.Array__Int__Submarine__box.map__content <- ( (Array__Int__Submarine__box.set(Submarine__storetorpedo__d.d.Array__Int__Submarine__box.map__content) (Submarine__storetorpedo__L_3__i.i.int__content) ((Submarine__box__rep.of_rep(2)))) )) )));
        Submarine__storetorpedo__L_3__i.i.int__content <- ( 1 );
       (if ((Boolean.andb((temp___305 <= Submarine__storetorpedo__L_3__i.i.int__content)) ((Submarine__storetorpedo__L_3__i.i.int__content <= temp___306)))) then (
        ( "GP_Sloc:submarine.adb:92:18" (#"submarine.adb" 92 0 0# #"submarine.adb" 92 0 0# Submarine__storetorpedo__d.d.Array__Int__Submarine__box.map__content <- ( (Array__Int__Submarine__box.set(Submarine__storetorpedo__d.d.Array__Int__Submarine__box.map__content) (Submarine__storetorpedo__L_3__i.i.int__content) ((Submarine__box__rep.of_rep(2)))) )) ))) )))
       )
     with
      Submarine__storetorpedo__L_3.L_3 -> ()
     end )))
    ))
    ) ) )) else (
    ()))) );
   ( "GP_Sloc:submarine.adb:95:13" (#"submarine.adb" 95 0 0# #"submarine.adb" 95 0 0# Submarine__storetorpedo__store.store.bool__content <- ( (Boolean.of_int(0)) )) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   abstract ensures {true}(let _ = ( ( (let j =  (any int
  ) in (
   (if ((Boolean.andb((0 <= j)) ((j <= 1)))) then (
     abstract ensures {true}(let _ = ((Submarine__box__rep.to_rep((Array__Int__Submarine__box.get(Submarine__storetorpedo__d.d.Array__Int__Submarine__box.map__content) (j)))) = 2) in (
     ()))
     end ))))
  ;
   (any bool
  requires { true} 
  ensures { ( (result = True) <-> (forall j   "model" "name:J" "model_trace:3748"  : int.
   ( ( (0 <= j) /\ (j <= 1) ) -> ((Submarine__box__rep.to_rep (Array__Int__Submarine__box.get Submarine__storetorpedo__d.d.Array__Int__Submarine__box.map__content j)) = 2) )) )} 
  ) ) && ((Boolean.to_int(Submarine__storetorpedo__store.store.bool__content)) = (Boolean.to_int((Boolean.of_int(0))))) ) in (
   ()))
   end  )
end
